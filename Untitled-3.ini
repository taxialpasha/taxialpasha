<!DOCTYPE html>
<html dir="rtl" lang="ar">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <meta name="description" content="تطبيق تاكسي العراق - خدمة حجز سيارات الأجرة الأفضل في العراق">
    <meta name="keywords" content="تاكسي العراق, سيارات أجرة, حجز تاكسي, نقل, مواصلات">
    <meta name="author" content="تاكسي العراق">
    <meta name="theme-color" content="#FFD700">
    <meta name="mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">

    <title>تاكسي العراق - خدمة حجز السيارات الأولى في العراق</title>

    <!-- App Icons -->

    <!-- قبل إغلاق وسم head -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    <script src="https://unpkg.com/react@18/umd/react.production.min.js"></script>
    <script src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js"></script>
    <script src="https://unpkg.com/react-leaflet@4.2.1/dist/react-leaflet.min.js"></script>
    <link rel="icon" type="image/png"
        href="https://firebasestorage.googleapis.com/v0/b/messageemeapp.appspot.com/o/driver-images%2F7605a607-6cf8-4b32-aee1-fa7558c98452.png?alt=media&token=5cf9e67c-ba6e-4431-a6a0-79dede15b527">
    <link rel="apple-touch-icon" sizes="180x180"
        href="https://firebasestorage.googleapis.com/v0/b/messageemeapp.appspot.com/o/driver-images%2F7605a607-6cf8-4b32-aee1-fa7558c98452.png?alt=media&token=5cf9e67c-ba6e-4431-a6a0-79dede15b527">
    <link rel="apple-touch-startup-image"
        href="https://firebasestorage.googleapis.com/v0/b/messageemeapp.appspot.com/o/driver-images%2F7605a607-6cf8-4b32-aee1-fa7558c98452.png?alt=media&token=5cf9e67c-ba6e-4431-a6a0-79dede15b527">

    <!-- Web App Manifest -->
    <link rel="manifest" href="./manifest.json">

    <!-- External CSS Libraries -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.2/css/bootstrap.rtl.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/leaflet.css">

    <!-- App CSS -->
    <link rel="stylesheet" href="./style.css">

    <!-- Meta Tags -->
    <meta property="og:title" content="تاكسي العراق">
    <meta property="og:description" content="خدمة حجز سيارات الأجرة الأفضل في العراق">
    <meta property="og:image"
        content="https://firebasestorage.googleapis.com/v0/b/messageemeapp.appspot.com/o/driver-images%2F7605a607-6cf8-4b32-aee1-fa7558c98452.png?alt=media&token=5cf9e67c-ba6e-4431-a6a0-79dede15b527">
    <meta property="og:url" content="https://taxi-iraq.com">
    <meta name="twitter:card" content="summary_large_image">
    <meta name="twitter:title" content="تاكسي العراق">
    <meta name="twitter:description" content="خدمة حجز سيارات الأجرة الأفضل في العراق">
    <meta name="twitter:image"
        content="https://firebasestorage.googleapis.com/v0/b/messageemeapp.appspot.com/o/driver-images%2F7605a607-6cf8-4b32-aee1-fa7558c98452.png?alt=media&token=5cf9e67c-ba6e-4431-a6a0-79dede15b527">
</head>

<body>
    <!-- Content will be here -->

    <!-- External Libraries -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.2/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/leaflet.js"></script>
    <script src="https://unpkg.com/babel-standalone/babel.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/qrcodejs/1.0.0/qrcode.min.js"></script>
    <script src="https://unpkg.com/react@18.2.0/umd/react.production.min.js"></script>
    <script src="https://unpkg.com/react-dom@18.2.0/umd/react-dom.production.min.js"></script>

    <!-- Firebase Scripts -->
    <script src="https://www.gstatic.com/firebasejs/8.10.0/firebase-app.js"></script>
    <script src="https://www.gstatic.com/firebasejs/8.10.0/firebase-database.js"></script>
    <script src="https://www.gstatic.com/firebasejs/8.10.0/firebase-storage.js"></script>
    <script src="https://www.gstatic.com/firebasejs/8.10.0/firebase-messaging.js"></script>


    <!-- App Scripts -->

    <!-- إضافة المزيد من الأصوات -->
    <audio id="notificationSound" src="notification-sound.mp3" preload="auto"></audio>
    <audio id="messageSound" src="message-sound.mp3" preload="auto"></audio>

    <!-- إضافة الملفات الجديدة -->
    <script type="module" src="user-auth-notifications.js"></script>
    <script type="module" src="notifications-manager.js"></script>
    <script src="firebase-config.js"></script>
    <!-- قبل إغلاق body -->
    <script src="nearby-drivers-map.js"></script>



    <!-- Application CSS -->
    <style>
        /* نظام الألوان الأساسي */
        :root {
            --primary-color: #FFD700;
            /* اللون الذهبي الأساسي */
            --primary-dark: #B8860B;
            /* درجة داكنة من الذهبي */
            --primary-light: #FFF8DC;
            /* درجة فاتحة من الذهبي */

            --background-dark: #1a1a1a;
            /* خلفية داكنة */
            --background-light: #242424;
            /* خلفية فاتحة نسبياً */

            --text-primary: #FFFFFF;
            /* لون النص الأساسي */
            --text-secondary: #CCCCCC;
            /* لون النص الثانوي */

            --accent-success: #2ECC40;
            /* لون النجاح */
            --accent-error: #FF4136;
            /* لون الخطأ */
            --accent-warning: #FFB236;
            /* لون التحذير */

            /* المسافات والأحجام */
            --border-radius-sm: 8px;
            --border-radius-md: 12px;
            --border-radius-lg: 20px;
            --spacing-xs: 0.25rem;
            --spacing-sm: 0.5rem;
            --spacing-md: 1rem;
            --spacing-lg: 1.5rem;
        }

        /* تحسينات العنوان */
        .app-header {
            background: var(--background-dark);
            border-bottom: 2px solid var(--primary-color);
            padding: var(--spacing-md) 0;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);
        }

        .app-logo {
            color: var(--primary-color);
            font-size: 1.5rem;
            font-weight: bold;
            text-decoration: none;
            display: flex;
            align-items: center;
            gap: var(--spacing-sm);
        }

        .app-logo i {
            font-size: 1.8rem;
        }

        .driver-card {
        position: relative;
        transition: all 0.3s ease;
        overflow: hidden;
    }

    .status-banner {
        position: absolute;
        top: 20px;
        right: -35px;
        transform: rotate(45deg);
        padding: 5px 40px;
        color: white;
        font-weight: bold;
        z-index: 2;
        box-shadow: 0 2px 5px rgba(0,0,0,0.2);
    }

    .status-banner.pending {
        background-color: #ffd700;
        color: #000;
    }

    .status-banner.not-approved {
        background-color: #dc3545;
    }

    .status-banner.approved {
        background-color: #28a745;
    }

    .driver-card.not-approved .driver-image-container {
        filter: grayscale(100%);
    }

    .driver-card.pending .driver-image-container {
        filter: grayscale(30%);
    }

    .driver-actions button:disabled {
        background-color: #6c757d !important;
        cursor: not-allowed;
    }

        .driver-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 20px rgba(255, 215, 0, 0.2);
        }

        .driver-info {
            padding: var(--spacing-lg);
        }

        .driver-name {
            color: var(--primary-color);
            font-size: 1.25rem;
            font-weight: bold;
            margin-bottom: var(--spacing-md);
        }

        /* تحسينات الأزرار */
        .action-btn {
            padding: var(--spacing-md) var(--spacing-lg);
            border-radius: var(--border-radius-md);
            font-weight: bold;
            transition: all 0.3s ease;
            border: none;
            cursor: pointer;
        }

        .action-btn.primary {
            background: var(--primary-color);
            color: var(--background-dark);
        }



        .action-btn.secondary {
            background: var(--background-dark);
            color: var(--primary-color);
            border: 2px solid var(--primary-color);
        }

        /* تحسينات الفلاتر */
        .location-chip {
            background: var(--background-light);
            color: var(--text-primary);
            border: 2px solid var(--primary-color);
            padding: var(--spacing-sm) var(--spacing-lg);
            border-radius: 25px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .location-chip:hover,
        .location-chip.active {
            background: var(--primary-color);
            color: var(--background-dark);
        }

        /* تحسينات النوافذ المنبثقة */
        .modal-content {
            background: var(--background-dark);
            border: 2px solid var(--primary-color);
            border-radius: var(--border-radius-lg);
        }

        .modal-header {
            border-bottom: 1px solid var(--primary-color);
            padding: var(--spacing-lg);
        }

        .modal-title {
            color: var(--primary-color);
            font-weight: bold;
        }

        /* تحسينات النماذج */
        .form-control {
            background: var(--background-light);
            border: 1px solid var(--primary-color);
            color: var(--text-primary);
            border-radius: var(--border-radius-sm);
            padding: var(--spacing-md);
        }

        .form-control:focus {
            box-shadow: 0 0 0 2px var(--primary-color);
            border-color: var(--primary-color);
        }

        /* تحسينات الإشعارات */
        .notification-toast {
            background: var(--background-dark);
            border: 2px solid var(--primary-color);
            color: var(--text-primary);
            border-radius: var(--border-radius-md);
            padding: var(--spacing-md);
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.3);
        }


        

        /* تحسينات الحالة */
        .driver-status.status-active {
            color: var(--accent-success);
        }

        .driver-status.status-inactive {
            color: var(--accent-error);
        }

        /* تحسينات القوائم */
        .side-nav {
            background: var(--background-dark);
            border-left: 2px solid var(--primary-color);
        }

        .side-nav-item {
            color: var(--text-primary);
            padding: var(--spacing-md);
            transition: all 0.3s ease;
        }

        .side-nav-item:hover {
            background: var(--primary-color);
            color: var(--background-dark);
        }

        /* أنماط نافذة البحث الرئيسية */
        #searchModal .modal-content {
            background-color: #1a1a1a;
            border: 2px solid #FFD700;
            border-radius: 15px;
        }

        #searchModal .modal-header {
            border-bottom: 1px solid #FFD700;
            padding: 1rem 1.5rem;
        }

        #searchModal .modal-title {
            color: #FFD700;
            font-weight: bold;
        }

        /* أنماط حقل البحث */
        .search-input-wrapper {
            position: relative;
            margin-bottom: 1rem;
        }

        .search-input {
            background-color: #333;
            border: 2px solid #FFD700;
            color: #FFFFFF;
            padding: 0.8rem 1rem;
            border-radius: 10px;
            width: 100%;
        }

        .search-input:focus {
            outline: none;
            box-shadow: 0 0 0 2px rgba(255, 215, 0, 0.3);
        }

        .search-input::placeholder {
            color: #999;
        }

        /* أنماط خيارات البحث */
        .search-options {
            margin: 1rem 0;
        }

        .btn-group {
            width: 100%;
            gap: 0.5rem;
            display: flex;
        }

        /* تنسيق أزرار الخيارات */
        .btn-check+.btn-outline-primary {
            background-color: #333;
            color: #FFD700;
            border: 1px solid #FFD700;
            padding: 0.5rem 1rem;
            flex: 1;
            font-weight: bold;
        }

        .btn-check:checked+.btn-outline-primary {
            background-color: #FFD700;
            color: #000000;
            border-color: #FFD700;
        }

        /* تنسيق نتائج البحث */
        .search-results {
            max-height: 400px;
            overflow-y: auto;
            padding: 0.5rem;
        }

        .search-result-item {
            background-color: #000000;
            border: 1px solid #333;
            border-radius: 10px;
            padding: 1rem;
            margin-bottom: 0.8rem;
            transition: all 0.3s ease;
        }

        .search-result-item:hover {
            border-color: #FFD700;
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(255, 215, 0, 0.1);
        }

        /* تنسيق معلومات السائق في النتائج */
        .search-result-item .driver-info {
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .search-result-item .driver-image {
            width: 60px;
            height: 60px;
            border-radius: 50%;
            border: 2px solid #FFD700;
            object-fit: cover;
        }

        .search-result-item .driver-details {
            flex: 1;
        }

        .search-result-item .driver-name {
            color: #FFFFFF;
            font-size: 1.1rem;
            font-weight: bold;
            margin-bottom: 0.3rem;
        }

        .search-result-item .driver-meta {
            color: #CCCCCC;
            font-size: 0.9rem;
            margin-bottom: 0.2rem;
        }

        .search-result-item .driver-meta i {
            color: #FFD700;
            margin-left: 0.5rem;
        }

        /* تنسيق التمييز في نتائج البحث */
        .highlight {
            background-color: rgba(255, 215, 0, 0.3);
            padding: 0.1rem 0.3rem;
            border-radius: 3px;
            color: #FFD700;
        }

        /* تنسيق رسالة عدم وجود نتائج */
        .no-results {
            text-align: center;
            color: #FFFFFF;
            padding: 2rem;
            font-size: 1.1rem;
        }

        /* تنسيق شريط التمرير */
        .search-results::-webkit-scrollbar {
            width: 6px;
        }

        .search-results::-webkit-scrollbar-track {
            background: #333;
            border-radius: 3px;
        }

        .search-results::-webkit-scrollbar-thumb {
            background: #FFD700;
            border-radius: 3px;
        }

        /* حالة تحميل النتائج */
        .search-loading {
            text-align: center;
            padding: 2rem;
            color: #FFD700;
        }

        .search-loading .spinner-border {
            width: 3rem;
            height: 3rem;
        }

        /* Preserve original location chip styles */
        .location-chip {
            background-color: #000000 !important;
            border: 2px solid #FFD700 !important;
            color: #FFFFFF !important;
        }

        .location-chip:hover,
        .location-chip.active {
            background-color: #1a1a1a !important;
            color: #FFFFFF !important;
            border-color: #FFD700 !important;
        }

        .location-chip i {
            color: #FFD700 !important;
        }

        /* Preserve driver status styles */
        .driver-status {
            background: rgba(255, 255, 255, 0.8) !important;
        }

        .status-active {
            color: var(--success-color) !important;
        }

        .status-inactive {
            color: var(--accent-color) !important;
        }

        /* Additional preservation rules for specific components */
        .search-input,
        .form-control {
            color: #000000 !important;
        }

        .modal-header,
        .modal-footer {
            border-color: rgba(255, 215, 0, 0.2) !important;
        }

        /* Keep original colors for action buttons */
        .action-btn.primary {
            background: var(--primary-color) !important;
            color: var(--secondary-color) !important;
        }

        .action-btn.secondary {
            background: var(--secondary-color) !important;
            color: var(--primary-color) !important;
        }

        /* Registration Modal Styles */
        .modal-content {
            background-color: #1a1a1a !important;
            border: 2px solid #FFD700 !important;
            border-radius: 20px;
            box-shadow: 0 8px 30px rgba(0, 0, 0, 0.3);
        }

        .modal-header {
            background-color: #000000 !important;
            border-bottom: 2px solid #FFD700 !important;
            padding: 1.5rem;
        }

        .modal-title {
            color: #FFD700 !important;
            font-size: 1.5rem;
            font-weight: bold;
            text-align: center;
        }

        .btn-close {
            color: #FFD700 !important;
            opacity: 1 !important;
            filter: brightness(0) invert(1) sepia(1) saturate(10000%) hue-rotate(300deg);
        }

        .registration-section {
            background-color: #242424 !important;
            border: 1px solid #FFD700 !important;
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 20px;
        }

        .section-title {
            color: #FFD700 !important;
            border-bottom: 2px solid #FFD700;
            padding-bottom: 10px;
            margin-bottom: 20px;
            font-weight: bold;
        }

        /* Form Controls */
        .form-label {
            color: #FFFFFF !important;
            font-weight: 500;
            margin-bottom: 0.5rem;
        }

        .form-control,
        .form-select {
            background-color: #333333 !important;
            border: 1px solid #FFD700 !important;
            color: #FFFFFF !important;
            border-radius: 10px;
        }

        .form-control:focus,
        .form-select:focus {
            background-color: #444444 !important;
            border-color: #FFD700 !important;
            box-shadow: 0 0 0 0.2rem rgba(255, 215, 0, 0.25) !important;
            color: #FFFFFF !important;
        }

        .form-control::placeholder {
            color: rgba(255, 255, 255, 0.6) !important;
        }

        /* Upload Containers */
        .user-photo-upload,
        .driver-photo-upload {
            width: 150px;
            height: 150px;
            border-radius: 50%;
            border: 2px dashed #FFD700 !important;
            background-color: #242424 !important;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .upload-placeholder {
            text-align: center;
            color: #FFD700 !important;
        }

        .upload-placeholder i {
            font-size: 2rem;
            margin-bottom: 10px;
            color: #FFD700 !important;
        }

        /* Terms Checkbox */
        .form-check-label {
            color: #FFFFFF !important;
        }

        .form-check-input {
            border-color: #FFD700 !important;
        }

        .form-check-input:checked {
            background-color: #FFD700 !important;
            border-color: #FFD700 !important;
        }

        /* Submit Button */
        .btn-primary {
            background-color: #FFD700 !important;
            border-color: #FFD700 !important;
            color: #000000 !important;
            font-weight: bold;
            padding: 0.75rem 2rem;
            border-radius: 10px;
            transition: all 0.3s ease;
        }

        .btn-primary:hover {
            background-color: #ccac00 !important;
            border-color: #ccac00 !important;
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(255, 215, 0, 0.3);
        }

        /* Account Type Cards */
        .account-type-card {
            background-color: #242424 !important;
            border: 2px solid #FFD700 !important;
            border-radius: 15px;
            padding: 20px;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .account-type-card:hover {
            transform: translateY(-5px);
            background-color: #333333 !important;
            box-shadow: 0 5px 15px rgba(255, 215, 0, 0.3);
        }

        .account-type-card h6 {
            color: #FFD700 !important;
            margin: 15px 0;
            font-weight: bold;
        }

        .account-type-card p {
            color: #FFFFFF !important;
        }

        .account-type-card .small {
            color: rgba(255, 255, 255, 0.8) !important;
        }

        .icon-container {
            width: 80px;
            height: 80px;
            margin: 0 auto;
            background-color: #FFD700 !important;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .icon-container i {
            color: #000000 !important;
            font-size: 2rem;
        }

        /* Document Upload Sections */
        .document-upload {
            border: 2px dashed #FFD700 !important;
            background-color: #242424 !important;
            border-radius: 10px;
            padding: 20px;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .document-upload:hover {
            background-color: #333333 !important;
            border-color: #FFD700 !important;
        }

        /* Links */
        .modal-body a {
            color: #FFD700 !important;
            text-decoration: none;
        }

        .modal-body a:hover {
            color: #ccac00 !important;
            text-decoration: underline;
        }


        /* تحديثات الخريطة */
        :root {
            --map-height: 40vh;
            /* ارتفاع الخريطة */
            --map-min-height: 50px;
            /* الحد الأدنى لارتفاع الخريطة */
            --map-margin-top: 3rem;
            /* المسافة بين شريط التايتل والخريطة */
            --map-margin-bottom: 1rem;
            /* المسافة بين الخريطة والفلاتر */
            --map-border-radius: 20px;
            /* تقويس حواف الخريطة */
            --map-shadow: 0 10px 20px rgba(141, 16, 16, 0.1);
            /* ظل الخريطة */
            --filter-margin-top: 1rem;
            /* المسافة بين الفلاتر والخريطة */
            --filter-margin-bottom: 1rem;
            /* المسافة تحت الفلاتر */
            --filter-gap: 0.5rem;
            /* الفجوة بين عناصر الفلاتر */
            --header-margin-bottom: 2rem;
            /* المسافة بين شريط التايتل والخريطة */
        }



        #map {
            height: var(--map-height);
            /* ارتفاع الخريطة */
            min-height: var(--map-min-height);
            /* الحد الأدنى للارتفاع */
            width: 100%;
            /* عرض الخريطة */
            border-radius: var(--map-border-radius);
            /* تقويس الحواف */
            margin: var(--map-margin-top) auto var(--map-margin-bottom);
            /* المسافات حول الخريطة */
            box-shadow: var(--map-shadow);
            /* الظل */
            border: 1px solid var(--secondary-color);
            /* الحدود */
            z-index: 1;
            position: relative;
            background: linear-gradient(135deg, #0e7583, #80deea);
            /* تدرج الخلفية */
        }

        /* تحديث الخريطة */
        /* تحسين مظهر حاوية الخريطة */
        #map {
            height: var(--map-height);
            min-height: var(--map-min-height);

            width: 100%;
            border: 2px solid #FFD700;
            border-radius: 20px;
            overflow: hidden;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
            margin: 20px 0;
            position: relative;
            background: linear-gradient(135deg, #1a1a1a, #2a2a2a);
        }

        /* إضافة تأثير شبه شفاف قبل تحميل الخريطة */
        #map::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.1);
            z-index: 1;
            pointer-events: none;
        }

        /* تحسين مظهر عناصر التحكم بالخريطة */
        .leaflet-control-container {
            font-family: 'Cairo', sans-serif;
        }

        /* تحسين أزرار التحكم بالتكبير/التصغير */
        .leaflet-bar {
            border: none !important;
            margin: 10px !important;
        }

        .leaflet-bar a {
            background: rgba(0, 0, 0, 0.8) !important;
            color: #FFD700 !important;
            border: 2px solid #FFD700 !important;
            width: 36px !important;
            height: 36px !important;
            line-height: 36px !important;
            transition: all 0.3s ease !important;
        }

        .leaflet-bar a:hover {
            background: rgba(255, 215, 0, 0.2) !important;
            color: #FFFFFF !important;
        }

        /* تحسين مظهر التحكم بالطبقات */
        .leaflet-control-layers {
            border: 2px solid #FFD700 !important;
            border-radius: 15px !important;
            background: rgba(0, 0, 0, 0.9) !important;
            padding: 15px !important;
            backdrop-filter: blur(5px);
        }

        .leaflet-control-layers label {
            margin: 8px 0 !important;
            color: #FFFFFF !important;
        }

        /* تحسين مظهر علامات الخريطة */
        .leaflet-marker-icon {
            transition: transform 0.3s ease;
        }

        .leaflet-marker-icon:hover {
            transform: scale(1.1);
        }

        /* تحسين النوافذ المنبثقة */
        .leaflet-popup-content-wrapper {
            background: rgba(0, 0, 0, 0.9) !important;
            color: #FFFFFF !important;
            border: 2px solid #FFD700;
            border-radius: 15px !important;
            backdrop-filter: blur(10px);
        }

        .leaflet-popup-tip {
            background: #FFD700 !important;
        }

        .leaflet-popup-close-button {
            color: #FFD700 !important;
            font-size: 20px !important;
            padding: 5px !important;
        }

        /* تحسين مقياس الخريطة */
        .leaflet-control-scale {
            background: rgba(0, 0, 0, 0.8) !important;
            padding: 5px 10px !important;
            border-radius: 10px !important;
            border: 1px solid #FFD700 !important;
            color: #FFFFFF !important;
        }

        /* تحسين مظهر التحميل */
        .map-loading {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            z-index: 1000;
            background: rgba(0, 0, 0, 0.8);
            padding: 20px;
            border-radius: 15px;
            border: 2px solid #FFD700;
            color: #FFFFFF;
            display: none;
        }

        /* تحسين حالة التحميل للطبقات */
        .leaflet-tile-loading {
            animation: tileLoadingPulse 1s infinite;
        }

        @keyframes tileLoadingPulse {
            0% {
                opacity: 0.6;
            }

            50% {
                opacity: 0.8;
            }

            100% {
                opacity: 0.6;
            }
        }

        /* تحسين مظهر الحدود بين الطبقات */
        .leaflet-tile-container img {
            border: 0.5px solid rgba(255, 215, 0, 0.1);
        }

        /* تحسين مظهر الخريطة عند التفاعل */
        #map.is-dragging {
            cursor: grabbing;
        }

        /* تحسين مظهر النص على الخريطة */
        .leaflet-tooltip {
            background: rgba(0, 0, 0, 0.8) !important;
            color: #FFFFFF !important;
            border: 1px solid #FFD700 !important;
            border-radius: 10px !important;
            padding: 8px 12px !important;
        }

        /* إضافة تأثيرات تفاعلية عند التحريك */
        @media (hover: hover) {
            #map:hover {
                box-shadow: 0 6px 25px rgba(255, 215, 0, 0.2);
            }
        }

        /* تحسين التجاوب مع الشاشات المختلفة */
        @media screen and (max-width: 768px) {
            #map {
                height: 40vh;
            }

            .leaflet-control-layers {
                max-width: 90vw;
            }
        }

        @media screen and (min-width: 1200px) {
            #map {
                height: 60vh;
            }
        }

        /* المسافة بين الخريطة والعناصر الأخرى */
        .container {
            display: flex;
            flex-direction: column;
            /* ترتيب العناصر عموديًا */
            gap: 2rem;
            /* مسافة بين العناصر */
            padding: 0rem;
            /* حشوة داخلية للحاوية */
        }

        .app-header {
            margin-bottom: 3rem;
            /* مسافة بين شريط التايتل والخريطة */
        }

        /* تحسين المسافة بين الخريطة والعناصر الأخرى */
        .container {
            display: flex;
            flex-direction: column;
            gap: 0rem;
            /* مسافة بين العناصر */
        }

        /* تحسين شريط التايتل */

        /* اللوجو واسم التطبيق */
        .app-logo {
            font-size: 1.2rem;
            font-weight: bold;
            color: var(--primary-color);
            text-decoration: none;
            display: flex;
            align-items: center;
        }

        .app-logo i {
            font-size: 1.5rem;
            margin-right: 0.5rem;
            color: var(--primary-color);
        }

        /* أيقونة البحث */
        .search-icon {
            color: var(--primary-color);
            font-size: 1.2rem;
            text-decoration: none;
            transition: color 0.3s ease;
        }


        .driver-card.pending {
        position: relative;
        opacity: 0.8;
        filter: grayscale(30%);
    }

    .driver-card.not-approved {
        opacity: 0.7;
        filter: grayscale(100%);
    }

    .driver-status-banner {
        position: absolute;
        top: 20px;
        right: -30px;
        transform: rotate(45deg);
        padding: 5px 40px;
        color: white;
        font-weight: bold;
        z-index: 2;
    }

    .driver-status-banner.pending {
        background-color: #ffd700;
        color: #000;
    }

    .driver-status-banner.not-approved {
        background-color: #dc3545;
    }

    .driver-info.frozen {
        pointer-events: none;
    }

    .driver-card .driver-actions button:disabled {
        background-color: #6c757d;
        cursor: not-allowed;
    }


        .search-icon:hover {
            color: #ffc107;
        }

        /* الأدوات الأخرى */
        .tools {
            display: flex;
            gap: 1rem;
        }

        .tools .nav-link {
            color: #fff;
            font-size: 1.2rem;
            text-decoration: none;
            transition: color 0.3s ease;
        }

        .tools .nav-link:hover {
            color: var(--primary-color);
        }



        /* اللوجو واسم التطبيق */
        .app-logo {
            display: flex;
            align-items: center;
            font-size: 1.2rem;
            font-weight: bold;
            color: var(--primary-color);
            gap: 0.5rem;
            text-decoration: none;
        }

        .app-logo i {
            font-size: 1.5rem;
            color: var(--primary-color);
        }

        /* الأدوات الثلاثة */
        .tools {
            display: flex;
            gap: 1rem;
        }

        .tools .nav-link {
            color: #fff;
            font-size: 1.2rem;
            text-decoration: none;
            transition: color 0.3s ease;
        }

        .tools .nav-link i {
            font-size: 1.2rem;
        }

        /* تحسين التناسق على الشاشات الصغيرة */
        @media (max-width: 768px) {
            .app-header {
                height: 25px;
                padding: 0 0.5rem;
            }

            .app-logo {
                font-size: 1rem;
            }

            .app-logo i {
                font-size: 1.2rem;
            }

            .tools .nav-link i {
                font-size: 1rem;
            }
        }

        .account-type-card {
            background-color: #000000;
            border: 2px solid #FFD700;
            border-radius: 15px;
            padding: 2rem;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .account-type-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 25px rgba(255, 215, 0, 0.2);
            background-color: #1a1a1a;
        }

        .account-type-card .icon-container {
            width: 100px;
            height: 100px;
            margin: 0 auto 20px;
            background: #FFD700;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.3s ease;
        }

        .account-type-card:hover .icon-container {
            transform: scale(1.1);
            box-shadow: 0 0 30px rgba(255, 215, 0, 0.3);
        }

        .account-type-card .icon-container i {
            font-size: 3rem;
            color: #000000;
        }

        .account-type-card h6 {
            color: #FFD700;
            font-size: 1.3rem;
            margin: 15px 0;
            font-weight: bold;
        }

        .account-type-card .small {
            color: #FFFFFF;
            font-size: 1rem;
            line-height: 1.5;
        }

        #profileModal .modal-content {
            background-color: #000000;
            border: 2px solid #FFD700;
            border-radius: 20px;
        }

        #profileModal .modal-header {
            border-bottom: 1px solid #FFD700;
            padding: 1.5rem;
        }

        #profileModal .modal-title {
            color: #FFD700;
            font-size: 1.5rem;
            font-weight: bold;
            text-align: center;
            width: 100%;
        }

        #profileModal .modal-body {
            padding: 2rem;
        }

        #profileModal .btn-close {
            color: #FFD700;
            opacity: 1;
            transition: all 0.3s ease;
        }

        #profileModal .btn-close:hover {
            transform: rotate(90deg);
        }

        /* تحسين التفاعلات لجعل الخريطة أكثر جاذبية */
        #map:hover {
            transform: scale(1.02);
            /* تكبير طفيف عند التمرير */
            box-shadow: 0 6px 25px rgba(192, 19, 19, 0.856);
            /* تحسين الظلال عند التمرير */
            transition: all 0.3s ease-in-out;
        }


        /* تحديث حاوية الفلاتر مع التثبيت */
        .location-filter {
            background-color: #1a1a1a;
            /* اللون الجديد */
            padding: 0;
            /* إزالة الحشوة */
            border-radius: 10px;
            /* تقليل التقويس */
            box-shadow: 0 1px 5px rgba(0, 0, 0, 0.1);
            /* تخفيف الظلال */
            margin: 0.3rem;
            /* مسافة صغيرة للخارج */
            position: sticky;
            top: 100px;
            /* تقليل المسافة من الأعلى */
            z-index: 1000;
            overflow: hidden;
            backdrop-filter: blur(3px);
            /* تقليل تأثير التمويه */
            -webkit-backdrop-filter: blur(3px);
            border-bottom: none;
            /* إزالة الحدود */
            transition: all 0.2s ease;
        }

        /* تحسين تنسيق الفلاتر */
        .location-chips {
            display: flex;
            flex-wrap: nowrap;
            gap: 0.5rem;
            /* تقليل الفجوة بين العناصر */
            overflow-x: 0auto;
            padding: 1.0rem 0;
            /* تقليل الحشوة الرأسية */
            -webkit-overflow-scrolling: touch;
            scrollbar-width: thin;
            white-space: 1nowrap;
            margin: 0auto;
            max-width: 100%;
        }

        /* تحسين أزرار الفلتر */
        .location-chip {
            padding: 0.8rem 1.5rem;
            border-radius: 25px;
            background-color: #000000 !important;
            border: 2px solid #FFD700 !important;
            font-size: 1rem;
            font-weight: 600;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            gap: 0.8rem;
            cursor: pointer;
            transition: all 0.3s ease;
            flex-shrink: 0;
            color: #FFFFFF !important;
            box-shadow: 0 2px 5px rgba(255, 215, 0, 0.2);
            min-width: 100px;
            text-align: center;
            margin: 5px;
        }

        .location-chip * {
            background-color: transparent !important;
            color: #FFFFFF !important;
        }

        .location-chip i {
            color: #FFD700 !important;
            font-size: 1.1rem;
        }

        /* تحسين الأيقونات */
        .location-chip i {
            font-size: 0.8rem;
            /* تصغير حجم الأيقونة */
            color: var(--primary-color);
            transition: all 0.2s ease;
        }

        /* تحسين حالة التحويم والتنشيط */
        .location-chip:hover,
        .location-chip.active {
            background-color: #1a1a1a;
            /* اللون الجديد */
            color: #312f2f;
            transform: translateY(-1px);
            /* تخفيف الارتفاع عند التحويم */
            box-shadow: 0 2px 10px rgba(255, 215, 0, 0.2);
        }

        .location-chip:hover i,
        .location-chip.active i {
            color: #f5f0f0;
            transform: scale(1.1);
            /* تأثير تكبير بسيط */
        }

        /* تحسين شريط التمرير */
        .location-chips::-webkit-scrollbar {
            height: 0px;
            /* تقليل ارتفاع شريط التمرير */
        }

        .location-chips::-webkit-scrollbar-track {
            background-color: #1a1a1a;
            /* اللون الجديد */
            border-radius: 10px;
        }

        .location-chips::-webkit-scrollbar-thumb {
            background-color: #1a1a1a;
            /* اللون الجديد */
            border-radius: 10px;
            border: none;
        }

        .location-chips::-webkit-scrollbar-thumb:hover {
            background-color: #1a1a1a;
            /* اللون الجديد */
        }

        /* تحسين التجاوب مع شاشات الهواتف */
        @media (max-width: 768px) {
            .location-filter {
                padding: 0;
                /* إزالة الحشوة على الشاشات الصغيرة */
                top: 10px;
                /* تقليل المسافة من الأعلى */
            }

            .location-chip {
                padding: 0.3rem 0.5rem;
                /* تقليل الأزرار أكثر */
                font-size: 0.8rem;
                /* تصغير النص */
            }

            .location-chip i {
                font-size: 0.7rem;
                /* تصغير الأيقونات */
            }
        }




        /* تحسين التناسق العام */
        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 0 2.5rem;
        }

        body {
            padding-top: 1%;
            /* للتعويض عن الناف بار الثابت */
        }

        /* إزالة الفراغات والحشوات من الصفحة بالكامل */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        /* جعل الـ body يغطي كامل الشاشة بدون فراغات */
        html,
        body {
            margin: 0;
            padding: 0;
            width: 100%;
            height: 100%;
            overflow-x: hidden;
            background-color: #1a1a1a;
            /* اللون الجديد */
        }

        /* إزالة الفراغات من أي عنصر رئيسي */






        /* تحسين التنسيق ليكون متناسقًا */
        .navbar {
            height: 50px;
            /* تقليل ارتفاع الشريط */
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 0 1rem;
        }

        .tools .nav-link {
            padding: 0.3rem 0.5rem;
            /* تقليل الحشوات داخل الروابط */
            font-size: 1rem;
        }




        .drivers-grid {
            gap: 1rem;
            /* قلل المسافة بين البطاقات */
        }

        .location-filter {
            margin: 0.5rem 0;
            /* تقليل المسافة الخارجية */
            padding: 0.0rem 0rem;
            /* تقليل الحشوة */
        }

        body {
            font-size: 1rem;
            /* تكبير النص الأساسي */
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            /* تأكد من تناسق الخط */
        }

        h1,
        h2,
        h3,
        h4,
        h5,
        h6 {
            font-size: 1.5rem;
            /* تكبير العناوين */
            font-weight: bold;
        }

        .navbar-nav .nav-link {
            font-size: 1rem;
            /* تكبير الروابط */
        }

        .driver-name {
            font-size: 1rem;
            /* تكبير اسم السائق */
        }

        .driver-stats .stat-value {
            font-size: 1rem;
            /* تكبير القيم الإحصائية */
        }

        .driver-stats .stat-label {
            font-size: 1rem;
            /* تكبير النصوص التوضيحية */
        }

        .toast-container .custom-toast {
            font-size: 1.2rem;
            /* تكبير رسائل الإشعارات */
        }

        @media (max-width:5000px) {
            .container {
                padding: 0.5rem;
            }


            .location-chip {
                font-size: 1rem;
                padding: 0.8rem;
            }
        }


        @media (min-width: 1024px) {
            body {
                font-size: 1.5rem;
                /* حجم أكبر للخطوط على الشاشات الكبيرة */
            }

            .drivers-grid {
                display: grid;
                grid-template-columns: 1fr;
                gap: 1rem;
            }

            @media (min-width: 768px) {
                .drivers-grid {
                    grid-template-columns: repeat(2, 1fr);
                }
            }


            .location-filter {
                padding: 0rem;
                /* حشوة أكبر قليلاً */
            }
        }

        /* إزالة الحشوات والهوامش عن العناصر الأساسية */
        html,
        body {
            margin: 0;
            padding: 0;
            width: 100%;
            height: 100%;
            overflow-x: hidden;
            background-color: #1a1a1a;
            /* اللون الجديد */
        }

        /* ضبط الحاوية الرئيسية لتغطي العرض بالكامل */
        .container {
            margin: 0;
            padding: 0;
            width: 100%;
            max-width: 100%;
        }

        /* إزالة الهوامش من البطاقات أو أي عنصر إضافي */



        /* تفاعل أفضل للهواتف */
        @media (max-width: 68px) {
            .container {
                padding: 0.5rem;
            }


            .location-chip {
                font-size: 1rem;
                padding: 0.8rem;
            }
        }


        /* للشاشات الكبيرة */
        .drivers-grid {
            display: grid;
            grid-template-columns: 1fr;
            gap: 1rem;
        }

        @media (min-width: 768px) {
            .drivers-grid {
                display: grid;
                grid-template-columns: 1fr;
                gap: 1rem;
            }

            @media (min-width: 768px) {
                .drivers-grid {
                    grid-template-columns: repeat(2, 1fr);
                }
            }

        }




        /* تحسين شريط التايتل */
        .app-header {
            background-color: #1a1a1a;
            /* اللون الجديد */
            height: 50px;
            /* تقليل الارتفاع */
            padding: 0 0rem;
            /* إزالة الحشوة العلوية والسفلية */
            display: flex;
            justify-content: space-between;
            /* توزيع العناصر */
            align-items: center;
            /* توسيط العناصر عموديًا */
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
            z-index: 1000;
        }

        /* اللوجو والاسم */
        .app-logo {
            display: flex;
            align-items: center;
            font-size: 1.2rem;
            /* تصغير حجم النص */
            font-weight: bold;
            color: var(--primary-color);
            text-decoration: none;
            gap: 0.5rem;
            /* مسافة بين الأيقونة والنص */
        }

        .app-logo i {
            font-size: 1.5rem;
            /* حجم أيقونة اللوجو */
            color: var(--primary-color);
        }

        /* شريط الأدوات أو العناصر */
        .navbar-nav {
            display: flex;
            align-items: center;
            gap: 1rem;
            /* مسافة بين العناصر */
            margin: 0;
            list-style: none;
            padding: 0;
        }

        .navbar-nav .nav-link {
            color: #fff;
            font-size: 1rem;
            /* حجم النص */
            padding: 0.3rem 0.5rem;
            text-decoration: none;
            transition: color 0.3s ease;
        }

        .navbar-nav .nav-link:hover {
            color: var(--primary-color);
        }

        /* إخفاء أيقونة شريط الأدوات على الشاشة الكبيرة */
        .navbar-toggler {
            display: none;
        }

        /* تحسين التناسق على الشاشات الصغيرة */
        @media (max-width: 768px) {
            .app-header {
                height: 45px;
                /* تقليل إضافي للارتفاع */
            }

            .app-logo {
                font-size: 1rem;
            }

            .app-logo i {
                font-size: 1.2rem;
            }

            .navbar-toggler {
                display: block;
                /* إظهار زر القائمة فقط على الشاشات الصغيرة */
            }

            .navbar-nav {
                display: none;
                /* إخفاء شريط الأدوات واستبداله بالزر */
            }
        }



        /* تحسينات التجاوب */
        @media (max-width: 768px) {
            .container {
                padding: 0.5rem;
            }

            .location-chip {
                font-size: 1rem;
                padding: 0.8rem;
            }
        }


        @media (min-width: 1000px) {
            .location-filter {
                padding: 1.8rem;
            }

            .location-chip {
                padding: 1.4rem 3rem;
                font-size: 1.7rem;
            }

            .location-chip i {
                font-size: 2rem;
            }
        }

        /* إضافة تأثير التثبيت عند التمرير */
        .location-filter.sticky {
            background-color: #1a1a1a;
            /* اللون الجديد */
            box-shadow: 0 4px 25px rgba(0, 0, 0, 0.15);
        }

        .drivers-grid {
            display: grid;
            grid-template-columns: 1fr;
            gap: 1rem;
        }

        @media (min-width: 768px) {
            .drivers-grid {
                grid-template-columns: repeat(2, 1fr);
            }
        }

        img {
            width: 100%;
            height: auto;
            object-fit: cover;
        }

        .location-chip:hover {
            transform: scale(1.1);
            box-shadow: 0 4px 15px rgba(255, 215, 0, 0.4);
        }

        .location-chips {
            display: flex;
            overflow-x: auto;
            gap: 1rem;
            padding: 0.5rem;
        }




        .driver-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 12px 40px rgba(250, 243, 243, 0.89);
        }

        body {
            color: #FFFFFF;
            /* تغيير لون النص إلى الأبيض */
        }

        .driver-image-container {
            position: relative;
            height: 240px;
            overflow: hidden;
        }

        .driver-image {
            width: 100%;
            height: 100%;
            object-fit: cover;
            transition: var(--transition);
        }


        .status-active {
            color: var(--success-color);
        }

        .status-inactive {
            color: var(--accent-color);
        }

        .driver-info {
            padding: 1.8rem;
        }

        .driver-name {
            font-size: 1.6rem;
            margin-bottom: 0.8rem;
            color: var(--secondary-color);
            font-weight: 600;
        }

        .driver-stats {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 1.2rem;
            margin: 1.2rem 0;
            text-align: center;
            border-top: 1px solid #eee;
            border-bottom: 1px solid #eee;
            padding: 1.2rem 0;
        }

        .stat-item {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 0.4rem;
        }

        .stat-value {
            font-size: 1.2rem;
            font-weight: bold;
            color: var(--primary-color);
        }

        .stat-label {
            font-size: 0.9rem;
            color: #666;
        }

        .driver-actions {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 1rem;
            padding: 1.5rem;
        }

        .action-btn {
            padding: 1rem;
            border-radius: 12px;
            border: none;
            transition: var(--transition);
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.7rem;
            font-weight: 500;
            font-size: 1rem;
            cursor: pointer;
        }

        .action-btn.primary {
            background: var(--primary-color);
            color: var(--secondary-color);
        }

        .action-btn.secondary {
            background: var(--secondary-color);
            color: var(--primary-color);
        }

        .action-btn:hover {
            transform: translateY(-2px);
            filter: brightness(1.1);
        }



        .loading-spinner {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(255, 255, 255, 0.9);
            display: none;
            align-items: center;
            justify-content: center;
            z-index: 2000;
            backdrop-filter: blur(5px);
        }

        .spinner {
            width: 50px;
            height: 50px;
            border: 4px solid var(--primary-color);
            border-top: 4px solid transparent;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        .toast-container {
            position: fixed;
            top: 30px;
            right: 30px;
            z-index: 1000;
        }

        .custom-toast {
            background: white;
            border-radius: 12px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
            padding: 1rem;
            margin-bottom: 1rem;
            min-width: 300px;
            display: flex;
            align-items: center;
            gap: 1rem;
            animation: slideIn 0.3s ease;
        }

        @keyframes slideIn {
            from {
                transform: translateX(100%);
                opacity: 0;
            }

            to {
                transform: translateX(0);
                opacity: 1;
            }
        }

        @keyframes spin {
            0% {
                transform: rotate(0deg);
            }

            100% {
                transform: rotate(360deg);
            }
        }


        .modal-content {
            border-radius: 20px;
            border: none;
            box-shadow: var(--card-shadow);
        }

        .modal-header {
            border-bottom: 1px solid #eee;
            padding: 1.5rem;
        }

        .modal-body {
            padding: 1rem;
        }

        .form-label {
            font-weight: 500;
            color: var(--secondary-color);
        }

        .form-control {
            border-radius: 10px;
            padding: 0.8rem 1rem;
            border: 1px solid #dee2e6;
            transition: var(--transition);
        }

        .form-control:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(255, 215, 0, 0.2);
        }

        /* أنماط لأزرار الحذف والتعديل */
        .driver-card-actions {
            position: absolute;
            top: 10px;
            left: 10px;
            display: flex;
            gap: 10px;
            z-index: 10;
        }

        .action-icon {
            width: 35px;
            height: 35px;
            border-radius: 50%;
            border: none;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.3s ease;
            backdrop-filter: blur(5px);
        }

        .delete-btn {
            background: rgba(255, 59, 48, 0.9);
            color: white;
        }

        .edit-btn {
            background: rgba(255, 215, 0, 0.9);
            color: black;
        }

        .action-icon:hover {
            transform: scale(1.1);
        }

        .delete-btn:hover {
            background: rgb(255, 59, 48);
        }

        .edit-btn:hover {
            background: rgb(255, 215, 0);
        }

        .search-wrapper {
            position: relative;
        }

        .search-input-wrapper {
            position: relative;
        }

        .search-input {
            padding-right: 40px;
            border-radius: 20px;
            border: 2px solid #eee;
            transition: all 0.3s ease;
        }

        .search-input:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 0.2rem rgba(255, 215, 0, 0.25);
        }

        .search-results {
            max-height: 400px;
            overflow-y: auto;
            padding: 10px 0;
        }

        .search-result-item {
            padding: 15px;
            margin-bottom: 10px;
            border-radius: 10px;
            background: #fff;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .search-result-item:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        }

        .search-result-item .driver-info {
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .search-result-item .driver-image {
            width: 60px;
            height: 60px;
            border-radius: 50%;
            object-fit: cover;
            border: 2px solid var(--primary-color);
        }

        .search-result-item .driver-details {
            flex: 1;
        }

        .search-result-item .driver-name {
            font-size: 1.1rem;
            font-weight: 600;
            margin-bottom: 5px;
            color: var(--secondary-color);
        }

        .search-result-item .driver-meta {
            font-size: 0.9rem;
            color: #666;
        }

        .highlight {
            background: rgba(255, 215, 0, 0.3);
            padding: 0 3px;
            border-radius: 3px;
        }

        /* تنسيق شريط التمرير */
        .search-results::-webkit-scrollbar {
            width: 6px;
        }

        .search-results::-webkit-scrollbar-track {
            background: #f1f1f1;
            border-radius: 10px;
        }

        .search-results::-webkit-scrollbar-thumb {
            background: var(--primary-color);
            border-radius: 10px;
        }

        .no-results {
            text-align: center;
            padding: 20px;
            color: #666;
        }

        /* تحسينات للأزرار */
        .btn-outline-primary {
            border-color: var(--primary-color);
            color: var(--secondary-color);
        }

        .btn-outline-primary:hover,
        .btn-outline-primary:focus,
        .btn-check:checked+.btn-outline-primary {
            background-color: var(--primary-color);
            border-color: var(--primary-color);
            color: var(--secondary-color);
        }

        /* تحسين تصميم نافذة المحادثة */
        /* تصميم الرسائل */
        .message {
            display: flex;
            /* استخدام التصميم المرن */
            flex-direction: column;
            /* ترتيب الرسائل عموديًا */
            margin: 5px 0;
            /* المسافة بين الرسائل */
        }

        /* فقاعات الرسائل */
        .message-bubble {
            max-width: 75%;
            /* تحديد العرض الأقصى للفقاعة */
            padding: 12px 15px;
            /* مسافة داخلية */
            border-radius: 20px;
            /* تقويس الحواف */
            font-size: 15px;
            /* حجم النص */
            word-wrap: break-word;
            /* منع تداخل النص */
            box-shadow: 0 3px 10px rgba(0, 0, 0, 0.1);
            /* إضافة ظل خفيف */
            position: relative;
            /* تحديد الموضع */
            transition: transform 0.2s ease-in-out;
            /* تأثير التحويل */
        }

        .message-bubble:hover {
            transform: scale(1.02);
            /* تكبير الفقاعة عند التحويم */
        }

        /* الرسائل المرسلة */
        .message-bubble.sent {
            background: linear-gradient(135deg, #fffffe, #f8f8f7);
            /* خلفية ذهبية متدرجة */
            color: #333;
            /* لون النص */
            margin-left: auto;
            /* توجيه الفقاعة لليمين */
            text-align: right;
            /* محاذاة النص لليمين */
            border-bottom-right-radius: 5px;
            /* تعديل الحواف السفلية */
        }

        /* الرسائل المستلمة */
        .message-bubble.received {
            background: #fffcfc;
            /* خلفية رمادية غامقة */
            color: #FFD700;
            /* نص باللون الذهبي */
            margin-right: auto;
            /* توجيه الفقاعة لليسار */
            text-align: left;
            /* محاذاة النص لليسار */
            border-bottom-left-radius: 5px;
            /* تعديل الحواف السفلية */
        }

        /* تصميم وقت الرسائل */
        .timestamp {
            font-size: 11px;
            /* حجم الخط للوقت */
            margin-top: 3px;
            /* مسافة فوق الوقت */
            color: #aaa;
            /* لون رمادي للوقت */
            text-align: right;
            /* محاذاة لليمين */
        }

        /* تحسين نافذة المحادثة */
        .chat-window {
            border-radius: 15px;
            /* تقويس الحواف */
            overflow: hidden;
            /* إخفاء الزوائد */
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.2);
            /* ظل خفيف */
            border: 2px solid #ecebe4;
            /* إطار ذهبي */
            background-color: #1e1e1e;
            /* خلفية رمادية غامقة */
        }

        /* ترويسة نافذة المحادثة */
        .chat-header {
            background: linear-gradient(135deg, #FFD700, #B8860B);
            /* خلفية متدرجة ذهبية */
            color: #333;
            /* لون النص */
            font-size: 18px;
            /* حجم الخط */
            font-weight: bold;
            /* جعل النص عريض */
            padding: 1.2rem;
            /* مسافة داخلية */
            display: flex;
            /* استخدام التصميم المرن */
            align-items: center;
            /* محاذاة عمودية للعنصر */
            justify-content: space-between;
            /* توزيع العناصر أفقياً */
            border-bottom: 2px solid #FFD700;
            /* خط ذهبي سفلي */
        }

        /* تصميم صورة السائق */
        .chat-header img {
            width: 50px;
            /* عرض الصورة */
            height: 50px;
            /* ارتفاع الصورة */
            border-radius: 50%;
            /* جعل الصورة دائرية */
            border: 2px solid #fff;
            /* إطار أبيض للصورة */
            box-shadow: 0 3px 6px rgba(0, 0, 0, 0.1);
            /* ظل خفيف */
        }

        /* محتوى الرسائل */
        .chat-body {
            background: #2e2e2e;
            /* خلفية رمادية داكنة */
            height: 450px;
            /* ارتفاع نافذة الرسائل */
            overflow-y: auto;
            /* إضافة تمرير عمودي */
            padding: 1.5rem;
            /* مسافة داخلية */
            display: flex;
            /* استخدام التصميم المرن */
            flex-direction: column;
            /* ترتيب الرسائل عموديًا */
            gap: 0.5rem;
            /* مسافة بين الرسائل */
            color: white;
            /* لون النص */
        }

        /* شريط إدخال النص */
        .chat-footer {
            background-color: #333;
            /* خلفية رمادية غامقة */
            padding: 10px;
            /* مسافة داخلية */
            border-top: 2px solid #b39e28;
            /* خط علوي ذهبي */
            display: flex;
            /* استخدام التصميم المرن */
            gap: 10px;
            /* مسافة بين العناصر */
            align-items: center;
            /* توسيط العناصر عموديًا */
        }

        .chat-input {
            flex: 1;
            /* توسعة الحقل ليشغل المساحة */
            border-radius: 30px;
            /* تقويس الحواف */
            padding: 10px;
            /* مسافة داخلية */
            border: 1px solid #FFD700;
            /* إطار ذهبي */
            background: #fff;
            /* خلفية بيضاء */
            color: #333;
            /* لون النص */
            font-size: 1rem;
            /* حجم الخط */
        }

        .chat-input:focus {
            box-shadow: 0 0 5px rgba(255, 215, 0, 0.5);
            /* تأثير مضيء عند التركيز */
        }

        /* زر الإرسال */
        .send-btn {
            border-radius: 50%;
            /* شكل دائري */
            background: linear-gradient(135deg, #FFD700, #B8860B);
            /* خلفية متدرجة ذهبية */
            color: #333;
            /* لون النص */
            width: 45px;
            /* عرض الزر */
            height: 45px;
            /* ارتفاع الزر */
            display: flex;
            /* استخدام التصميم المرن */
            align-items: center;
            /* توسيط الأيقونة */
            justify-content: center;
            /* توسيط الأيقونة */
            font-size: 1.2rem;
            /* حجم الأيقونة */
            transition: transform 0.2s ease-in-out;
            /* تأثير التحريك */
        }

        .send-btn:hover {
            transform: scale(1.1);
            /* تكبير الزر عند التحويم */
        }

        /* تأثير التوجيه للرسائل */
        .message-bubble.sent::before {
            content: '';
            /* إضافة سهم */
            position: absolute;
            bottom: 0;
            right: -10px;
            border: 10px solid transparent;
            border-top-color: #B8860B;
            /* لون السهم مطابق للخلفية */
            border-bottom: 0;
        }

        .message-bubble.received::before {
            content: '';
            /* إضافة سهم */
            position: absolute;
            bottom: 0;
            left: -10px;
            border: 10px solid transparent;
            border-top-color: #3a3a3a;
            /* لون السهم مطابق للخلفية */
            border-bottom: 0;
        }

        .stat-item[onclick] {
            transition: transform 0.2s ease;
        }

        .stat-item[onclick]:hover {
            transform: scale(1.1);
        }

        .stat-item[onclick] .stat-value {
            position: relative;
        }

        .stat-item[onclick]:hover .fa-star {
            animation: starPulse 0.5s ease infinite;
        }

        @keyframes starPulse {
            0% {
                transform: scale(1);
            }

            50% {
                transform: scale(1.2);
            }

            100% {
                transform: scale(1);
            }
        }

        .account-type-card {
            border: 2px solid #eee;
            border-radius: 15px;
            padding: 20px;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .account-type-card:hover {
            border-color: var(--primary-color);
            transform: translateY(-5px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        }

        .icon-container {
            width: 80px;
            height: 80px;
            margin: 0 auto;
            background: #f8f9fa;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .registration-section {
            background: #f8f9fa;
            border-radius: 10px;
            padding: 20px;
            margin-bottom: 20px;
        }

        .section-title {
            color: var(--primary-color);
            margin-bottom: 20px;
            padding-bottom: 10px;
            border-bottom: 2px solid var(--primary-color);
        }

        .driver-photo-upload {
            width: 150px;
            height: 150px;
            border-radius: 50%;
            border: 2px dashed #ddd;
            margin: 0 auto;
            cursor: pointer;
            overflow: hidden;
            position: relative;
            display: flex;
            align-items: center;
            justify-content: center;
            background: #f8f9fa;
        }

        .driver-photo-upload img {
            width: 100%;
            height: 100%;
            object-fit: cover;
            display: none;
        }

        .upload-placeholder {
            text-align: center;
            color: #666;
        }

        .upload-placeholder i {
            font-size: 2rem;
            margin-bottom: 10px;
            color: var(--primary-color);
        }

        .document-upload {
            border: 2px dashed #ddd;
            border-radius: 10px;
            padding: 20px;
            text-align: center;
            cursor: pointer;
            background: white;
            height: 150px;
            display: flex;
            align-items: center;
            justify-content: center;
            position: relative;
        }

        .document-upload img {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            object-fit: cover;
            display: none;
        }



        /* إضافة المزيد من التنسيقات للتحسينات البصرية */
        .modal-content {
            border: none;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
        }

        .modal-header {
            border-bottom: 2px solid #f8f9fa;
            padding: 1.5rem;
        }

        .form-control,
        .form-select {
            padding: 0.75rem 1rem;
            border-radius: 8px;
            border: 2px solid #eee;
            transition: all 0.3s ease;
        }

        .form-control:focus,
        .form-select:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 0.2rem rgba(255, 215, 0, 0.25);
        }

        .btn-primary {
            background-color: var(--primary-color);
            border: none;
            padding: 0.75rem 2rem;
            border-radius: 8px;
            font-weight: 600;
            transition: all 0.3s ease;
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(255, 215, 0, 0.3);
        }

        .document-upload:hover {
            border-color: var(--primary-color);
        }

        .upload-placeholder span {
            display: block;
            margin-top: 5px;
            font-size: 0.9rem;
        }

        /* تنسيق أزرار شريط الأدوات */
        .tools .nav-link {
            color: var(--primary-color);
            font-size: 1.2rem;
            padding: 0.5rem 1rem;
            border-radius: 8px;
            transition: all 0.3s ease;
            text-decoration: none;
            display: flex;
            align-items: center;
        }

        .tools .nav-link:hover {
            background: rgba(255, 215, 0, 0.1);
            transform: translateY(-2px);
        }

        /* تنسيق خاص لزر الحساب */


        .registration-details {
            margin-bottom: 30px;
        }

        .registration-details .lead {
            color: var(--primary-color);
            font-size: 1.4rem;
            font-weight: 600;
            margin-bottom: 15px;
        }

        .qr-code-section {
            background: #f8f9fa;
            padding: 20px;
            border-radius: var(--border-radius);
            margin: 20px 0;
        }

        .qr-code-image {
            width: 200px;
            height: 200px;
            margin: 15px auto;
            padding: 10px;
            background: white;
            border: 2px solid var(--primary-color);
            border-radius: var(--border-radius);
        }

        .download-qr-btn {
            background: var(--primary-color);
            color: var(--secondary-color);
            border: none;
            padding: 10px 20px;
            border-radius: 20px;
            cursor: pointer;
            font-weight: 500;
            display: inline-flex;
            align-items: center;
            gap: 8px;
            transition: all 0.3s ease;
        }

        .download-qr-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 15px rgba(255, 215, 0, 0.3);
        }

        .note-section {
            margin-top: 20px;
            color: var(--text-secondary);
            font-size: 0.9rem;
        }

        @keyframes scaleIn {
            from {
                transform: scale(0);
                opacity: 0;
            }

            to {
                transform: scale(1);
                opacity: 1;
            }
        }

        .success-registration-popup {
            max-width: 500px;
            padding: 20px;
        }

        /* Navigation Styles */
        .side-nav {
            position: fixed;
            top: 0;
            right: -280px;
            /* يبدأ مخفياً */
            width: 280px;
            height: 100%;
            background: #fff;
            z-index: 1000;
            transition: 0.3s;
            box-shadow: -2px 0 5px rgba(0, 0, 0, 0.1);
            direction: rtl;
        }

        .side-nav.open {
            transform: translateX(0);
        }

        .side-nav-header {
            padding: 20px;
            background: var(--secondary-color);
            color: var(--primary-color);
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        .side-nav-title {
            color: var(--primary-color);
            font-size: 1.5rem;
            font-weight: bold;
        }

        .side-nav-close {
            background: none;
            border: none;
            color: var(--primary-color);
            font-size: 1.5rem;
            cursor: pointer;
            padding: 0.5rem;
            border-radius: 50%;
            transition: all 0.3s ease;
        }

        .side-nav-close:hover {
            background: rgba(255, 215, 0, 0.1);
        }

        .side-nav-items {
            padding: 1rem;
        }

        .side-nav-item {
            display: flex;
            align-items: center;
            padding: 1rem;
            color: var(--primary-color);
            text-decoration: none;
            border-radius: 10px;
            margin-bottom: 0.5rem;
            transition: all 0.3s ease;
        }

        .side-nav-item:hover {
            background: var(--primary-color);
            color: var(--secondary-color);
        }

        .side-nav-item i {
            margin-left: 1rem;
            font-size: 1.2rem;
        }

        .bottom-nav {
            position: fixed;
            bottom: 0;
            left: 0;
            right: 0;
            height: 65px;
            background: var(--secondary-color);
            display: flex;
            justify-content: space-around;
            align-items: center;
            z-index: 1040;
            box-shadow: 0 -2px 10px rgba(0, 0, 0, 0.1);
        }

        .bottom-nav-item {
            display: flex;
            flex-direction: column;
            align-items: center;
            color: var(--primary-color);
            text-decoration: none;
            padding: 0.5rem;
            transition: all 0.3s ease;
        }

        .bottom-nav-item i {
            font-size: 1.3rem;
            margin-bottom: 0.2rem;
        }

        .bottom-nav-item span {
            font-size: 0.8rem;
        }

        .bottom-nav-item:hover {
            color: #fff;
            transform: translateY(-2px);
        }

        .nav-toggle {
            position: fixed;
            top: 1rem;
            right: 1rem;
            z-index: 1060;
            background: var(--primary-color);
            color: var(--secondary-color);
            width: 45px;
            height: 45px;
            border: none;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            transition: all 0.3s ease;
        }

        .nav-toggle:hover {
            transform: scale(1.1);
            box-shadow: 0 4px 15px rgba(255, 215, 0, 0.3);
        }

        .nav-backdrop {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.5);
            z-index: 1045;
            opacity: 0;
            visibility: hidden;
            transition: all 0.3s ease;
        }

        .nav-backdrop.show {
            opacity: 1;
            visibility: visible;
        }

        /* تعديلات التصميم المتجاوب */
        @media (max-width: 768px) {
            .side-nav {
                width: 100%;
            }

            .bottom-nav-item span {
                font-size: 0.7rem;
            }
        }

        /* تعديل الهوامش للمحتوى الرئيسي */
        .main-content {
            padding-bottom: 70px;
            /* لتجنب تداخل المحتوى مع شريط التنقل السفلي */
        }

        /* إضافة تأثيرات حركية */
        @keyframes slideIn {
            from {
                transform: translateX(100%);
            }

            to {
                transform: translateX(0);
            }
        }

        .side-nav.open {
            animation: slideIn 0.3s ease forwards;
        }

        /* شريط الأدوات الجانبي */
        /* شريط الأدوات الجانبي */
        :root {
            --side-nav-height-top: -0%;
            /* المسافة من الأعلى */
            --side-nav-height-bottom: 0%;
            /* المسافة من الأسفل */
            --side-nav-width: 200px;
            /* عرض الشريط الجانبي */
            --side-nav-border-radius: 40px;
            /* تقويس الحواف */
            --side-nav-bg-color: var(--secondary-color);
            /* لون خلفية الشريط */
            --side-nav-shadow: -2px 0 10px rgba(0, 0, 0, 0.2);
            /* ظل الشريط */
            --backdrop-bg-color: rgba(252, 252, 252, 0);
            /* لون خلفية التمويه */
        }

        /* الشريط الجانبي */
        .side-nav {
            position: fixed;
            top: var(--side-nav-height-top);
            /* المسافة من الأعلى */
            bottom: var(--side-nav-height-bottom);
            /* المسافة من الأسفل */
            right: 0;
            /* ظهور الشريط على اليمين */
            height: calc(100% - var(--side-nav-height-top) - var(--side-nav-height-bottom));
            /* ارتفاع ديناميكي */
            width: var(--side-nav-width);
            /* عرض الشريط */
            background: var(--side-nav-bg-color);
            /* لون الخلفية */
            transform: translateX(100%);
            /* إخفاء الشريط افتراضيًا */
            transition: transform 0.3s ease-in-out;
            /* تأثير عند الفتح والإغلاق */
            z-index: 9999;
            /* ضمان الظهور فوق جميع العناصر */
            box-shadow: var(--side-nav-shadow);
            /* الظل */
            border-radius: var(--side-nav-border-radius) 0 0 var(--side-nav-border-radius);
            /* تقويس الحواف اليمنى فقط */
        }

        /* عند الفتح */
        .side-nav.open {
            transform: translateX(0);
            /* عرض الشريط */
        }

        /* الخلفية الشفافة */
        .nav-backdrop {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: var(--backdrop-bg-color);
            /* خلفية سوداء شفافة */
            z-index: 9998;
            /* أقل قليلاً من الشريط الجانبي */
            opacity: 0;
            visibility: hidden;
            transition: all 0.3s ease;
        }

        /* عند تفعيل الخلفية */
        .nav-backdrop.open {
            opacity: 1;
            visibility: visible;
        }

        /* عند الفتح */
        .nav-backdrop.show {
            opacity: 1;
            visibility: visible;
        }

        /* الفلاتر */
        .location-filter {
            position: relative;
            z-index: 999;
            /* أقل من الخلفية والشريط الجانبي */
        }

        .nav-toggle {
            position: absolute;
            /* لجعل الموضع النسبي للشريط */
            top: 10px;
            /* المسافة من أعلى الشريط */
            right: 10px;
            /* المسافة من الجانب الأيمن */
            background-color: var(--primary-color);
            /* لون الخلفية */
            color: var(--secondary-color);
            /* لون النص */
            width: 25px;
            /* عرض الزر */
            height: 25px;
            /* ارتفاع الزر */
            border: none;
            /* إزالة الحدود */
            border-radius: 50%;
            /* جعل الزر دائريًا */
            display: flex;
            /* لتوسيط الأيقونة */
            align-items: center;
            /* لتوسيط الأيقونة عموديًا */
            justify-content: center;
            /* لتوسيط الأيقونة أفقيًا */
            box-shadow: 0 2px 10px rgb(243, 241, 241);
            /* إضافة ظل */
            cursor: pointer;
            /* لتغيير المؤشر عند التمرير */
            transition: transform 0.3s ease;
            /* تأثير الانتقال */
        }

        .nav-toggle:hover {
            transform: scale(1);
            /* تكبير الزر قليلاً عند التمرير */
            box-shadow: 0 4px 15px rgba(255, 215, 0, 0.3);
            /* تحسين الظل */
        }

        /* أنماط زر إضافة السائق */
        .add-driver-btn {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            /* مسافة بين الأيقونة والنص */
            padding: 0.5rem 1rem;
            /* حشوة داخلية */
            background-color: var(--primary-color);
            /* لون الخلفية الأساسي */
            color: #fff;
            /* لون النص */
            border: none;
            /* إزالة الإطار */
            border-radius: 50px;
            /* تقويس الحواف */
            font-size: 1rem;
            /* حجم النص */
            cursor: pointer;
            /* مؤشر التفاعل */
            transition: all 0.3s ease-in-out;
            /* تأثير عند التحويم */
            text-align: left;
            width: 100%;
            /* ليظهر بعرض الزر الأصلي */
        }

        .add-driver-btn:hover {

            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
            /* إضافة ظل */
        }

        .add-driver-btn i {
            font-size: 1.2rem;
            /* حجم الأيقونة */
            transition: transform 0.3s ease;
            /* تأثير تكبير الأيقونة */
        }

        .add-driver-btn:hover i {
            transform: scale(1.1);
            /* تكبير الأيقونة عند التحويم */
        }

        .driver-status {
            position: absolute;
            top: 1rem;
            right: 1rem;
            padding: 0.5rem 1rem;
            border-radius: 20px;
            font-size: 0.9rem;
            font-weight: 500;
            background: rgba(255, 255, 255, 0.9);
            backdrop-filter: blur(4px);
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        }

        .driver-card {
            margin: 0;
            /* أزل الفراغات الخارجية */
            padding: 0rem;
            /* حشوة داخلية بسيطة */
            gap: 0.0rem;
            /* فراغ بسيط بين العناصر داخل البطاقة */
        }

        .driver-card {
            margin-bottom: 1rem;
        }

        .driver-card {
            margin: 0;
            padding: 0.0rem;
            /* حشوة بسيطة داخلية للبطاقة */
            box-sizing: border-box;
        }

        .driver-card {
            margin-bottom: 1rem;
        }

        .driver-card {
            margin-bottom: 1rem;
        }

        .driver-card {
            background-color: #000000;
            /* اللون الجديد */
            border-radius: 20px;
            overflow: hidden;
            box-shadow: var(--card-shadow);
            transition: var(--transition);
            position: relative;
            border: 1px solid rgb(228, 212, 212);
        }

        /* تنسيق النوافذ المنبثقة */
        .dark-popup {
            background-color: #1a1a1a !important;
            color: #FFFFFF !important;
            border: 2px solid #FFD700 !important;
        }

        .text-white {
            color: #FFFFFF !important;
        }

        .swal-button-custom {
            background-color: #FFD700 !important;
            color: #000000 !important;
            border: none !important;
            font-weight: bold !important;
        }

        .swal-button-custom:hover {
            background-color: #FFC800 !important;
            transform: translateY(-2px);
        }

        .swal-button-cancel-custom {
            background-color: #333333 !important;
            color: #FFFFFF !important;
            border: 1px solid #FFD700 !important;
        }

        .swal-button-cancel-custom:hover {
            background-color: #444444 !important;
            transform: translateY(-2px);
        }

        /* تنسيق Popup الخريطة */
        .custom-popup {
            background-color: #000000 !important;
            border: 2px solid #FFD700 !important;
            border-radius: 10px !important;
            color: #FFFFFF !important;
        }

        .custom-popup .leaflet-popup-content-wrapper {
            background-color: #000000 !important;
            color: #FFFFFF !important;
            border-radius: 10px !important;
        }

        .custom-popup .leaflet-popup-content {
            color: #FFFFFF !important;
            margin: 0 !important;
            padding: 10px !important;
        }

        .custom-popup .leaflet-popup-tip {
            background-color: #000000 !important;
            border: 2px solid #FFD700 !important;
        }

        .user-photo-upload {
            width: 150px;
            height: 150px;
            border-radius: 50%;
            border: 2px dashed #FFD700;
            margin: 0 auto;
            cursor: pointer;
            overflow: hidden;
            position: relative;
            display: flex;
            align-items: center;
            justify-content: center;
            background: #1a1a1a;
        }

        .user-photo-upload img {
            width: 100%;
            height: 100%;
            object-fit: cover;
            display: none;
        }

        .user-photo-upload .upload-placeholder {
            text-align: center;
            color: #FFD700;
        }

        .user-photo-upload .upload-placeholder i {
            font-size: 2rem;
            margin-bottom: 10px;
        }

        .registration-section {
            background: #1a1a1a;
            border-radius: 10px;
            padding: 20px;
            margin-bottom: 20px;
            border: 1px solid #FFD700;
        }

        .section-title {
            color: #FFD700;
            margin-bottom: 20px;
            padding-bottom: 10px;
            border-bottom: 2px solid #FFD700;
        }

        .form-control,
        .form-select {
            background-color: #333;
            border: 1px solid #FFD700;
            color: #fff;
        }

        .form-control:focus,
        .form-select:focus {
            background-color: #444;
            border-color: #FFD700;
            box-shadow: 0 0 0 0.2rem rgba(255, 215, 0, 0.25);
            color: #fff;
        }

        .form-check-label {
            color: #fff;
        }

        .form-check-input {
            border-color: #FFD700;
        }

        .form-check-input:checked {
            background-color: #FFD700;
            border-color: #FFD700;
        }

        .btn-primary {
            background-color: #FFD700;
            border-color: #FFD700;
            color: #000;
        }

        .btn-primary:hover {
            background-color: #ccac00;
            border-color: #ccac00;
            color: #000;
        }

        .modal-content {
            background-color: #1a1a1a;
            border: 2px solid #FFD700;
            border-radius: 15px;
        }

        .modal-header {
            border-bottom: 1px solid #FFD700;
            padding: 1.5rem;
        }

        .modal-title {
            color: #FFD700;
            font-weight: bold;
        }

        .btn-close {
            color: #FFD700;
        }

        .registration-section {
            background-color: #242424;
            border: 1px solid #FFD700;
            border-radius: 10px;
            padding: 20px;
            margin-bottom: 20px;
        }

        .section-title {
            color: #FFD700;
            border-bottom: 2px solid #FFD700;
            padding-bottom: 10px;
            margin-bottom: 20px;
        }

        .form-label {
            color: #FFFFFF;
        }

        .form-control,
        .form-select {
            background-color: #333;
            border: 1px solid #FFD700;
            color: #FFFFFF;
        }

        .form-control:focus,
        .form-select:focus {
            background-color: #444;
            border-color: #FFD700;
            box-shadow: 0 0 0 0.2rem rgba(255, 215, 0, 0.25);
            color: #FFFFFF;
        }

        .form-check-label {
            color: #FFFFFF;
        }

        .form-check-input {
            border-color: #FFD700;
        }

        .form-check-input:checked {
            background-color: #FFD700;
            border-color: #FFD700;
        }

        .btn-primary {
            background-color: #FFD700;
            border-color: #FFD700;
            color: #000000;
            font-weight: bold;
        }

        .btn-primary:hover {
            background-color: #ccac00;
            border-color: #ccac00;
            color: #000000;
            transform: translateY(-2px);
        }

        /* Account Type Cards */
        .account-type-card {
            background-color: #242424;
            border: 2px solid #FFD700;
            border-radius: 15px;
            padding: 20px;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .account-type-card:hover {
            transform: translateY(-5px);
            background-color: #333;
            box-shadow: 0 5px 15px rgba(255, 215, 0, 0.3);
        }

        .account-type-card h6 {
            color: #FFD700;
            margin: 15px 0;
        }

        .account-type-card p {
            color: #FFFFFF;
        }

        .icon-container {
            width: 80px;
            height: 80px;
            margin: 0 auto;
            background: #FFD700;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .icon-container i {
            color: #000000;
        }

        /* Notification Styles */
        .notification-toast {
            position: fixed;
            top: 20px;
            right: 20px;
            background: #000000;
            border: 2px solid #FFD700;
            border-radius: 10px;
            padding: 15px;
            min-width: 300px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
            z-index: 9999;
            color: #FFFFFF;
        }

        .notification-content {
            margin-right: 20px;
        }

        .notification-title {
            font-weight: bold;
            color: #FFD700;
            margin-bottom: 5px;
        }

        .notification-body {
            font-size: 0.9rem;
        }

        .notification-close {
            position: absolute;
            top: 5px;
            right: 5px;
            background: none;
            border: none;
            color: #FFD700;
            font-size: 1.2rem;
            cursor: pointer;
            padding: 0 5px;
        }

        .notification-close:hover {
            color: #FFF;
        }

        @keyframes fadeInRight {
            from {
                opacity: 0;
                transform: translateX(100%);
            }

            to {
                opacity: 1;
                transform: translateX(0);
            }
        }

        @keyframes fadeOutRight {
            from {
                opacity: 1;
                transform: translateX(0);
            }

            to {
                opacity: 0;
                transform: translateX(100%);
            }
        }

        .animate__animated {
            animation-duration: 0.5s;
            animation-fill-mode: both;
        }

        .animate__fadeInRight {
            animation-name: fadeInRight;
        }

        .animate__fadeOutRight {
            animation-name: fadeOutRight;
        }

        .required::after {
            content: ' *';
            color: red;
        }

        #locationPickerMap {
            border-radius: 8px;
            border: 2px solid #ddd;
        }

        #notification-test {
            max-width: 600px;
            margin: 20px auto;
            padding: 20px;
            background-color: #fff;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        #notification-status {
            margin-top: 15px;
            padding: 10px;
            background-color: #f8f9fa;
            border-radius: 4px;
            max-height: 300px;
            overflow-y: auto;
        }

        .status-item {
            margin: 8px 0;
            padding: 8px;
            border-radius: 4px;
            background-color: #fff;
            border-right: 3px solid #007bff;
        }

        .status-item strong {
            color: #007bff;
        }

        .status-detail {
            display: block;
            margin-top: 4px;
            font-family: monospace;
            font-size: 12px;
            word-break: break-all;
            background-color: #f8f9fa;
            padding: 4px;
            border-radius: 2px;
        }

        .test-button {
            display: block;
            width: 100%;
            padding: 12px;
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 16px;
            transition: background-color 0.3s;
        }

        .test-button:hover {
            background-color: #0056b3;
        }

        .test-button:disabled {
            background-color: #ccc;
            cursor: not-allowed;
        }

        /* أنماط الإشعارات المحسنة */
        .notification-container {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 9999;
            display: flex;
            flex-direction: column;
            gap: 10px;
            max-width: 400px;
            width: 100%;
        }

        .notification {
            background: #FFFFFF;
            border-radius: 15px;
            padding: 20px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
            animation: slideIn 0.5s ease forwards;
            position: relative;
            overflow: hidden;
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .notification.success {
            border-right: 5px solid #2ECC40;
        }

        .notification.error {
            border-right: 5px solid #FF4136;
        }

        .notification.warning {
            border-right: 5px solid #FFB236;
        }

        .notification.info {
            border-right: 5px solid #0074D9;
        }

        .notification-icon {
            font-size: 24px;
            min-width: 40px;
            height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 50%;
        }

        .notification.success .notification-icon {
            color: #2ECC40;
            background: rgba(46, 204, 64, 0.1);
        }

        .notification.error .notification-icon {
            color: #FF4136;
            background: rgba(255, 65, 54, 0.1);
        }

        .notification.warning .notification-icon {
            color: #FFB236;
            background: rgba(255, 178, 54, 0.1);
        }

        .notification.info .notification-icon {
            color: #0074D9;
            background: rgba(0, 116, 217, 0.1);
        }

        .notification-content {
            flex: 1;
        }

        .notification-title {
            font-size: 18px;
            font-weight: bold;
            color: #000000;
            margin-bottom: 5px;
        }

        .notification-message {
            color: #666666;
            font-size: 14px;
        }

        .notification-close {
            position: absolute;
            top: 10px;
            right: 10px;
            background: none;
            border: none;
            color: #999999;
            cursor: pointer;
            font-size: 18px;
            padding: 5px;
            transition: color 0.3s ease;
        }

        .notification-close:hover {
            color: #000000;
        }

        .notification-progress {
            position: absolute;
            bottom: 0;
            left: 0;
            height: 3px;
            background: #E0E0E0;
            width: 100%;
        }

        .notification-progress::before {
            content: '';
            position: absolute;
            height: 100%;
            width: 100%;
            background: currentColor;
            animation: progress 3s linear forwards;
        }

        @keyframes slideIn {
            from {
                transform: translateX(100%);
                opacity: 0;
            }

            to {
                transform: translateX(0);
                opacity: 1;
            }
        }

        @keyframes slideOut {
            from {
                transform: translateX(0);
                opacity: 1;
            }

            to {
                transform: translateX(100%);
                opacity: 0;
            }
        }

        @keyframes progress {
            from {
                width: 100%;
            }

            to {
                width: 0%;
            }
        }

        /* تصميم نافذة طلب الإذن */
        .permission-dialog {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: #FFFFFF;
            border-radius: 20px;
            padding: 30px;
            max-width: 500px;
            width: 90%;
            box-shadow: 0 10px 40px rgba(0, 0, 0, 0.2);
            z-index: 9999;
            text-align: center;
        }

        .permission-dialog-icon {
            font-size: 48px;
            color: #FFD700;
            margin-bottom: 20px;
        }

        .permission-dialog-title {
            font-size: 24px;
            color: #000000;
            margin-bottom: 15px;
            font-weight: bold;
        }

        .permission-dialog-message {
            color: #666666;
            margin-bottom: 25px;
            line-height: 1.6;
        }

        .permission-dialog-buttons {
            display: flex;
            gap: 15px;
            justify-content: center;
        }

        .permission-button {
            padding: 12px 30px;
            border-radius: 10px;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            border: none;
        }

        .permission-button.allow {
            background: #FFD700;
            color: #000000;
        }

        .permission-button.deny {
            background: #F5F5F5;
            color: #666666;
        }

        .permission-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        }

        .side-nav {
            position: fixed;
            top: var(--side-nav-height-top);
            bottom: var(--side-nav-height-bottom);
            right: 0;
            height: calc(100% - var(--side-nav-height-top) - var(--side-nav-height-bottom));
            width: var(--side-nav-width);
            background: rgba(51, 51, 51, 0.95);
            /* خلفية رمادية شبه شفافة */
            transform: translateX(100%);
            transition: transform 0.3s ease-in-out;
            z-index: 9999;
            box-shadow: var(--side-nav-shadow);
            border-radius: var(--side-nav-border-radius) 0 0 var(--side-nav-border-radius);
            backdrop-filter: blur(10px);
            -webkit-backdrop-filter: blur(10px);
        }

        .bottom-nav {
            position: fixed;
            bottom: 0;
            left: 0;
            right: 0;
            height: 65px;
            background: #000000;
            display: flex;
            justify-content: space-around;
            align-items: center;
            z-index: 1040;
            box-shadow: 0 -2px 10px rgba(0, 0, 0, 0.3);
            border-top: 1px solid #333333;
        }

        /* Card text colors */
        .driver-card {
            color: #FFFFFF;
        }

        .driver-name,
        .stat-value,
        .stat-label {
            color: #FFFFFF !important;
        }

        /* Status badge styling */
        .driver-status {
            padding: 5px 15px;
            border-radius: 20px;
            font-weight: bold;
        }

        .status-active {
            background: rgba(46, 204, 64, 0.2);
            color: #2ECC40 !important;
            border: 1px solid #2ECC40;
        }

        .status-inactive {
            background: rgba(255, 65, 54, 0.2);
            color: #FF4136 !important;
            border: 1px solid #FF4136;
        }

        /* Chat modal styling */
        .chat-window {
            background: #1a1a1a;
            border: 2px solid #FFD700;
        }

        .chat-header {
            background: linear-gradient(135deg, #FFD700, #B8860B);
            color: #000000;
        }

        .chat-body {
            background: #242424;
        }

        .message-bubble {
            max-width: 75%;
            padding: 12px;
            border-radius: 15px;
        }

        .message-bubble.sent {
            background: #FFD700;
            color: #000000;
            margin-left: auto;
        }

        .message-bubble.received {
            background: #333333;
            color: #FFFFFF;
            margin-right: auto;
        }

        .chat-footer {
            background: #1a1a1a;
            border-top: 2px solid #FFD700;
        }

        .chat-input {
            background: #333333;
            border: 1px solid #FFD700;
            color: #FFFFFF;
        }

        .send-btn {
            background: #FFD700;
            color: #000000;
        }

        .timestamp {
            color: #888888;
            font-size: 0.8em;
        }

        /* Card content colors */
        .driver-card .text-muted {
            color: #FFFFFF !important;
        }

        .driver-card .text-muted i {
            color: #FFFFFF !important;
        }

        .driver-card .driver-info p {
            color: #FFFFFF !important;
        }

        /* Keep original rating/trips/km colors */
        .stat-item .stat-value i.fa-star {
            color: #FFD700 !important;
        }

        .stat-item .stat-value i.fa-route,
        .stat-item:last-child .stat-value {
            color: #FFD700 !important;
        }

        .stat-item .stat-label {
            color: #FFFFFF !important;
        }

        /* Vehicle info text */
        .driver-card .mb-2 i.fa-car,
        .driver-card .mb-0 i.fa-map-marker-alt {
            color: #FFFFFF !important;
        }

        .driver-card .mb-2,
        .driver-card .mb-0 {
            color: #FFFFFF !important;
        }

        /* تحسين أزرار الإجراءات */
        .driver-card-actions {
            position: absolute;
            top: 10px;
            left: 10px;
            display: flex;
            gap: 8px;
            z-index: 10;
        }

        .action-icon {
            width: 35px;
            height: 35px;
            border-radius: 50%;
            border: none;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.3s ease;
            backdrop-filter: blur(5px);
            color: white;
        }

        .delete-btn {
            background: rgba(255, 59, 48, 0.9);
        }

        .edit-btn {
            background: rgba(255, 215, 0, 0.9);
        }

        .track-btn {
            background: rgba(52, 199, 89, 0.9);
        }

        .stop-track-btn {
            background: rgba(142, 142, 147, 0.9);
        }

        .action-icon:hover {
            transform: scale(1.1);
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
        }

        /* مؤشر التتبع */
        .tracking-indicator {
            position: absolute;
            top: 10px;
            right: 10px;
            background: rgba(0, 0, 0, 0.7);
            color: #FFD700;
            padding: 5px 8px;
            border-radius: 20px;
            font-size: 0.8rem;
            display: none;
        }

        .tracking-indicator.active {
            display: flex;
            align-items: center;
            gap: 5px;
            animation: pulse 2s infinite;
        }

        @keyframes pulse {
            0% {
                opacity: 1;
            }

            50% {
                opacity: 0.5;
            }

            100% {
                opacity: 1;
            }
        }

        /* تحسين حالة التتبع النشط */
        .driver-card[data-tracking="true"] .tracking-indicator {
            display: flex;
        }

        .driver-card[data-tracking="true"] {
            border: 2px solid #34C759;
        }




        /* أنماط زر تحديد الموقع */
        .user-location-btn {
            width: 40px;
            height: 40px;
            background: #FFD700;
            border: none;
            border-radius: 50%;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.3s ease;
            margin-bottom: 10px;
        }

        .user-location-btn:hover {
            transform: scale(1.1);
            background: #ffd900;
        }

        .user-location-btn i {
            color: #000;
            font-size: 1.2rem;
        }

        /* أنماط علامة موقع المستخدم */
        .user-marker-container {
            position: relative;
            width: 100%;
            height: 100%;
        }

        .user-marker-container i {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            color: #007bff;
            font-size: 2rem;
            z-index: 2;
        }




        /* تكملة أنماط علامة موقع المستخدم */
        .pulse {
            width: 40px;
            height: 40px;
            background: rgba(0, 123, 255, 0.2);
            border-radius: 50%;
            animation: pulse 2s infinite;
        }

        @keyframes pulse {
            0% {
                transform: translate(-50%, -50%) scale(1);
                opacity: 1;
            }

            100% {
                transform: translate(-50%, -50%) scale(2);
                opacity: 0;
            }
        }

        /* أنماط علامات المسار */
        .marker-icon {
            width: 40px;
            height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
            position: relative;
        }

        .marker-icon i {
            font-size: 2rem;
            filter: drop-shadow(2px 2px 2px rgba(0, 0, 0, 0.3));
        }

        .start-marker::after,
        .end-marker::after {
            content: '';
            position: absolute;
            bottom: -5px;
            left: 50%;
            transform: translateX(-50%);
            width: 10px;
            height: 10px;
            background: inherit;
            border-radius: 50%;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
        }

        /* أنماط المسار المتحرك */
        .animated-route {
            stroke-dasharray: 8, 12;
            animation: dash 1.5s linear infinite;
        }

        @keyframes dash {
            to {
                stroke-dashoffset: -20;
            }
        }

        /* تحسين النوافذ المنبثقة */
        .route-popup {
            padding: 10px;
            text-align: center;
            min-width: 200px;
        }

        .route-popup h6 {
            color: #FFD700;
            margin: 0 0 10px 0;
            font-size: 1.1rem;
            font-weight: bold;
        }

        .route-popup p {
            margin: 5px 0;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
        }

        .route-popup i {
            color: #FFD700;
        }

        /* معلومات المسار */
        .route-info-container {
            background: rgba(0, 0, 0, 0.8);
            border-radius: 10px;
            margin: 10px;
            padding: 15px;
            color: #fff;
            max-width: 300px;
            border: 2px solid #FFD700;
        }

        .route-info {
            display: flex;
            flex-direction: column;
            gap: 10px;
        }

        .route-info h6 {
            color: #FFD700;
            margin: 0 0 10px 0;
            padding-bottom: 8px;
            border-bottom: 1px solid rgba(255, 215, 0, 0.3);
            text-align: center;
        }

        .info-item {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .info-item i {
            color: #FFD700;
            width: 20px;
            text-align: center;
        }

        /* تحسين أزرار التحكم في الخريطة */
        .leaflet-control-layers {
            border: 2px solid #FFD700 !important;
            border-radius: 10px !important;
            background: rgba(0, 0, 0, 0.8) !important;
            padding: 10px !important;
        }

        .leaflet-control-layers-base label {
            color: #fff !important;
            margin: 5px 0 !important;
        }

        .leaflet-control-layers-base input[type="radio"] {
            accent-color: #FFD700;
        }

        .leaflet-control-zoom a {
            background: rgba(0, 0, 0, 0.8) !important;
            color: #FFD700 !important;
            border: 2px solid #FFD700 !important;
        }

        .leaflet-control-zoom a:hover {
            background: rgba(255, 215, 0, 0.2) !important;
        }

        /* تحسين علامة الموقع الحالي */
        .location-popup {
            text-align: center;
            padding: 10px;
        }

        .location-popup h6 {
            color: #FFD700;
            margin: 0 0 8px 0;
        }

        .location-popup p {
            margin: 0;
            font-family: monospace;
            font-size: 0.9rem;
        }

        .location-header {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-bottom: 15px;
            padding-bottom: 10px;
            border-bottom: 1px solid rgba(255, 215, 0, 0.3);
        }

        .location-header i {
            color: #FFD700;
            font-size: 1.2rem;
        }

        .user-marker-container i {
            font-size: 24px;
            color: #FFD700;
            z-index: 2;
            filter: drop-shadow(0 2px 4px rgba(0, 0, 0, 0.3));
        }


        .leaflet-popup-tip {
            background: rgba(0, 0, 0, 0.8) !important;
            border: 1px solid #FFD700;
        }



        #map {
            height: 50vh;
            width: 100%;
            border: 2px solid #FFD700;
            border-radius: 20px;
            overflow: hidden;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
            margin: 20px 0;
            position: relative;
            background: linear-gradient(135deg, #1a1a1a, #2a2a2a);
        }

        #map:hover {
            box-shadow: 0 6px 20px rgba(255, 215, 0, 0.2);
        }

        /* تحسينات التجاوب */
        @media (max-width: 768px) {
            .route-info-container {
                max-width: calc(100% - 20px);
            }

            .user-location-btn {
                width: 35px;
                height: 35px;
            }

            .route-popup {
                min-width: 150px;
            }
        }

        /* أنماط علامة موقع المستخدم */
        .user-location-marker {
            position: relative;
            width: 100%;
            height: 100%;
        }

        .user-avatar {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            width: 40px;
            height: 40px;
            background: #FFD700;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 2;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);
            animation: bounceIn 0.5s ease;
        }

        .user-avatar i {
            color: #000000;
            font-size: 20px;
        }

        .accuracy-circle {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            border-radius: 50%;
            background: rgba(255, 215, 0, 0.1);
            border: 2px solid rgba(255, 215, 0, 0.3);
            opacity: 0.5;
            animation: scaleIn 1s ease;
        }

        .pulse-circle {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            width: 50px;
            height: 50px;
            background: rgba(255, 215, 0, 0.2);
            border-radius: 50%;
            animation: pulse 2s infinite;
        }

        /* أنماط النافذة المنبثقة */
        .user-location-popup {
            min-width: 280px;
            padding: 15px;
            background: rgba(0, 0, 0, 0.8);
            border-radius: 10px;
            color: #FFFFFF;
        }

        .location-header {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-bottom: 15px;
            padding-bottom: 10px;
            border-bottom: 1px solid rgba(255, 215, 0, 0.3);
        }

        .location-header i {
            color: #FFD700;
            font-size: 1.2rem;
        }

        .location-header h6 {
            margin: 0;
            color: #FFD700;
            font-size: 1.1rem;
            font-weight: bold;
        }

        .location-info {
            display: flex;
            flex-direction: column;
            gap: 10px;
        }

        .info-item {
            display: flex;
            align-items: flex-start;
            gap: 8px;
        }

        .info-item i {
            color: #FFD700;
            font-size: 1rem;
            margin-top: 4px;
        }

        .info-item span {
            font-size: 0.9rem;
            line-height: 1.4;
        }

        /* تأثيرات حركية */
        @keyframes bounceIn {
            0% {
                transform: translate(-50%, -50%) scale(0);
            }

            50% {
                transform: translate(-50%, -50%) scale(1.2);
            }

            100% {
                transform: translate(-50%, -50%) scale(1);
            }
        }

        @keyframes scaleIn {
            from {
                transform: translate(-50%, -50%) scale(0);
                opacity: 0;
            }

            to {
                transform: translate(-50%, -50%) scale(1);
                opacity: 0.5;
            }
        }

        @keyframes pulse {
            0% {
                transform: translate(-50%, -50%) scale(1);
                opacity: 1;
            }

            100% {
                transform: translate(-50%, -50%) scale(2);
                opacity: 0;
            }
        }

        /* حاوية الخريطة */
        #map {
            margin-top: 20px;
            /* مسافة من العناصر العلوية */
            height: 80vh;
            width: 100%;
            border: 2px solid #FFD700;
            border-radius: 20px;
            overflow: hidden;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
        }

        /* تحسين مظهر حاوية الخريطة مع إضافة المسافات */
        /* تحسين مظهر حاوية الخريطة مع إضافة المسافات */
        #map {
            height: 60vh;
            /* ارتفاع نسبي */
            width: 100%;
            border: 2px solid #FFD700;
            border-radius: 15px;
            overflow: hidden;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
            margin: 1px 10;
            /* إضافة مسافة 50px من الأعلى والأسفل */
            position: relative;
            background: linear-gradient(135deg, #1a1a1a, #2a2a2a);
        }

        /* تحسين المسافات للشاشات الصغيرة */
        @media screen and (max-width: 768px) {
            #map {
                margin: 40px 0;
                /* مسافة أقل للشاشات الصغيرة */
                height: 50vh;
            }
        }

        /* تحسين المسافات للشاشات الكبيرة */
        @media screen and (min-width: 1200px) {
            #map {
                margin: 70px 0;
                /* مسافة أكبر للشاشات الكبيرة */
                height: 60vh;
            }
        }

        /* تأكيد على عدم وجود مسافات جانبية */
        .map-container {
            padding-left: 0;
            padding-right: 0;
        }

        /* إضافة هذه الأنماط في نهاية الملف */
        .dark-popup {
            background-color: #1a1a1a !important;
            color: #FFFFFF !important;
            border: 2px solid #FFD700 !important;
        }

        #nearbyDriversMap {
            height: 70vh;
            width: 100%;
            border-radius: 10px;
            overflow: hidden;
            margin: 0;
            padding: 0;
        }

        .loading-map {
            height: 70vh;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            background-color: #1a1a1a;
            color: #FFD700;
        }

        .loading-map i {
            font-size: 2rem;
            margin-bottom: 1rem;
        }

        .leaflet-popup-content-wrapper {
            background-color: #1a1a1a !important;
            color: #FFFFFF !important;
            border: 1px solid #FFD700 !important;
        }

        .leaflet-popup-tip {
            background-color: #1a1a1a !important;
            border: 1px solid #FFD700 !important;
        }

        .custom-div-icon {
            background: none;
            border: none;
        }


        /* تحسين أنماط مؤشرات الخريطة */
        .custom-div-icon {
            background: transparent;
            border: none;
        }

        .driver-marker {
            width: 50px;
            height: 50px;
            position: relative;
            transform: translate(-50%, -50%);
        }

        .driver-marker img {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            border: 2px solid #FFD700;
            background: #000000;
            object-fit: cover;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);
        }

        .driver-marker i {
            position: absolute;
            bottom: -5px;
            right: -5px;
            background: #FFD700;
            color: #000000;
            width: 20px;
            height: 20px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 12px;
            border: 2px solid #000000;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
        }

        /* تحسين النافذة المنبثقة للمؤشر */
        .leaflet-popup-content-wrapper {
            background: rgba(0, 0, 0, 0.9);
            color: #FFFFFF;
            border: 2px solid #FFD700;
            border-radius: 15px;
            padding: 0;
            overflow: hidden;
        }

        .leaflet-popup-content {
            margin: 0;
            min-width: 200px;
        }

        .leaflet-popup-tip {
            background: #FFD700;
        }

        .driver-popup {
            padding: 15px;
        }

        .driver-popup-header {
            text-align: center;
            margin-bottom: 15px;
            padding-bottom: 10px;
            border-bottom: 1px solid rgba(255, 215, 0, 0.3);
        }

        .driver-popup-header img {
            width: 60px;
            height: 60px;
            border-radius: 50%;
            border: 2px solid #FFD700;
            margin-bottom: 8px;
            object-fit: cover;
        }

        .driver-popup-header h4 {
            color: #FFD700;
            margin: 5px 0;
            font-size: 1.1rem;
        }

        .driver-popup-info {
            margin-bottom: 15px;
        }

        .driver-popup-info p {
            margin: 5px 0;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .driver-popup-info i {
            color: #FFD700;
            width: 20px;
            text-align: center;
        }

        .driver-popup-actions {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 8px;
        }

        .driver-popup-actions button {
            padding: 8px;
            border-radius: 8px;
            border: none;
            cursor: pointer;
            font-weight: bold;
            transition: all 0.3s ease;
        }

        .driver-popup-actions .chat-btn {
            background: #FFD700;
            color: #000000;
        }

        .driver-popup-actions .book-btn {
            background: transparent;
            border: 1px solid #FFD700;
            color: #FFD700;
        }

        .driver-popup-actions button:hover {
            transform: translateY(-2px);
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
        }

        /* تحسين عرض صورة السائق */
        .driver-marker img.error {
            /* استخدام صورة افتراضية عند فشل تحميل الصورة */
            content: url('https://firebasestorage.googleapis.com/v0/b/messageemeapp.appspot.com/o/driver-images%2F7605a607-6cf8-4b32-aee1-fa7558c98452.png?alt=media&token=5cf9e67c-ba6e-4431-a6a0-79dede15b527');
            background:
                #333333;
        }

        /* أنماط المؤشرات على الخريطة */
        .custom-div-icon {
            background: none;
            border: none;
        }

        .driver-marker {
            position: relative;
            width: 60px;
            height: 60px;
            transform: translate(-50%, -50%);
        }

        .marker-pulse {
            position: absolute;
            width: 100%;
            height: 100%;
            border-radius: 50%;
            transform: scale(1);
            animation: pulse 2s infinite;
        }

        .driver-marker.active .marker-pulse {
            border: 3px solid #2ECC40;
        }

        .driver-marker.inactive .marker-pulse {
            border: 3px solid #FF4136;
        }

        @keyframes pulse {
            0% {
                transform: scale(1);
                opacity: 1;
            }

            100% {
                transform: scale(1.5);
                opacity: 0;
            }
        }

        .marker-container {
            position: relative;
            width: 44px;
            height: 44px;
            margin: 8px;
        }

        .marker-container img {
            width: 100%;
            height: 100%;
            border-radius: 50%;
            border: 2px solid #FFD700;
            background: #000000;
            object-fit: cover;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);
        }

        .marker-status {
            position: absolute;
            bottom: -4px;
            right: -4px;
            width: 20px;
            height: 20px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            border: 2px solid #000000;
            font-size: 10px;
            color: #000000;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
        }

        .marker-hover {
            transform: scale(1.1);
        }

        /* النافذة المنبثقة */
        .custom-popup {
            padding: 0;
            background: rgba(0, 0, 0, 0.95);
            border: 2px solid #FFD700;
            border-radius: 15px;
            overflow: hidden;
        }

        .driver-popup {
            color: #FFFFFF;
        }

        .driver-popup-header {
            text-align: center;
            padding: 15px;
            position: relative;
            background: linear-gradient(to bottom, rgba(255, 215, 0, 0.1), transparent);
        }

        .popup-status {
            position: absolute;
            top: 10px;
            right: 10px;
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 0.8rem;
            font-weight: bold;
        }

        .popup-status.active {
            background: rgba(46, 204, 64, 0.2);
            color: #2ECC40;
            border: 1px solid #2ECC40;
        }

        .popup-status.inactive {
            background: rgba(255, 65, 54, 0.2);
            color: #FF4136;
            border: 1px solid #FF4136;
        }

        .driver-popup-header img {
            width: 80px;
            height: 80px;
            border-radius: 50%;
            border: 3px solid #FFD700;
            margin-bottom: 10px;
            object-fit: cover;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.3);
        }

        .driver-popup-header h4 {
            color: #FFD700;
            margin: 8px 0;
            font-size: 1.2rem;
        }

        .driver-rating {
            color: #FFD700;
            font-size: 1.1rem;
        }

        .stars-container {
            display: flex;
            justify-content: center;
            gap: 4px;
        }

        .driver-popup-info {
            padding: 15px;
            background: rgba(255, 255, 255, 0.05);
        }

        .info-row {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-bottom: 8px;
            color: #CCCCCC;
        }

        .info-row i {
            color: #FFD700;
            width: 20px;
            text-align: center;
        }

        .driver-popup-actions {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 10px;
            padding: 15px;
        }

        .driver-popup-actions button {
            padding: 8px;
            border-radius: 8px;
            border: none;
            cursor: pointer;
            font-weight: bold;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
            position: relative;
            overflow: hidden;
        }

        .chat-btn {
            background: #FFD700;
            color: #000000;
        }

        .book-btn {
            background: transparent;
            border: 1px solid #FFD700;
            color: #FFD700;
        }

        .book-btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        .booking-notice {
            text-align: center;
            color: #FF4136;
            font-size: 0.9rem;
            padding: 8px;
            background: rgba(255, 65, 54, 0.1);
            margin-top: 10px;
        }

        /* تأثير Ripple */
        .ripple {
            position: relative;
            overflow: hidden;
        }

        .ripple-effect {
            position: absolute;
            border-radius: 50%;
            background: rgba(255, 255, 255, 0.4);
            transform: scale(0);
            animation: ripple 1s linear;
            pointer-events: none;
        }

        @keyframes ripple {
            to {
                transform: scale(4);
                opacity: 0;
            }
        }

        /* تحسينات للشاشات المحمولة */
        @media (max-width: 768px) {
            .custom-popup {
                width: 90vw !important;
                max-width: 320px !important;
            }

            .driver-popup-header img {
                width: 60px;
                height: 60px;
            }

            .driver-popup-header h4 {
                font-size: 1.1rem;
            }

            .info-row {
                font-size: 0.9rem;
            }
        }

        /* أنماط البحث عن السائقين في الجوار */
        .nearby-search-btn {
            width: 45px;
            height: 45px;
            background: #FFD700;
            border: 2px solid #000000;
            border-radius: 50%;
            color: #000;
            font-size: 1.3rem;
            cursor: pointer;
            box-shadow: 0 4px 15px rgba(255, 215, 0, 0.3);
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            margin-bottom: 12px;
            position: absolute;
            bottom: 100px;
            right: 15px;
            z-index: 1000;
            display: flex;
            align-items: center;
            justify-content: center;
            backdrop-filter: blur(5px);
        }

        .nearby-search-btn:hover {
            transform: scale(1.1) rotate(15deg);
            background: #FFD700;
            box-shadow: 0 6px 20px rgba(255, 215, 0, 0.4);
        }

        .nearby-search-btn:active {
            transform: scale(0.95);
        }

        .radius-control {
            position: absolute;
            bottom: 155px;
            right: 15px;
            background: rgba(0, 0, 0, 0.9);
            padding: 15px;
            border-radius: 15px;
            border: 2px solid #FFD700;
            color: #FFFFFF;
            z-index: 1000;
            width: 250px;
            backdrop-filter: blur(10px);
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
            transition: all 0.3s ease;
        }

        .radius-control label {
            display: block;
            margin-bottom: 8px;
            font-size: 1rem;
            font-weight: 500;
            color: #FFD700;
        }

        .radius-control input[type="range"] {
            width: 100%;
            height: 6px;
            background: #333;
            border-radius: 3px;
            outline: none;
            margin: 10px 0;
            appearance: none;
            appearance: none;
            -webkit-appearance: none;
        }

        .radius-control input[type="range"]::-webkit-slider-thumb {
            -webkit-appearance: none;
            width: 20px;
            height: 20px;
            background: #FFD700;
            border: 2px solid #000;
            border-radius: 50%;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .radius-control input[type="range"]::-webkit-slider-thumb:hover {
            transform: scale(1.2);
            box-shadow: 0 0 10px rgba(255, 215, 0, 0.5);
        }

        .nearby-results {
            position: absolute;
            top: 80px;
            right: 15px;
            width: 350px;
            max-height: 75vh;
            background: rgba(0, 0, 0, 0.95);
            border: 2px solid #FFD700;
            border-radius: 20px;
            z-index: 1000;
            overflow: hidden;
            box-shadow: 0 4px 25px rgba(0, 0, 0, 0.4);
            backdrop-filter: blur(10px);
            animation: slideIn 0.3s ease-out;
        }

        @keyframes slideIn {
            from {
                transform: translateX(100%);
                opacity: 0;
            }

            to {
                transform: translateX(0);
                opacity: 1;
            }
        }

        .nearby-results-header {
            padding: 20px;
            background: linear-gradient(to right, #000000, #1a1a1a);
            border-bottom: 2px solid #FFD700;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .nearby-results-header h3 {
            color: #FFD700;
            margin: 0;
            font-size: 1.3rem;
            font-weight: bold;
            text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
        }

        .nearby-results-header button {
            background: none;
            border: none;
            color: #FFD700;
            font-size: 1.2rem;
            cursor: pointer;
            padding: 5px;
            transition: all 0.3s ease;
        }

        .nearby-results-header button:hover {
            transform: rotate(90deg);
            color: #FFFFFF;
        }

        .nearby-results-content {
            padding: 20px;
            max-height: calc(75vh - 80px);
            overflow-y: auto;
        }

        .nearby-results-content::-webkit-scrollbar {
            width: 6px;
        }

        .nearby-results-content::-webkit-scrollbar-track {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 3px;
        }

        .nearby-results-content::-webkit-scrollbar-thumb {
            background: #FFD700;
            border-radius: 3px;
        }

        /* تحسين بطاقات السائقين */
        .driver-card {
            background: rgba(26, 26, 26, 0.9);
            border: 1px solid #FFD700;
            border-radius: 15px;
            padding: 15px;
            margin-bottom: 15px;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .driver-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 5px 15px rgba(255, 215, 0, 0.2);
            border-color: #FFFFFF;
        }

        .driver-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: linear-gradient(45deg, transparent, rgba(255, 215, 0, 0.1), transparent);
            transform: translateX(-100%);
            transition: transform 0.6s ease;
        }

        .driver-card:hover::before {
            transform: translateX(100%);
        }

        .driver-info {
            display: flex;
            align-items: center;
            gap: 15px;
            margin-bottom: 15px;
        }

        .driver-avatar {
            width: 60px;
            height: 60px;
            border-radius: 50%;
            border: 2px solid #FFD700;
            object-fit: cover;
            transition: all 0.3s ease;
        }

        .driver-card:hover .driver-avatar {
            transform: scale(1.1);
            border-color: #FFFFFF;
        }

        .driver-details h4 {
            color: #FFD700;
            margin: 0 0 5px 0;
            font-size: 1.1rem;
            font-weight: bold;
        }

        .driver-meta {
            color: #CCCCCC;
            font-size: 0.9rem;
            line-height: 1.4;
        }

        .driver-meta i {
            color: #FFD700;
            margin-left: 5px;
            width: 20px;
            text-align: center;
        }

        .driver-actions {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 10px;
            margin-top: 15px;
        }

        .driver-btn {
            padding: 10px;
            border-radius: 10px;
            border: none;
            cursor: pointer;
            font-weight: bold;
            font-size: 0.9rem;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
        }

        .chat-btn {
            background: #FFD700;
            color: #000000;
        }

        .chat-btn:hover {
            background: #FFFFFF;
            transform: translateY(-2px);
        }

        .book-btn {
            background: transparent;
            border: 1px solid #FFD700;
            color: #FFD700;
        }

        .book-btn:hover {
            background: #FFD700;
            color: #000000;
            transform: translateY(-2px);
        }

        /* حالة عدم وجود نتائج */
        .no-results {
            text-align: center;
            padding: 30px;
            color: #CCCCCC;
            font-size: 1.1rem;
        }

        /* تحسينات للشاشات المحمولة */
        @media (max-width: 768px) {
            .nearby-results {
                width: calc(100% - 30px);
                top: 70px;
            }

            .radius-control {
                width: calc(100% - 30px);
                right: 15px;
            }
        }

        /* أنماط بطاقة السائق على الخريطة */
        .leaflet-popup-content-wrapper {
            background: rgba(0, 0, 0, 0.95) !important;
            color: #FFFFFF !important;
            border: 2px solid #FFD700 !important;
            border-radius: 20px !important;
            backdrop-filter: blur(10px);
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
            padding: 0 !important;
            overflow: hidden;
        }

        .leaflet-popup-tip {
            background: #FFD700 !important;
        }

        .driver-map-card {
            width: 300px;
            padding: 0;
            position: relative;
        }

        .driver-card-header {
            background: #000000;
            padding: 20px;
            text-align: center;
            border-bottom: 2px solid #FFD700;
            position: relative;
        }

        .driver-logo {
            width: 80px;
            height: 80px;
            border-radius: 15px;
            margin: 0 auto 15px;
            border: 2px solid #FFD700;
            overflow: hidden;
            box-shadow: 0 4px 15px rgba(255, 215, 0, 0.2);
        }

        .driver-logo img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .close-button {
            position: absolute;
            top: 10px;
            right: 10px;
            background: none;
            border: none;
            color: #FFD700;
            font-size: 18px;
            cursor: pointer;
            padding: 5px;
            transition: all 0.3s ease;
        }

        .close-button:hover {
            transform: rotate(90deg);
            color: #FFFFFF;
        }

        .driver-name {
            color: #FFD700;
            font-size: 1.2rem;
            font-weight: bold;
            margin: 10px 0;
        }

        .driver-identity {
            color: #FFFFFF;
            font-size: 1rem;
            opacity: 0.8;
        }

        .driver-actions {
            padding: 15px;
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 10px;
        }

        .action-button {
            padding: 12px;
            border-radius: 10px;
            border: none;
            cursor: pointer;
            font-weight: bold;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
            transition: all 0.3s ease;
        }

        .chat-button {
            background: #FFD700;
            color: #000000;
        }

        .chat-button:hover {
            background: #FFFFFF;
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(255, 255, 255, 0.2);
        }

        .book-button {
            background: transparent;
            border: 2px solid #FFD700;
            color: #FFD700;
        }

        .book-button:hover {
            background: #FFD700;
            color: #000000;
            transform: translateY(-2px);
        }

        .driver-info {
            padding: 15px;
            background: rgba(255, 255, 255, 0.05);
        }

        .info-row {
            display: flex;
            align-items: center;
            justify-content: space-between;
            margin-bottom: 10px;
            color: #FFFFFF;
        }

        .info-label {
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .info-label i {
            color: #FFD700;
            width: 20px;
            text-align: center;
        }

        .info-value {
            color: #FFD700;
            font-weight: bold;
        }

        /* تأثيرات حركية */
        @keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(-10px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .driver-map-card {
            animation: fadeIn 0.3s ease forwards;
        }

        /* تجاوب مع الشاشات الصغيرة */
        @media (max-width: 768px) {
            .driver-map-card {
                width: 280px;
            }

            .driver-logo {
                width: 60px;
                height: 60px;
            }

            .driver-name {
                font-size: 1.1rem;
            }
        }

        /* أنماط البحث عن السائقين في الجوار */
        .nearby-search-btn {
            width: 45px;
            height: 45px;
            background: #FFD700;
            border: 2px solid #000000;
            border-radius: 50%;
            color: #000;
            font-size: 1.3rem;
            cursor: pointer;
            box-shadow: 0 4px 15px rgba(255, 215, 0, 0.3);
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            margin-bottom: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            backdrop-filter: blur(5px);
        }

        .nearby-search-btn:hover {
            transform: scale(1.1) rotate(15deg);
            background: #FFD700;
            box-shadow: 0 6px 20px rgba(255, 215, 0, 0.4);
        }

        .radius-control {
            background: rgba(0, 0, 0, 0.9);
            padding: 15px;
            border-radius: 15px;
            border: 2px solid #FFD700;
            color: #FFFFFF;
            width: 250px;
            backdrop-filter: blur(10px);
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
            transition: all 0.3s ease;
        }

        .radius-control label {
            display: block;
            margin-bottom: 8px;
            font-size: 1rem;
            font-weight: 500;
            color: #FFD700;
        }

        .radius-control input[type="range"] {
            width: 100%;
            height: 6px;
            background: #333;
            border-radius: 3px;
            outline: none;
            margin: 10px 0;
           
        }

        .radius-control input[type="range"]::-webkit-slider-thumb {
            -webkit-appearance: none;
            width: 20px;
            height: 20px;
            background: #FFD700;
            border: 2px solid #000;
            border-radius: 50%;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .radius-control input[type="range"]::-webkit-slider-thumb:hover {
            transform: scale(1.2);
            box-shadow: 0 0 10px rgba(255, 215, 0, 0.5);
        }

        /* أنماط علامات السائقين */
        .driver-marker {
            position: relative;
            width: 40px;
            height: 40px;
            transform: translate(-50%, -50%);
        }

        .marker-container {
            position: relative;
            width: 40px;
            height: 40px;
        }

        .marker-container img {
            width: 100%;
            height: 100%;
            border-radius: 50%;
            border: 2px solid #FFD700;
            object-fit: cover;
            background: #000000;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);
        }


        /* أنماط أيقونات المستخدم */
        .user-profile-btn {
            position: relative;
            display: flex;
            align-items: center;
            gap: 8px;
            padding: 4px;
            border-radius: 20px;
            transition: all 0.3s ease;
        }

        .user-profile-btn img {
            width: 32px;
            height: 32px;
            border-radius: 50%;
            border: 2px solid #FFD700;
            object-fit: cover;
            transition: all 0.3s ease;
        }

        .user-profile-btn:hover img {
            transform: scale(1.1);
            box-shadow: 0 0 10px rgba(255, 215, 0, 0.3);
        }



        /* أنماط معلومات المستخدم في القائمة الجانبية */
        .side-nav-user-info {
            padding: 20px;
            border-bottom: 1px solid rgba(255, 215, 0, 0.2);
            margin-bottom: 20px;
        }

        .user-info-header {
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .user-info-header img {
            width: 64px;
            height: 64px;
            border-radius: 50%;
            border: 3px solid #FFD700;
            object-fit: cover;
        }

        .user-details {
            flex: 1;
        }

        .user-details h6 {
            color: #FFD700;
            margin: 0;
            font-size: 1.1rem;
            font-weight: bold;
        }

        .user-details span {
            color: #FFFFFF;
            font-size: 0.9rem;
            opacity: 0.8;
        }

        /* أنماط العدادات والشارات */
        .notification-badge {
            position: absolute;
            top: -5px;
            right: -5px;
            background: #FF4136;
            color: white;
            border-radius: 50%;
            width: 20px;
            height: 20px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 12px;
            font-weight: bold;
            border: 2px solid #1a1a1a;
            animation: pulse 2s infinite;
        }

        .has-badge[data-count]:after {
            position: absolute;
            right: -10px;
            top: -10px;
            content: attr(data-count);
            font-size: 12px;
            padding: 3px;
            border-radius: 50%;
            line-height: 1em;
            color: white;
            background: rgba(255, 0, 0, 0.85);
            text-align: center;
            min-width: 20px;
            height: 20px;
            font-weight: bold;
            border: 2px solid #1a1a1a;
            font-family: sans-serif;
            animation: badge-pulse 2s infinite;
        }

        @keyframes badge-pulse {
            0% {
                transform: scale(1);
                opacity: 1;
            }

            50% {
                transform: scale(1.2);
                opacity: 0.8;
            }

            100% {
                transform: scale(1);
                opacity: 1;
            }
        }

        /* تحسينات التفاعل */
        .side-nav-item {
            position: relative;
            transition: all 0.3s ease;
        }

        .side-nav-item:hover {
            background: rgba(255, 215, 0, 0.1);
        }

        .side-nav-item.has-notification:before {
            content: '';
            position: absolute;
            right: 15px;
            top: 50%;
            transform: translateY(-50%);
            width: 8px;
            height: 8px;
            background: #FF4136;
            border-radius: 50%;
            animation: notification-pulse 2s infinite;
        }

        @keyframes notification-pulse {
            0% {
                transform: translateY(-50%) scale(1);
                opacity: 1;
            }

            50% {
                transform: translateY(-50%) scale(1.5);
                opacity: 0.5;
            }

            100% {
                transform: translateY(-50%) scale(1);
                opacity: 1;
            }
        }

        /* أنماط الشارات */
        .notification-badge,
        .message-badge {
            font-size: 0.7rem;
            padding: 0.25rem 0.5rem;
            background-color: #FFD700 !important;
            color: #000000;
            border: 2px solid #000000;
            animation: pulse 1s infinite;
        }

        @keyframes pulse {
            0% {
                transform: translate(-50%, -50%) scale(1);
            }

            50% {
                transform: translate(-50%, -50%) scale(1.2);
            }

            100% {
                transform: translate(-50%, -50%) scale(1);
            }
        }

        /* أنماط صورة المستخدم في الشريط العلوي */
        .user-profile-btn img {
            width: 35px;
            height: 35px;
            border-radius: 50%;
            border: 2px solid #FFD700;
            object-fit: cover;
            transition: transform 0.3s ease;
        }

        .user-profile-btn img:hover {
            transform: scale(1.1);
        }

        /* أنماط قائمة الإشعارات والرسائل */
        .notifications-list,
        .messages-list {
            padding: 0;
        }

        .notification-item,
        .message-item {
            display: flex;
            align-items: center;
            padding: 1rem;
            border-bottom: 1px solid rgba(255, 215, 0, 0.1);
            transition: background-color 0.3s ease;
        }

        .notification-item:hover,
        .message-item:hover {
            background-color: rgba(255, 215, 0, 0.05);
        }

        .notification-item img,
        .message-item img {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            margin-left: 1rem;
            border: 2px solid #FFD700;
            object-fit: cover;
        }

        .notification-content,
        .message-content {
            flex: 1;
        }

        .notification-title,
        .message-sender {
            font-weight: bold;
            color: #FFD700;
            margin-bottom: 0.3rem;
        }

        .notification-text,
        .message-text {
            color: #FFFFFF;
            font-size: 0.9rem;
        }

        .notification-time,
        .message-time {
            font-size: 0.8rem;
            color: #999999;
        }

        /* أنماط معلومات المستخدم في الشريط الجانبي */
        .side-nav-user-info {
            padding: 1.5rem;
            text-align: center;
            border-bottom: 1px solid rgba(255, 215, 0, 0.2);
        }

        .side-nav-user-info img {
            width: 80px;
            height: 80px;
            border-radius: 50%;
            border: 3px solid #FFD700;
            margin-bottom: 1rem;
            object-fit: cover;
        }

        .side-nav-user-info h6 {
            color: #FFD700;
            margin-bottom: 0.3rem;
        }

        .side-nav-user-info .user-type {
            color: #FFFFFF;
            font-size: 0.9rem;
            opacity: 0.8;
        }

        /* أنماط النوافذ المنبثقة */
        .modal-content {
            background-color: #1a1a1a;
            border: 2px solid #FFD700;
        }

        .modal-header {
            border-bottom: 1px solid rgba(255, 215, 0, 0.2);
        }

        .modal-title {
            color: #FFD700;
        }

        /* أنماط زر تسجيل الخروج */
        .logout-btn {
            width: 100%;
            padding: 0.8rem;
            background: transparent;
            border: 2px solid #FFD700;
            color: #FFD700;
            border-radius: 10px;
            margin-top: 1rem;
            transition: all 0.3s ease;
        }

        .logout-btn:hover {
            background: #FFD700;
            color: #000000;
        }

        /* أنماط الإشعارات غير المقروءة */
        .unread {
            background-color: rgba(255, 215, 0, 0.1);
        }

        .unread::before {
            content: '';
            display: block;
            width: 8px;
            height: 8px;
            background-color: #FFD700;
            border-radius: 50%;
            position: absolute;
            right: 10px;
            top: 50%;
            transform: translateY(-50%);
        }


        /* أنماط الملف الشخصي في الشريط الجانبي */
        .side-nav-user-info {
            padding: 20px;
            border-bottom: 1px solid rgba(255, 215, 0, 0.2);
            text-align: center;
        }

        .side-nav-user-info img {
            width: 80px;
            height: 80px;
            border-radius: 50%;
            border: 3px solid #FFD700;
            margin-bottom: 10px;
            object-fit: cover;
        }

        .side-nav-user-info h6 {
            color: #FFD700;
            margin: 0;
            font-size: 1.1rem;
        }

        .side-nav-user-info .user-type {
            color: #FFFFFF;
            font-size: 0.9rem;
            opacity: 0.8;
            display: block;
            margin-top: 5px;
        }

        /* أنماط زر الملف الشخصي في الشريط العلوي */
        .user-profile-btn {
            display: flex;
            align-items: center;
            gap: 8px;
            padding: 4px;
            border-radius: 20px;
            transition: all 0.3s ease;
        }

        .user-profile-btn img {
            width: 32px;
            height: 32px;
            border-radius: 50%;
            border: 2px solid #FFD700;
            object-fit: cover;
        }

        /* تحسينات النوافذ المنبثقة */
        .modal {
            background: rgba(0, 0, 0, 0.5);
        }

        .modal-content {
            border: none;
            border-radius: 15px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
        }

        /* تحسينات زر الملف الشخصي */
        .user-profile-btn {
            position: relative;
            border: none;
            background: transparent;
            padding: 5px 10px;
            border-radius: 20px;
            transition: all 0.3s ease;
        }

        .user-profile-btn:hover {
            background: rgba(255, 215, 0, 0.1);
        }

        .user-profile-btn img {
            width: 35px;
            height: 35px;
            border-radius: 50%;
            border: 2px solid #FFD700;
            object-fit: cover;
        }

        /* تحسينات القائمة المنسدلة */
        .dropdown-menu {
            background-color: #1a1a1a;
            border: 1px solid #FFD700;
            border-radius: 10px;
            margin-top: 10px;
        }

        .dropdown-item {
            color: #FFFFFF;
            padding: 8px 20px;
            transition: all 0.3s ease;
        }

        .dropdown-item:hover {
            background-color: #FFD700;
            color: #000000;
        }

        .dropdown-divider {
            border-color: rgba(255, 215, 0, 0.2);
        }
    </style>
    </head>

    <body>

        <body>
            <!-- تحديث شريط الأدوات في الأعلى -->
            <div class="tools">
                <a class="nav-link position-relative" href="#" data-bs-toggle="modal" data-bs-target="#searchModal">
                    <i class="fas fa-search"></i>
                </a>

                <a class="nav-link position-relative" href="#" data-bs-toggle="modal"
                    data-bs-target="#notificationsModal">
                    <i class="fas fa-bell"></i>
                    <span
                        class="notification-badge position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger"
                        style="display: none;">0</span>
                </a>



                <!-- زر الحساب الشخصي -->
                <a class="nav-link user-profile-btn" href="#" data-bs-toggle="modal" data-bs-target="#profileModal">
                    <i class="fas fa-user"></i>
                    <span class="ms-1 d-none d-md-inline">تسجيل</span>
                </a>
            </div>

            <!-- إضافة نوافذ الإشعارات والرسائل -->
            <!-- نافذة الإشعارات -->
            <div class="modal fade" id="notificationsModal" tabindex="-1">
                <div class="modal-dialog modal-dialog-scrollable">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">الإشعارات</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                        </div>
                        <div class="modal-body">
                            <div class="notifications-list"></div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- نافذة الرسائل -->
            <div class="modal fade" id="messagesModal" tabindex="-1">
                <div class="modal-dialog modal-dialog-scrollable">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">الرسائل</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                        </div>
                        <div class="modal-body">
                            <div class="messages-list"></div>
                        </div>
                    </div>
                </div>
            </div>
            <!-- Header -->
            <nav class="navbar navbar-expand-lg navbar-dark app-header fixed-top">

                <div class="container">
                    <a class="app-logo navbar-brand" href="#">
                        <i class="fas fa-taxi"></i>
                        تاكسي العراق
                    </a>
                    <!-- زر فتح الشريط الجانبي -->
                    <button class="nav-toggle" onclick="toggleSideNav()">
                        <i class="fas fa-bars"></i>
                    </button>
                    <nav class="navbar app-header fixed-top">
                        <div class="container d-flex justify-content-between align-items-center">
                            <!-- اللوجو واسم التطبيق مع أيقونة البحث -->
                            <div class="d-flex align-items-center app-title">
                                <a class="app-logo d-flex align-items-center" href="map.html">
                                    <i class="fas fa-taxi me-2"></i>
                                    <span>ataxiPash</span>
                                </a>
                                <!-- أيقونة البحث بجانب الاسم -->
                                <div class="side-nav" id="sideNav">
                                    <div class="side-nav-header">
                                        <h2 class="side-nav-title">تاكسي العراق</h2>
                                        <button class="side-nav-close" onclick="toggleSideNav()">×</button>
                                    </div>

                                    <div class="side-nav-items">
                                        <a href="/" class="side-nav-item"><i class="fas fa-home"></i> الرئيسية</a>
                                        <a href="/drivers" class="side-nav-item"><i class="fas fa-users"></i>
                                            السائقين</a>
                                        <!-- زر الإضافة تحت السائقين -->


                                        <button class="add-driver-btn side-nav-item"
                                            onclick="window.location.href='add-driver.html'">
                                            <i class="fas fa-user-plus"></i> إضافة سائق
                                        </button>
                                        <a href="trips.html" class="side-nav-item"><i class="fas fa-car"></i>
                                            الرحلات</a>
                                        <a href="map.html" class="side-nav-item"><i class="fas fa-map"></i> الخريطة</a>
                                        <a href="notifications.html" class="side-nav-item"><i class="fas fa-bell"></i>
                                            الإشعارات</a>
                                        <a href="messages.html" class="side-nav-item"><i class="fas fa-envelope"></i>
                                            الرسائل</a>
                                        <a href="settings.html" class="side-nav-item"><i class="fas fa-cog"></i>
                                            الإعدادات</a>
                                    </div>

                                    <!-- إضافة زر تسجيل الخروج في الشريط الجانبي -->
                                    <div class="side-nav-footer">
                                        <button onclick="handleLogout()" class="logout-btn">
                                            <i class="fas fa-sign-out-alt"></i>
                                            تسجيل الخروج
                                        </button>
                                    </div>
                                </div>

                                <!-- شريط الأدوات السفلي -->
                                <div class="bottom-nav">
                                    <a href="/" class="bottom-nav-item">
                                        <i class="fas fa-home"></i>
                                        <span>الرئيسية</span>
                                    </a>
                                    <a href="/explore" class="bottom-nav-item">
                                        <i class="fas fa-compass"></i>
                                        <span>استكشاف</span>
                                    </a>
                                    <a href="/favorites" class="bottom-nav-item">
                                        <i class="fas fa-star"></i>
                                        <span>المفضلة</span>
                                    </a>
                                    <a href="/trips" class="bottom-nav-item">
                                        <i class="fas fa-car"></i>
                                        <span>الرحلات</span>
                                    </a>
                                </div>



                                <!-- كود الـ Backdrop للشريط الجانبي -->
                                <div class="nav-backdrop" id="navBackdrop" onclick="toggleSideNav()"></div>
        </body>


        <!-- الأدوات الأخرى (التنبيهات، حسابي) -->
        <div class="tools d-flex align-items-center">
            <!-- Search Icon -->
            <a class="nav-link" href="#" data-bs-toggle="modal" data-bs-target="#searchModal">
                <i class="fas fa-search"></i>
            </a>

            <!-- Notifications Icon -->
            <a class="nav-link" href="#" data-bs-toggle="modal" data-bs-target="#notificationsModal">
                <i class="fas fa-bell"></i>
            </a>
            <a class="nav-link position-relative" href="#" data-bs-toggle="modal" data-bs-target="#messagesModal">
                <i class="fas fa-envelope"></i>
                <span
                    class="message-badge position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger"
                    style="display: none;">0</span>
            </a>

            <!-- Profile/Account Icon - يفتح نافذة اختيار نوع الحساب -->
            <a class="nav-link user-profile-btn" href="#" data-bs-toggle="modal" data-bs-target="#profileModal">
                <i class="fas fa-user"></i>
                <span class="ms-1 d-none d-md-inline">تسجيل</span>
            </a>
        </div>

        </nav>

        </a>
        </div>
        </div>
        </nav>

        </a>
        </li>
        </ul>
        </div>
        </div>
        </nav>

        <!-- Main Content -->
        <div class="container">
            <!-- Map View -->
            <div id="map"></div>

            <!-- Location Filter -->
            <div class="location-filter">
                <div class="location-chips" id="locationFilter">
                    <span class="location-chip active" data-location="all">
                        <i class="fas fa-globe"></i>
                        الكل
                    </span>
                    <span class="location-chip" data-location="بغداد">
                        <i class="fas fa-map-marker-alt"></i>
                        بغداد
                    </span>
                    <span class="location-chip" data-location="الكرخ">
                        <i class="fas fa-map-marker-alt"></i>
                        الكرخ
                    </span>
                    <span class="location-chip" data-location="الرصافة">
                        <i class="fas fa-map-marker-alt"></i>
                        الرصافة
                    </span>
                    <span class="location-chip" data-location="البصرة">
                        <i class="fas fa-map-marker-alt"></i>
                        البصرة
                    </span>
                    <span class="location-chip" data-location="نينوى">
                        <i class="fas fa-map-marker-alt"></i>
                        نينوى
                    </span>
                    <span class="location-chip" data-location="الموصل">
                        <i class="fas fa-map-marker-alt"></i>
                        الموصل
                    </span>
                    <span class="location-chip" data-location="النجف">
                        <i class="fas fa-map-marker-alt"></i>
                        النجف
                    </span>
                    <span class="location-chip" data-location="الكوفة">
                        <i class="fas fa-map-marker-alt"></i>
                        الكوفة
                    </span>
                    <span class="location-chip" data-location="كربلاء">
                        <i class="fas fa-map-marker-alt"></i>
                        كربلاء
                    </span>
                    <span class="location-chip" data-location="الحسينية">
                        <i class="fas fa-map-marker-alt"></i>
                        الحسينية
                    </span>
                    <span class="location-chip" data-location="أربيل">
                        <i class="fas fa-map-marker-alt"></i>
                        أربيل
                    </span>
                    <span class="location-chip" data-location="كركوك">
                        <i class="fas fa-map-marker-alt"></i>
                        كركوك
                    </span>
                    <span class="location-chip" data-location="الأنبار">
                        <i class="fas fa-map-marker-alt"></i>
                        الأنبار
                    </span>
                    <span class="location-chip" data-location="الرمادي">
                        <i class="fas fa-map-marker-alt"></i>
                        الرمادي
                    </span>
                    <span class="location-chip" data-location="الفلوجة">
                        <i class="fas fa-map-marker-alt"></i>
                        الفلوجة
                    </span>
                    <span class="location-chip" data-location="بابل">
                        <i class="fas fa-map-marker-alt"></i>
                        بابل
                    </span>
                    <span class="location-chip" data-location="الحلة">
                        <i class="fas fa-map-marker-alt"></i>
                        الحلة
                    </span>
                    <span class="location-chip" data-location="المسيب">
                        <i class="fas fa-map-marker-alt"></i>
                        المسيب
                    </span>
                    <span class="location-chip" data-location="الهاشمية">
                        <i class="fas fa-map-marker-alt"></i>
                        الهاشمية
                    </span>
                    <span class="location-chip" data-location="القاسم">
                        <i class="fas fa-map-marker-alt"></i>
                        القاسم
                    </span>
                    <span class="location-chip" data-location="ديالى">
                        <i class="fas fa-map-marker-alt"></i>
                        ديالى
                    </span>
                    <span class="location-chip" data-location="بعقوبة">
                        <i class="fas fa-map-marker-alt"></i>
                        بعقوبة
                    </span>
                    <span class="location-chip" data-location="ذي قار">
                        <i class="fas fa-map-marker-alt"></i>
                        ذي قار
                    </span>
                    <span class="location-chip" data-location="الناصرية">
                        <i class="fas fa-map-marker-alt"></i>
                        الناصرية
                    </span>
                    <span class="location-chip" data-location="السليمانية">
                        <i class="fas fa-map-marker-alt"></i>
                        السليمانية
                    </span>
                    <span class="location-chip" data-location="صلاح الدين">
                        <i class="fas fa-map-marker-alt"></i>
                        صلاح الدين
                    </span>
                    <span class="location-chip" data-location="تكريت">
                        <i class="fas fa-map-marker-alt"></i>
                        تكريت
                    </span>
                    <span class="location-chip" data-location="واسط">
                        <i class="fas fa-map-marker-alt"></i>
                        واسط
                    </span>
                    <span class="location-chip" data-location="الكوت">
                        <i class="fas fa-map-marker-alt"></i>
                        الكوت
                    </span>
                    <span class="location-chip" data-location="ميسان">
                        <i class="fas fa-map-marker-alt"></i>
                        ميسان
                    </span>
                    <span class="location-chip" data-location="العمارة">
                        <i class="fas fa-map-marker-alt"></i>
                        العمارة
                    </span>
                    <span class="location-chip" data-location="المثنى">
                        <i class="fas fa-map-marker-alt"></i>
                        المثنى
                    </span>
                    <span class="location-chip" data-location="السماوة">
                        <i class="fas fa-map-marker-alt"></i>
                        السماوة
                    </span>
                    <span class="location-chip" data-location="دهوك">
                        <i class="fas fa-map-marker-alt"></i>
                        دهوك
                    </span>
                    <span class="location-chip" data-location="القادسية">
                        <i class="fas fa-map-marker-alt"></i>
                        القادسية
                    </span>
                    <span class="location-chip" data-location="الديوانية">
                        <i class="fas fa-map-marker-alt"></i>
                        الديوانية
                    </span>

                </div>

            </div>

            <!-- Drivers Grid -->
            <div class="drivers-grid" id="driversGrid"></div>
        </div>



        <!-- Add Driver زر اضافة السائقين من قبل الادمنModal -->
        <div class="modal fade" id="addDriverModal" tabindex="-1">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">إضافة سائق جديد</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">

                        <form id="addDriverForm" onsubmit="handleAddDriver(event)">
                            <div class="mb-4 text-center">
                                <div class="image-upload-container"
                                    onclick="document.getElementById('driverImage').click()">
                                    <input type="file" id="driverImage" accept="image/*" style="display: none"
                                        onchange="handleImagePreview(event)">
                                    <img id="imagePreview" src="#" alt=""
                                        style="display: none; width: 100%; height: 100%; object-fit: cover;">
                                    <div class="upload-placeholder">
                                        <i class="fas fa-camera fa-2x mb-2"></i>
                                        <p>انقر لإضافة صورة</p>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-12">
                                <div class="location-capture-section">
                                    <label class="form-label">موقع السائق</label>
                                    <div class="d-flex gap-2 mb-2">
                                        <input type="text" class="form-control" id="driverLatitude"
                                            placeholder="خط العرض" readonly>
                                        <input type="text" class="form-control" id="driverLongitude"
                                            placeholder="خط الطول" readonly>
                                    </div>
                                    <button type="button" class="btn btn-primary w-100"
                                        onclick="captureCurrentLocation()">
                                        <i class="fas fa-location-arrow me-2"></i>
                                        تحديد الموقع الحالي
                                    </button>
                                </div>
                            </div>


                            <div class="row g-3">
                                <div class="col-md-6">
                                    <label class="form-label">اسم السائق</label>
                                    <input type="text" class="form-control" id="driverName" required>
                                </div>
                                <div class="col-md-6">
                                    <label class="form-label">رقم الهاتف</label>
                                    <input type="tel" class="form-control" id="driverPhone" required>
                                </div>
                                <div class="col-md-6">
                                    <label class="form-label">نوع السيارة</label>
                                    <input type="text" class="form-control" id="carType" required>
                                </div>
                                <div class="col-md-6">
                                    <label class="form-label">موديل السيارة</label>
                                    <input type="number" class="form-control" id="carModel" required>
                                </div>
                                <div class="col-md-12">
                                    <label class="form-label">المنطقة</label>
                                    <select class="form-control" id="driverLocation" required>
                                        <option value="">اختر المحافظة</option>
                                        <option value="بغداد">بغداد</option>
                                        <option value="الكرخ">الكرخ</option>
                                        <option value="الرصافة">الرصافة</option>
                                        <option value="البصرة">البصرة</option>
                                        <option value="نينوى">نينوى</option>
                                        <option value="الموصل">الموصل</option>
                                        <option value="النجف">النجف</option>
                                        <option value="الكوفة">الكوفة</option>
                                        <option value="كربلاء">كربلاء</option>
                                        <option value="الحسينية">الحسينية</option>
                                        <option value="أربيل">أربيل</option>
                                        <option value="كركوك">كركوك</option>
                                        <option value="الأنبار">الأنبار</option>
                                        <option value="الرمادي">الرمادي</option>
                                        <option value="الفلوجة">الفلوجة</option>
                                        <option value="بابل">بابل</option>
                                        <option value="الحلة">الحلة</option>
                                        <option value="المسيب">المسيب</option>
                                        <option value="الهاشمية">الهاشمية</option>
                                        <option value="القاسم">القاسم</option>
                                        <option value="ديالى">ديالى</option>
                                        <option value="بعقوبة">بعقوبة</option>
                                        <option value="ذي قار">ذي قار</option>
                                        <option value="الناصرية">الناصرية</option>
                                        <option value="السليمانية">السليمانية</option>
                                        <option value="صلاح الدين">صلاح الدين</option>
                                        <option value="تكريت">تكريت</option>
                                        <option value="واسط">واسط</option>
                                        <option value="الكوت">الكوت</option>
                                        <option value="ميسان">ميسان</option>
                                        <option value="العمارة">العمارة</option>
                                        <option value="المثنى">المثنى</option>
                                        <option value="السماوة">السماوة</option>
                                        <option value="دهوك">دهوك</option>
                                        <option value="القادسية">القادسية</option>
                                        <option value="الديوانية">الديوانية</option>



                                    </select>


                                </div>
                                <div class="col-12">
                                    <label class="form-label">معلومات إضافية</label>
                                    <textarea class="form-control" id="driverBio" rows="3"></textarea>
                                </div>
                            </div>

                            <div class="mt-4">
                                <button type="submit" class="btn btn-primary w-100">إضافة السائق</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>


        <!-- Toast Container -->
        <div class="toast-container" id="toastContainer"></div>

        <!-- Loading Spinner -->
        <div class="loading-spinner" id="loadingSpinner">
            <div class="spinner"></div>
        </div>
        <!-- نافذة تعديل بيانات السائق -->
        <div class="modal fade" id="editDriverModal" tabindex="-1">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">تعديل بيانات السائق</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <form id="editDriverForm" onsubmit="handleEditDriver(event)">
                            <input type="hidden" id="editDriverId">

                            <div class="mb-4 text-center">
                                <div class="image-upload-container"
                                    onclick="document.getElementById('editDriverImage').click()">
                                    <input type="file" id="editDriverImage" accept="image/*" style="display: none"
                                        onchange="handleEditImagePreview(event)">
                                    <img id="editImagePreview" src="#" alt=""
                                        style="display: none; width: 100%; height: 200px; object-fit: cover; border-radius: 10px;">
                                    <div class="upload-placeholder">
                                        <i class="fas fa-camera fa-2x mb-2"></i>
                                        <p>انقر لتغيير الصورة</p>
                                    </div>
                                </div>
                            </div>

                            <div class="row g-3">
                                <div class="col-md-6">
                                    <label class="form-label">اسم السائق</label>
                                    <input type="text" class="form-control" id="editDriverName" required>
                                </div>
                                <div class="col-md-6">
                                    <label class="form-label">رقم الهاتف</label>
                                    <input type="tel" class="form-control" id="editDriverPhone" required>
                                </div>
                                <div class="col-md-6">
                                    <label class="form-label">نوع السيارة</label>
                                    <input type="text" class="form-control" id="editCarType" required>
                                </div>
                                <div class="col-md-6">
                                    <label class="form-label">موديل السيارة</label>
                                    <input type="number" class="form-control" id="editCarModel" required>
                                </div>
                                <div class="col-md-12">
                                    <label class="form-label">المنطقة</label>
                                    <select class="form-control" id="editDriverLocation" required>
                                        <option value="">اختر المحافظة</option>
                                        <option value="بغداد">بغداد</option>
                                        <option value="الكرخ">الكرخ</option>
                                        <option value="الرصافة">الرصافة</option>
                                        <option value="البصرة">البصرة</option>
                                        <option value="نينوى">نينوى</option>
                                        <option value="الموصل">الموصل</option>
                                        <option value="النجف">النجف</option>
                                        <option value="الكوفة">الكوفة</option>
                                        <option value="كربلاء">كربلاء</option>
                                        <option value="الحسينية">الحسينية</option>
                                        <option value="أربيل">أربيل</option>
                                        <option value="كركوك">كركوك</option>
                                        <option value="الأنبار">الأنبار</option>
                                        <option value="الرمادي">الرمادي</option>
                                        <option value="الفلوجة">الفلوجة</option>
                                        <option value="بابل">بابل</option>
                                        <option value="الحلة">الحلة</option>
                                        <option value="المسيب">المسيب</option>
                                        <option value="الهاشمية">الهاشمية</option>
                                        <option value="القاسم">القاسم</option>
                                        <option value="ديالى">ديالى</option>
                                        <option value="بعقوبة">بعقوبة</option>
                                        <option value="ذي قار">ذي قار</option>
                                        <option value="الناصرية">الناصرية</option>
                                        <option value="السليمانية">السليمانية</option>
                                        <option value="صلاح الدين">صلاح الدين</option>
                                        <option value="تكريت">تكريت</option>
                                        <option value="واسط">واسط</option>
                                        <option value="الكوت">الكوت</option>
                                        <option value="ميسان">ميسان</option>
                                        <option value="العمارة">العمارة</option>
                                        <option value="المثنى">المثنى</option>
                                        <option value="السماوة">السماوة</option>
                                        <option value="دهوك">دهوك</option>
                                        <option value="القادسية">القادسية</option>
                                        <option value="الديوانية">الديوانية</option>
                                        <!-- إضافة باقي المدن -->
                                    </select>
                                </div>
                                <div class="col-12">
                                    <label class="form-label">معلومات إضافية</label>
                                    <textarea class="form-control" id="editDriverBio" rows="3"></textarea>
                                </div>
                            </div>

                            <div class="mt-4">
                                <button type="submit" class="btn btn-primary w-100">حفظ التغييرات</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>

        <div id="notificationStatus" class="mt-2 small text-muted"></div>
        </div>

        <div class="modal fade" id="searchModal" tabindex="-1" aria-labelledby="searchModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="searchModalLabel">بحث عن سائق</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <div class="search-wrapper">
                            <!-- حقل البحث -->
                            <div class="search-input-wrapper mb-3">
                                <div class="input-group">
                                    <input type="text" class="form-control search-input" id="navbarSearchInput"
                                        placeholder="ابحث عن اسم السائق، المنطقة، نوع السيارة..." autofocus>
                                    <span class="input-group-text">
                                        <i class="fas fa-search"></i>
                                    </span>
                                </div>
                            </div>

                            <!-- خيارات البحث -->
                            <div class="search-options mb-3">
                                <div class="btn-group w-100" role="group">
                                    <input type="radio" class="btn-check" name="searchType" id="searchAll" checked>
                                    <label class="btn btn-outline-primary" for="searchAll">الكل</label>

                                    <input type="radio" class="btn-check" name="searchType" id="searchName">
                                    <label class="btn btn-outline-primary" for="searchName">الاسم</label>

                                    <input type="radio" class="btn-check" name="searchType" id="searchLocation">
                                    <label class="btn btn-outline-primary" for="searchLocation">المنطقة</label>

                                    <input type="radio" class="btn-check" name="searchType" id="searchCar">
                                    <label class="btn btn-outline-primary" for="searchCar">السيارة</label>
                                </div>
                            </div>

                            <!-- نتائج البحث -->
                            <div id="searchResults" class="search-results"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!-- نافذة المحادثة -->
        <div class="modal fade" id="chatModal" tabindex="-1" aria-labelledby="chatModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered modal-lg">
                <div class="modal-content chat-window">
                    <!-- رأس النافذة مع صورة واسم السائق -->
                    <div class="modal-header chat-header">
                        <img id="driverImage"
                            src="https://firebasestorage.googleapis.com/v0/b/messageemeapp.appspot.com/o/driver-images%2F7605a607-6cf8-4b32-aee1-fa7558c98452.png?alt=media&token=5cf9e67c-ba6e-4431-a6a0-79dede15b527"
                            alt="صورة السائق" class="rounded-circle me-2" style="width: 60px; height: 60px;">
                        <div>
                            <h5 class="modal-title" id="driverName">اسم السائق</h5>
                            <small id="driverCardInfo" style="color: #ffffff;">بطاقة السائق</small>
                        </div>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="إغلاق"></button>

                    </div>
                    <!-- اختيار المشوار -->
                    <div class="modal-body chat-body">
                        <div id="tripSelection" class="mb-3">
                            <small id="driverCardInfo" style="color: #ffffff;"> عدد الـــمشــوار </small>
                            <input type="number" id="tripCount" class="form-control mb-2"
                                placeholder="أدخل عدد المشاوير" min="1">

                            <small id="driverCardInfo" style="color: #ffffff;"> نوع الواجــــهة</small>

                            <input type="text" id="tripDestination" class="form-control mb-2" placeholder="أدخل الوجهة">

                            <small id="driverCardInfo" style="color: #ffffff;"> نوع الرحـــله</small>
                            <select id="tripType" class="form-control mb-3">
                                <option value="ذهاب">ذهاب</option>
                                <option value="ذهاب وعودة">ذهاب وعودة</option>
                            </select>

                            <button class="btn btn-success w-100" onclick="confirmTrip()">تأكيد المشوار</button>
                        </div>
                        <!-- منطقة الرسائل -->
                        <div id="chatMessages" class="chat-messages d-none"></div>
                    </div>
                    <!-- شريط الإدخال -->
                    <div class="modal-footer chat-footer d-none">
                        <div class="input-group">
                            <input type="text" id="chatInput" class="form-control chat-input"
                                placeholder="اكتب رسالتك هنا...">
                            <button class="btn btn-primary send-btn" onclick="sendMessage()">
                                <i class="fas fa-paper-plane"></i>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!-- تعديل نافذة اختيار نوع الحساب -->
        <div class="modal fade" id="profileModal" tabindex="-1">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header border-0 text-center">
                        <h5 class="modal-title w-100">اختر العملية</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body py-4">
                        <div class="row g-4">
                            <!-- زر تسجيل الدخول -->
                            <div class="col-12 mb-3">
                                <div class="account-type-card" onclick="openLoginModal()">
                                    <div class="icon-container mb-3">
                                        <i class="fas fa-sign-in-alt fa-3x"></i>
                                    </div>
                                    <h6>تسجيل الدخول</h6>
                                    <p class="small text-muted">لديك حساب بالفعل؟ سجل دخولك</p>
                                </div>
                            </div>
                            <!-- زر انشاء حساب -->
                            <div class="col-12">
                                <div class="account-type-card" onclick="openUserRegistration()">
                                    <div class="icon-container mb-3">
                                        <i class="fas fa-user fa-3x"></i>
                                    </div>
                                    <h6>انشاء حساب</h6>
                                    <p class="small text-muted">احجز رحلاتك بسهولة</p>
                                </div>
                            </div>
                            <!-- زر إضافة سائق -->
                            <div class="col-12">
                                <div class="account-type-card" onclick="showAddDriverModal()">
                                    <div class="icon-container mb-3">
                                        <i class="fas fa-user-plus fa-3x"></i>
                                    </div>
                                    <h6>إضافة سائق</h6>
                                    <p class="small text-muted">أضف سائق جديد إلى النظام</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

<!-- نافذة تسجيل الدخول -->
<div class="modal fade" id="loginModal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">تسجيل الدخول</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="loginForm" onsubmit="handleLogin(event)">
                    <div class="mb-3">
                        <label class="form-label">البريد الإلكتروني</label>
                        <input type="email" class="form-control" name="email" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">كلمة المرور</label>
                        <input type="password" class="form-control" name="password" required>
                    </div>
                    <div class="text-center">
                        <button type="submit" class="btn btn-primary w-100">
                            <i class="fas fa-sign-in-alt me-2"></i>
                            تسجيل الدخول
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

        <!-- نافذة تسجيل السائق -->
        <div class="modal fade" id="driverRegistrationModal" tabindex="-1">
            <div class="modal-dialog modal-lg modal-dialog-scrollable">
                <div class="modal-content">
                    <div class="modal-header">
                        <div class="text-center w-100">
                            <img src="https://firebasestorage.googleapis.com/v0/b/messageemeapp.appspot.com/o/driver-images%2F7605a607-6cf8-4b32-aee1-fa7558c98452.png?alt=media&token=5cf9e67c-ba6e-4431-a6a0-79dede15b527"
                                alt="شعار التطبيق" style="height: 60px;">
                            <h5 class="modal-title mt-2">تسجيل سائق جديد</h5>
                        </div>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <form id="driverRegistrationForm" class="needs-validation" novalidate>
                            <!-- المعلومات الشخصية -->
                            <div class="registration-section mb-4">
                                <h6 class="section-title">المعلومات الشخصية</h6>
                                <div class="row g-3">
                                    <div class="col-12">
                                        <div class="text-center mb-3">
                                            <div class="driver-photo-upload"
                                                onclick="document.getElementById('driverPhoto').click()">
                                                <img id="driverPhotoPreview" src="#" alt="">
                                                <div class="upload-placeholder">
                                                    <i class="fas fa-camera"></i>
                                                    <span>صورة شخصية</span>
                                                </div>
                                            </div>
                                            <input type="file" id="driverPhoto" accept="image/*" style="display: none;"
                                                onchange="previewDriverPhoto(this)">
                                        </div>
                                    </div>
                                    <div class="col-md-12">
                                        <label class="form-label">الاسم الثلاثي</label>
                                        <input type="text" class="form-control" name="fullName" required>
                                    </div>
                                    <div class="col-md-6">
                                        <label class="form-label">العمر</label>
                                        <input type="number" class="form-control" name="age" min="18" required>
                                    </div>
                                    <div class="col-md-6">
                                        <label class="form-label">رقم الهاتف</label>
                                        <input type="tel" class="form-control" name="phone" required>
                                    </div>
                                </div>
                            </div>

                            <!-- معلومات المركبة -->
                            <div class="registration-section mb-4">
                                <h6 class="section-title">معلومات المركبة</h6>
                                <div class="row g-3">
                                    <div class="col-md-6">
                                        <label class="form-label">نوع المركبة</label>
                                        <select class="form-select" name="vehicleType" required>
                                            <option value="">اختر نوع المركبة</option>
                                            <option value="أجرة">أجرة</option>
                                            <option value="خصوصي">خصوصي</option>
                                            <option value="باص">باص</option>
                                            <option value="صالون">صالون</option>
                                            <option value="تحميل">تحميل</option>
                                        </select>
                                    </div>
                                    <div class="col-md-6">
                                        <label class="form-label">موديل المركبة</label>
                                        <input type="number" class="form-control" name="vehicleModel" min="1990"
                                            required>
                                    </div>
                                    <div class="col-md-6">
                                        <label class="form-label">رقم المركبة</label>
                                        <input type="text" class="form-control" name="vehicleNumber" required>
                                    </div>
                                    <div class="col-md-6">
                                        <label class="form-label">لون المركبة</label>
                                        <input type="text" class="form-control" name="vehicleColor" required>
                                    </div>
                                </div>
                            </div>

                            <!-- المستمسكات -->
                            <div class="registration-section mb-4">
                                <h6 class="section-title">المستمسكات</h6>
                                <div class="row g-3">
                                    <div class="col-md-6">
                                        <label class="form-label">صورة الهوية الوجه الأمامي</label>
                                        <div class="document-upload"
                                            onclick="document.getElementById('idFront').click()">
                                            <div class="upload-placeholder">
                                                <i class="fas fa-id-card"></i>
                                                <span>اضغط للرفع</span>
                                            </div>
                                            <img id="idFrontPreview" src="#" alt="">
                                        </div>
                                        <input type="file" id="idFront" accept="image/*" style="display: none;"
                                            onchange="previewDocument(this, 'idFrontPreview')" required>
                                    </div>
                                    <div class="col-md-6">
                                        <label class="form-label">صورة الهوية الوجه الخلفي</label>
                                        <div class="document-upload"
                                            onclick="document.getElementById('idBack').click()">
                                            <div class="upload-placeholder">
                                                <i class="fas fa-id-card"></i>
                                                <span>اضغط للرفع</span>
                                            </div>
                                            <img id="idBackPreview" src="#" alt="">
                                        </div>
                                        <input type="file" id="idBack" accept="image/*" style="display: none;"
                                            onchange="previewDocument(this, 'idBackPreview')" required>
                                    </div>
                                    <div class="col-md-6">
                                        <label class="form-label">إجازة السوق الوجه الأمامي</label>
                                        <div class="document-upload"
                                            onclick="document.getElementById('licenseFront').click()">
                                            <div class="upload-placeholder">
                                                <i class="fas fa-id-card"></i>
                                                <span>اضغط للرفع</span>
                                            </div>
                                            <img id="licenseFrontPreview" src="#" alt="">
                                        </div>
                                        <input type="file" id="licenseFront" accept="image/*" style="display: none;"
                                            onchange="previewDocument(this, 'licenseFrontPreview')" required>
                                    </div>
                                    <div class="col-md-6">
                                        <label class="form-label">إجازة السوق الوجه الخلفي</label>
                                        <div class="document-upload"
                                            onclick="document.getElementById('licenseBack').click()">
                                            <div class="upload-placeholder">
                                                <i class="fas fa-id-card"></i>
                                                <span>اضغط للرفع</span>
                                            </div>
                                            <img id="licenseBackPreview" src="#" alt="">
                                        </div>
                                        <input type="file" id="licenseBack" accept="image/*" style="display: none;"
                                            onchange="previewDocument(this, 'licenseBackPreview')" required>
                                    </div>
                                </div>
                            </div>

                            <!-- معلومات السكن -->
                            <div class="registration-section mb-4">
                                <h6 class="section-title">معلومات السكن</h6>
                                <div class="row g-3">
                                    <div class="col-md-6">
                                        <label class="form-label">المحافظة</label>
                                        <select class="form-select" name="province" onchange="loadAreas(this.value)"
                                            required>
                                            <option value="">اختر المحافظة</option>
                                            <!-- سيتم ملء الخيارات بواسطة JavaScript -->
                                        </select>
                                    </div>
                                    <div class="col-md-6">
                                        <label class="form-label">المنطقة</label>
                                        <select class="form-select" name="area" required>
                                            <option value="">اختر المنطقة</option>
                                            <!-- سيتم ملء الخيارات بواسطة JavaScript -->
                                        </select>
                                    </div>
                                    <div class="col-12">
                                        <label class="form-label">العنوان التفصيلي</label>
                                        <textarea class="form-control" name="address" rows="2" required></textarea>
                                    </div>
                                </div>
                            </div>

                            <div class="text-center mt-4">
                                <button type="submit" class="btn btn-primary btn-lg px-5">
                                    <i class="fas fa-user-plus me-2"></i>
                                    تسجيل
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
        <select id="driverLocation" class="form-control" required>
        </select>
        <div id="locationOptions">
            <!-- other elements -->
        </div>
        <!-- نافذة تسجيل المستخدم -->
        <div class="modal fade" id="userRegistrationModal" tabindex="-1">
            <div class="modal-dialog modal-lg modal-dialog-scrollable">
                <div class="modal-content">
                    <div class="modal-header">
                        <div class="text-center w-100">
                            <img src="https://firebasestorage.googleapis.com/v0/b/messageemeapp.appspot.com/o/driver-images%2F7605a607-6cf8-4b32-aee1-fa7558c98452.png?alt=media&token=5cf9e67c-ba6e-4431-a6a0-79dede15b527"
                                alt="شعار التطبيق" style="height: 60px;">
                            <h5 class="modal-title mt-2">تسجيل مستخدم جديد</h5>
                        </div>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <form id="userRegistrationForm" class="needs-validation" novalidate>
                            <!-- المعلومات الشخصية -->
                            <div class="registration-section mb-4">
                                <h6 class="section-title">المعلومات الشخصية</h6>
                                <div class="row g-3">
                                    <div class="col-12">
                                        <div class="text-center mb-3">
                                            <div class="user-photo-upload"
                                                onclick="document.getElementById('userPhoto').click()">
                                                <img id="userPhotoPreview" src="#" alt="">
                                                <div class="upload-placeholder">
                                                    <i class="fas fa-camera"></i>
                                                    <span>صورة شخصية</span>
                                                </div>
                                            </div>
                                            <input type="file" id="userPhoto" accept="image/*" style="display: none;"
                                                onchange="previewUserPhoto(this)">
                                        </div>
                                    </div>
                                    <div class="col-md-12">
                                        <label class="form-label">الاسم الثلاثي</label>
                                        <input type="text" class="form-control" name="fullName" required>
                                    </div>
                                    <div class="col-md-6">
                                        <label class="form-label">البريد الإلكتروني</label>
                                        <input type="email" class="form-control" name="email" required>
                                    </div>
                                    <div class="col-md-6">
                                        <label class="form-label">رقم الهاتف</label>
                                        <input type="tel" class="form-control" name="phone" required>
                                    </div>
                                    <div class="col-md-6">
                                        <label class="form-label">كلمة المرور</label>
                                        <input type="password" class="form-control" name="password" required>
                                    </div>
                                    <div class="col-md-6">
                                        <label class="form-label">تأكيد كلمة المرور</label>
                                        <input type="password" class="form-control" name="confirmPassword" required>
                                    </div>
                                </div>
                            </div>

                            <!-- معلومات السكن -->
                            <div class="registration-section mb-4">
                                <h6 class="section-title">معلومات السكن</h6>
                                <div class="row g-3">
                                    <div class="col-md-6">
                                        <label class="form-label">المحافظة</label>
                                        <select class="form-select" name="province" onchange="loadAreas(this.value)"
                                            required>
                                            <option value="">اختر المحافظة</option>
                                            <!-- سيتم ملء الخيارات عبر JavaScript -->
                                        </select>
                                    </div>
                                    <div class="col-md-6">
                                        <label class="form-label">المنطقة</label>
                                        <select class="form-select" name="area" required>
                                            <option value="">اختر المنطقة</option>
                                            <!-- سيتم ملء الخيارات عبر JavaScript -->
                                        </select>
                                    </div>
                                    <div class="col-12">
                                        <label class="form-label">العنوان التفصيلي</label>
                                        <textarea class="form-control" name="address" rows="2" required></textarea>
                                    </div>
                                </div>
                            </div>

                            <!-- الشروط والأحكام -->
                            <div class="form-check mb-3">
                                <input class="form-check-input" type="checkbox" name="terms" id="terms" required>
                                <label class="form-check-label" for="terms">
                                    أوافق على <a href="#" data-bs-toggle="modal" data-bs-target="#termsModal">الشروط
                                        والأحكام</a>
                                </label>
                            </div>

                            <div class="text-center mt-4">
                                <button type="submit" class="btn btn-primary btn-lg px-5">
                                    <i class="fas fa-user-plus me-2"></i>
                                    تسجيل
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
        <!-- إضافة قبل نهاية div#map -->
        <button id="nearbySearchBtn" class="nearby-search-btn" title="البحث عن السائقين في الجوار">
            <i class="fas fa-search"></i>
        </button>

        <div class="radius-control" style="display: none;">
            <label>نطاق البحث: <span id="radiusValue">5</span> كم</label>
            <input type="range" id="radiusSlider" min="1" max="20" value="5">
        </div>
        <div id="nearbyResults" class="nearby-results" style="display: none;">
            <div class="nearby-results-header">
                <h3>السائقين في الجوار</h3>
                <button class="close-results">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="nearby-results-content"></div>
        </div>

        <script>
            function createDriverCard(driver, key) {
                // التحقق من حالة الموافقة والنشاط
                const isApproved = driver.approved === true;
                const isPending = driver.approvalStatus === 'pending';
                const isActive = driver.active && isApproved;

                // تحديد نص وألوان الحالة
                const statusText = !isApproved ? (isPending ? 'قيد المراجعة' : 'غير مفعل') : 
                                  (isActive ? 'متاح' : 'مشغول');
                const statusColor = !isApproved ? '#FFD700' : (isActive ? '#2ECC40' : '#FF4136');

                // تحديد حالة التعتيم للبطاقة
                const cardOpacity = isApproved ? '1' : '0.7';

                return `
                    <div class="driver-card ${isApproved ? 'approved' : (isPending ? 'pending' : 'not-approved')}" data-driver-id="${key}" style="opacity: ${cardOpacity}">
                        <div class="driver-image-container">
                            <img src="${driver.imageUrl || 'https://firebasestorage.googleapis.com/v0/b/messageemeapp.appspot.com/o/driver-images%2F7605a607-6cf8-4b32-aee1-fa7558c98452.png?alt=media&token=5cf9e67c-ba6e-4431-a6a0-79dede15b527'}" class="driver-image">
                        </div>
                        <div class="driver-info">
                            <h3 class="driver-name">${driver.name || 'اسم غير متوفر'}</h3>
                            <p class="driver-status" style="color: ${statusColor};">${statusText}</p>
                        </div>
                        <div class="driver-actions">
                            <button class="btn btn-primary" onclick="openChatWindow('${key}')" ${!isApproved ? 'disabled' : ''}>مراسلة السائق</button>
                            <button class="btn btn-secondary" onclick="bookDriver('${key}')" ${!isApproved ? 'disabled' : ''}>حجز</button>
                        </div>
                    </div>
                `;
            }
        </script>


        <!-- Scripts -->
        <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.2/js/bootstrap.bundle.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/leaflet.js"></script>
        <script src="https://www.gstatic.com/firebasejs/8.10.0/firebase-app.js"></script>
        <script src="https://www.gstatic.com/firebasejs/8.10.0/firebase-database.js"></script>
        <script src="https://www.gstatic.com/firebasejs/8.10.0/firebase-storage.js"></script>
        <script src="https://www.gstatic.com/firebasejs/8.10.0/firebase-auth.js"></script>



        <script src="https://www.gstatic.com/firebasejs/8.10.0/firebase-messaging.js"></script>

        <script>


            const firebaseConfig = {
                apiKey: "AIzaSyDGpAHia_wEmrhnmYjrPf1n1TrAzwEMiAI",
                authDomain: "messageemeapp.firebaseapp.com",
                databaseURL: "https://messageemeapp-default-rtdb.firebaseio.com",
                projectId: "messageemeapp",
                storageBucket: "messageemeapp.appspot.com",
                messagingSenderId: "255034474844",
                appId: "1:255034474844:web:5e3b7a6bc4b2fb94cc4199"
            };

            // Initialize Firebase
            firebase.initializeApp(firebaseConfig);

            const database = firebase.database();
            const storage = firebase.storage();
            const messaging = firebase.messaging();

            // Request notification permission
            // Enhanced notification handling
            class NotificationHandler {
                constructor() {
                    this.messaging = firebase.messaging();
                    this.hasPermission = false;
                }

                async initialize() {
                    try {
                        // محاولة تسجيل Service Worker
                        // يجب تحديث جميع المسارات لتتضمن /Al-Pasha/
                        // مثلاً في ملف firebase-messaging-sw.js
                        if ('serviceWorker' in navigator) {
                            navigator.serviceWorker.register('https://alqasimmall.github.io/taxialpasha/firebase-messaging-sw.js', {
                                scope: 'https://alqasimmall.github.io/taxialpasha/firebase-messaging-sw.js'
                            })
                        }

                        await this.checkNotificationSupport();
                        await this.requestPermission();
                        await this.setupMessaging();
                    } catch (error) {
                        console.error('Notification initialization error:', error);
                        this.handlePermissionError(error);
                    }
                }

                async checkNotificationSupport() {
                    if (!('Notification' in window)) {
                        throw new Error('This browser does not support notifications');
                    }
                }

                async requestPermission() {
                    try {
                        const permission = await Notification.requestPermission();

                        if (permission === 'granted') {
                            this.hasPermission = true;
                            return true;
                        } else if (permission === 'denied') {
                            throw new Error('notification_blocked');
                        } else {
                            throw new Error('notification_dismissed');
                        }
                    } catch (error) {
                        throw error;
                    }
                }

                async setupMessaging() {
                    if (!this.hasPermission) return;

                    try {
                        // استخدام Service Worker المسجل
                        await this.messaging.getToken({
                            vapidKey: 'BI9cpoewcZa1ftyZ_bGjO0GYa4_cT0HNja4YFd6FwLwHg5c0gQ5iSj_MJZRhMxKdgJ0-d-_rEXcpSQ_cx7GqCSc',
                            serviceWorkerRegistration: this.swRegistration
                        });

                        // إعداد معالج الرسائل
                        this.messaging.onMessage((payload) => {
                            console.log('Received foreground message:', payload);
                            this.showNotification(payload);
                        });
                    } catch (error) {
                        console.error('Error setting up messaging:', error);
                        throw error;
                    }
                }

                async saveTokenToDatabase(token) {
                    if (!userId) return;

                    try {
                        await database.ref('tokens/' + userId).set({ token: token });
                    } catch (error) {
                        console.error('Error saving token:', error);
                    }
                }

                setupMessageHandler() {
                    this.messaging.onMessage((payload) => {
                        this.showNotification(payload);
                    });
                }

                showNotification(payload) {
                    if (!this.hasPermission) return;

                    try {
                        // Try using the Notification API
                        new Notification(payload.notification.title, {
                            body: payload.notification.body,
                            icon: payload.notification.icon || '/default-icon.png',
                            badge: '/badge-icon.png',
                            tag: payload.data?.notificationId || 'default',
                            data: payload.data
                        });
                    } catch (error) {
                        // Fallback to custom toast notification
                        this.showCustomToast(payload.notification);
                    }
                }

                showCustomToast(notification) {
                    const toast = document.createElement('div');
                    toast.className = 'notification-toast animate__animated animate__fadeInRight';
                    toast.innerHTML = `
          <div class="notification-content">
              <h4>${notification.title}</h4>
              <p>${notification.body}</p>
          </div>
          <button onclick="this.parentElement.remove()" class="close-btn">&times;</button>
      `;
                    document.body.appendChild(toast);

                    setTimeout(() => {
                        toast.classList.replace('animate__fadeInRight', 'animate__fadeOutRight');
                        setTimeout(() => toast.remove(), 300);
                    }, 5000);
                }

                handlePermissionError(error) {
                    let message;

                    switch (error.message) {
                        case 'notification_blocked':
                            message = 'التنبيهات محظورة. يرجى تفعيلها من إعدادات المتصفح';
                            this.showPermissionInstructions();
                            break;
                        case 'notification_dismissed':
                            message = 'لم يتم منح إذن التنبيهات. يمكنك تفعيلها لاحقاً من الإعدادات';
                            break;
                        default:
                            message = 'حدث خطأ في إعداد التنبيهات';
                    }

                    showToast(message, 'warning');
                }

                showPermissionInstructions() {
                    Swal.fire({
                        title: 'تفعيل التنبيهات',
                        html: `
              <div class="permission-instructions">
                  <p>لتلقي التنبيهات، يرجى اتباع الخطوات التالية:</p>
                  <ol>
                      <li>انقر على أيقونة القفل في شريط العنوان</li>
                      <li>ابحث عن إعدادات "التنبيهات"</li>
                      <li>قم بتغيير الإعداد إلى "السماح"</li>
                  </ol>
              </div>
          `,
                        icon: 'info',
                        confirmButtonText: 'فهمت'
                    });
                }
            }

            // Initialize notifications
            const notificationHandler = new NotificationHandler();
            notificationHandler.initialize().catch(console.error);


            // Initialize user ID
            let userId;
            if (!localStorage.getItem('userId')) {
                userId = generateUUID();
                localStorage.setItem('userId', userId);
            } else {
                userId = localStorage.getItem('userId');
            }

            // Generate unique user ID
            function generateUUID() {
                return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
                    const r = (Math.random() * 16) | 0,
                        v = c === 'x' ? r : (r & 0x3) | 0x8;
                    return v.toString(16);
                });
            }

            // Other application-specific logic
            let map;
            let markers = [];
            let userMarker;
            let userLocation = null;
            let markerLayer;
            let isLoadingDrivers = false; // للتحكم في حالة تحميل البيانات
            let isViewingDriverLocation = false; // لتعطيل تحديث موقع المستخدم عند عرض موقع السائق
            let currentDriverId = null;
            let currentChatDriverId = null;

            // Example: Fetch drivers from database
            function fetchDrivers() {
                if (isLoadingDrivers) return;
                isLoadingDrivers = true;

                database.ref('drivers').once('value', (snapshot) => {
                    const drivers = snapshot.val();
                    console.log(drivers);
                    isLoadingDrivers = false;
                });
            }

            fetchDrivers(); // Load drivers on page load



            let currentDriverImage = ''; // متغير لصورة السائق
            let currentDriverName = '';  // متغير لاسم السائق
            let currentDriverCard = '';  // متغير لبطاقة السائق

            function openChatWindow(driverId, driverImage, driverName, driverCard) {
                currentChatDriverId = driverId;
                currentDriverImage = driverImage;
                currentDriverName = driverName;
                currentDriverCard = driverCard;

                // تحديث بيانات السائق في النافذة
                document.getElementById('driverImage').src = driverImage;
                document.getElementById('driverName').innerText = driverName;
                document.getElementById('driverCardInfo').innerText = `بطاقة: ${driverCard}`;

                // إعادة ضبط النافذة: إظهار إدخال الرحلة وإخفاء الرسائل
                document.getElementById('tripSelection').classList.remove('d-none');
                document.querySelector('.chat-footer').classList.add('d-none');
                document.getElementById('chatMessages').classList.add('d-none');

                // إظهار النافذة
                const chatModal = new bootstrap.Modal(document.getElementById('chatModal'));
                chatModal.show();
            }

            function confirmTrip() {
                const tripCount = document.getElementById('tripCount').value;
                const tripDestination = document.getElementById('tripDestination').value;
                const tripType = document.getElementById('tripType').value;
                const tripDays = ["الأحد", "الإثنين", "الثلاثاء"];

                if (tripCount > 0 && tripDestination) {
                    const tripData = {
                        tripCount: tripCount,
                        tripDestination: tripDestination,
                        tripType: tripType,
                        tripDays: tripDays,
                        timestamp: Date.now()
                    };

                    // إضافة بيانات الرحلة
                    database.ref(`chats/${userId}/${currentChatDriverId}/trips`).push(tripData)
                        .then(() => {
                            // تحديث عدد الرحلات للسائق
                            return database.ref(`drivers/${currentChatDriverId}`).transaction((driver) => {
                                if (driver) {
                                    driver.trips = (driver.trips || 0) + 1;
                                }
                                return driver;
                            });
                        })
                        .then(() => {
                            alert('تم تأكيد الرحلة بنجاح!');
                            document.getElementById('tripSelection').classList.add('d-none');
                            document.querySelector('.chat-footer').classList.remove('d-none');
                            document.getElementById('chatMessages').classList.remove('d-none');
                            loadMessages();
                            loadDrivers(); // تحديث بطاقة السائق
                        })
                        .catch((error) => {
                            console.error("Error saving trip:", error);
                        });
                } else {
                    alert('يرجى إدخال جميع البيانات بشكل صحيح.');
                }
            }

            function addRating(driverId) {
                database.ref(`drivers/${driverId}`).transaction((driver) => {
                    if (driver) {
                        // زيادة التقييم تدريجياً
                        const currentRating = driver.rating || 5;
                        const tripsCount = driver.trips || 0;

                        // معادلة لحساب التقييم الجديد
                        // كلما زاد عدد الرحلات، زاد التقييم بشكل أبطأ
                        const newRating = Math.min(5, currentRating + (0.1 / Math.sqrt(tripsCount + 1)));

                        driver.rating = parseFloat(newRating.toFixed(1));
                    }
                    return driver;
                }).then(() => {
                    showToast('تم إضافة التقييم بنجاح');
                    loadDrivers(); // تحديث بطاقة السائق
                }).catch((error) => {
                    console.error('Error updating rating:', error);
                    showToast('حدث خطأ في تحديث التقييم', 'error');
                });
            }

            function loadTrips() {
                const tripsContainer = document.getElementById('tripsList');
                tripsContainer.innerHTML = ''; // مسح الرحلات السابقة

                database.ref(`chats/${userId}/${currentChatDriverId}/trips`).on('child_added', (snapshot) => {
                    const trip = snapshot.val();
                    const tripDiv = document.createElement('div');
                    tripDiv.className = 'trip-details';
                    tripDiv.innerHTML = `
            <p>عدد المشاوير: ${trip.tripCount}</p>
            <p>الوجهة: ${trip.tripDestination}</p>
            <p>نوع الرحلة: ${trip.tripType}</p>
            <p>الأيام: ${trip.tripDays.join(', ')}</p>
            <p>التاريخ: ${new Date(trip.timestamp).toLocaleString()}</p>
        `;
                    tripsContainer.appendChild(tripDiv);
                });
            }



            function sendMessage() {
                const messageInput = document.getElementById('chatInput');
                const messageText = messageInput.value.trim();

                if (messageText) {
                    database.ref(`chats/${userId}/${currentChatDriverId}/messages`).push({
                        sender: userId,
                        text: messageText,
                        timestamp: Date.now()
                    });
                    messageInput.value = ''; // تفريغ حقل الإدخال
                }
            }


            function loadMessages() {
                const chatBox = document.getElementById('chatMessages');
                chatBox.innerHTML = '';

                database.ref(`chats/${userId}/${currentChatDriverId}/messages`).on('child_added', (snapshot) => {
                    const message = snapshot.val();
                    const messageDiv = document.createElement('div');
                    messageDiv.className = 'message';
                    messageDiv.innerHTML = `
            <div class="message-bubble ${message.sender === userId ? 'sent' : 'received'}">
                <p>${message.text}</p>
                <span class="timestamp">${new Date(message.timestamp).toLocaleTimeString()}</span>
            </div>
        `;
                    chatBox.appendChild(messageDiv);
                    chatBox.scrollTop = chatBox.scrollHeight;
                });
            }


            // استدعاء نافذة المحادثة مع تحديث اسم وصورة السائق
            // استدعاء نافذة المحادثة مع تحديث اسم وصورة السائق
            function openChatWindow(driverId) {
                console.log('Opening chat for driver:', driverId); // للتأكد من وصول معرف السائق
                currentChatDriverId = driverId;
                showLoading();

                database.ref(`drivers/${driverId}`).once('value')
                    .then(snapshot => {
                        const driverData = snapshot.val();
                        console.log('Driver Data:', driverData); // للتأكد من البيانات المستلمة

                        if (driverData) {
                            // الوصول المباشر إلى الصورة من البيانات الرئيسية
                            const imageUrl = driverData.imageUrl || 'https://firebasestorage.googleapis.com/v0/b/messageemeapp.appspot.com/o/driver-images%2F7605a607-6cf8-4b32-aee1-fa7558c98452.png?alt=media&token=5cf9e67c-ba6e-4431-a6a0-79dede15b527';
                            // الوصول إلى الاسم من coordinates
                            const name = driverData?.name || 'اسم غير متوفر';
                            // معلومات السيارة من البيانات الرئيسية
                            const carInfo = `${driverData.carType || ''} - ${driverData.carModel || ''}`;

                            // تحديث واجهة المستخدم
                            const chatModal = document.getElementById('chatModal');
                            if (chatModal) {
                                const driverImageElement = chatModal.querySelector('#driverImage');
                                const driverNameElement = chatModal.querySelector('#driverName');
                                const driverCardInfoElement = chatModal.querySelector('#driverCardInfo');

                                if (driverImageElement) {
                                    driverImageElement.src = imageUrl;
                                    console.log('Setting image URL:', imageUrl); // للتأكد من الرابط
                                }
                                if (driverNameElement) driverNameElement.textContent = name;
                                if (driverCardInfoElement) driverCardInfoElement.textContent = carInfo;

                                // إعادة تعيين حالة المحادثة
                                const tripSelection = chatModal.querySelector('#tripSelection');
                                const chatFooter = chatModal.querySelector('.chat-footer');
                                const chatMessages = chatModal.querySelector('#chatMessages');

                                if (tripSelection) tripSelection.classList.remove('d-none');
                                if (chatFooter) chatFooter.classList.add('d-none');
                                if (chatMessages) {
                                    chatMessages.classList.add('d-none');
                                    chatMessages.innerHTML = '';
                                }

                                // إظهار النافذة المنبثقة
                                const modalInstance = new bootstrap.Modal(chatModal);
                                modalInstance.show();
                            }
                        } else {
                            showToast('لم يتم العثور على بيانات السائق', 'error');
                        }
                    })
                    .catch(error => {
                        console.error('Error fetching driver data:', error);
                        showToast('حدث خطأ في تحميل بيانات السائق', 'error');
                    })
                    .finally(() => {
                        hideLoading();
                    });
            }

            function createDriverCard(driver, driverId) {
                return `
        <div class="driver-card">
            <div class="driver-image-container">
                <img src="${driver.imageUrl || 'https://firebasestorage.googleapis.com/v0/b/messageemeapp.appspot.com/o/driver-images%2F7605a607-6cf8-4b32-aee1-fa7558c98452.png?alt=media&token=5cf9e67c-ba6e-4431-a6a0-79dede15b527'}" class="driver-image">
            </div>
            <div class="driver-info">
                <h3 class="driver-name">${driver.name || 'اسم غير متوفر'}</h3>
                <button class="btn btn-primary" onclick="openChatWindow('${driverId}')">فتح المحادثة</button>
            </div>
        </div>
    `;
            }

            function viewDriverLocation(driverId) {
    database.ref(`drivers/${driverId}`).once('value', (snapshot) => {
        const driver = snapshot.val();
        if (driver && driver.coordinates) {
            // التحقق من حالة الموافقة
            const isApproved = driver.approved === true;
            const isPending = driver.approvalStatus === 'pending';
            const { lat, lng } = driver.coordinates;

            map.flyTo([lat, lng], 15, {
                animate: true,
                duration: 1.5
            });

            markerLayer.clearLayers();

            // تعديل مظهر العلامة حسب حالة الموافقة
            const driverMarker = L.marker([lat, lng], {
                icon: L.divIcon({
                    html: `
                        <div style="position: relative; text-align: center;" class="${isApproved ? 'approved' : (isPending ? 'pending' : 'not-approved')}">
                            <img src="${driver.imageUrl || 'https://firebasestorage.googleapis.com/v0/b/messageemeapp.appspot.com/o/driver-images%2F7605a607-6cf8-4b32-aee1-fa7558c98452.png?alt=media&token=5cf9e67c-ba6e-4431-a6a0-79dede15b527'}" 
                                 alt="صورة السائق" 
                                 style="width: 50px; height: 50px; border: 3px solid #FFD700; 
                                 border-radius: 50%; box-shadow: 0 4px 10px rgba(0,0,0,0.3);
                                 filter: ${!isApproved ? 'grayscale(100%)' : 'none'};
                                 opacity: ${!isApproved ? '0.7' : '1'};">
                            <i class="fas fa-taxi" 
                               style="position: absolute; bottom: -5px; right: 50%; transform: translateX(50%); 
                               color: ${isApproved ? '#FFD700' : '#999'}; font-size: 1.5rem;"></i>
                            ${!isApproved ? `
                            <div class="status-badge" style="position: absolute; top: -10px; right: -10px; 
                                 background: ${isPending ? '#FFD700' : '#dc3545'}; color: ${isPending ? '#000' : '#fff'};
                                 padding: 3px 8px; border-radius: 10px; font-size: 0.7rem; font-weight: bold;">
                                ${isPending ? 'قيد المراجعة' : 'غير مفعل'}
                            </div>` : ''}
                        </div>
                    `,
                    className: 'driver-marker',
                    iconSize: [60, 60],
                }),
            }).addTo(markerLayer);

            // تحديث محتوى النافذة المنبثقة
            const popupContent = `
                <div style="text-align: center; font-family: 'Segoe UI', sans-serif; min-width: 200px; 
                     background: #000000; border-radius: 10px; padding: 15px; box-shadow: 0 4px 15px rgba(0,0,0,0.3);">
                    ${!isApproved ? `
                    <div class="status-banner" style="background: ${isPending ? '#FFD700' : '#dc3545'}; 
                         color: ${isPending ? '#000' : '#fff'}; padding: 5px; margin: -15px -15px 15px -15px; 
                         border-radius: 10px 10px 0 0; font-weight: bold;">
                        ${isPending ? 'هذا السائق قيد المراجعة' : 'هذا السائق غير مفعل حالياً'}
                    </div>
                    ` : ''}
                    
                    <div class="driver-popup-header" style="margin-bottom: 10px;">
                        <img src="${driver.imageUrl || 'https://firebasestorage.googleapis.com/v0/b/messageemeapp.appspot.com/o/driver-images%2F7605a607-6cf8-4b32-aee1-fa7558c98452.png?alt=media&token=5cf9e67c-ba6e-4431-a6a0-79dede15b527'}" 
                             alt="صورة السائق" 
                             style="width: 80px; height: 80px; border-radius: 50%; border: 3px solid #FFD700; 
                             margin-bottom: 10px; box-shadow: 0 4px 10px rgba(0,0,0,0.2);
                             filter: ${!isApproved ? 'grayscale(100%)' : 'none'};">
                        <h5 style="color: #FFFFFF; font-weight: bold; margin: 8px 0;">${driver.name}</h5>
                    </div>
                    
                    <div class="driver-popup-stats" style="display: grid; grid-template-columns: repeat(2, 1fr); gap: 8px; margin-bottom: 15px;">
                        <div style="text-align: center;">
                            <div style="font-weight: bold; color: #FFD700;">
                                <i class="fas fa-star"></i> ${driver.rating ? driver.rating.toFixed(1) : '5.0'}
                            </div>
                            <div style="font-size: 0.8rem; color: #FFFFFF;">التقييم</div>
                        </div>
                        <div style="text-align: center;">
                            <div style="font-weight: bold; color: #FFD700;">
                                <i class="fas fa-route"></i> ${driver.trips || 0}
                            </div>
                            <div style="font-size: 0.8rem; color: #FFFFFF;">الرحلات</div>
                        </div>
                    </div>
                    
                    <div class="driver-popup-info" style="margin-bottom: 15px; text-align: right; color: #FFFFFF;">
                        <p style="margin: 5px 0;">
                            <i class="fas fa-car" style="color: #FFD700; margin-left: 5px;"></i>
                            ${driver.carType} - ${driver.carModel}
                        </p>
                        <p style="margin: 5px 0;">
                            <i class="fas fa-map-marker-alt" style="color: #FFD700; margin-left: 5px;"></i>
                            ${driver.location}
                        </p>
                        <p style="margin: 5px 0;">
                            <i class="fas fa-phone" style="color: #FFD700; margin-left: 5px;"></i>
                            ${driver.phone}
                        </p>
                    </div>
            
                    <div class="driver-popup-actions" style="display: grid; grid-template-columns: 1fr; gap: 8px;">
                        <button onclick="openChatWindow('${driverId}')" 
                                style="background: #FFD700; color: #333; border: none; padding: 8px 15px; 
                                border-radius: 20px; cursor: ${isApproved ? 'pointer' : 'not-allowed'}; 
                                font-weight: bold; display: flex; align-items: center; justify-content: center; 
                                gap: 5px; transition: all 0.3s ease; opacity: ${isApproved ? '1' : '0.5'};"
                                ${!isApproved ? 'disabled' : ''}>
                            <i class="fas fa-comment"></i>
                            ${isApproved ? 'مراسلة السائق' : 'غير متاح حالياً'}
                        </button>
                    </div>
                </div>
            `;

            driverMarker.bindPopup(popupContent, {
                maxWidth: 300,
                className: 'custom-popup'
            }).openPopup();

            scrollToMap();

            // تعديل رسالة التأكيد حسب حالة الموافقة
            if (isApproved) {
                Swal.fire({
                    title: '🚖 تم تحديد موقع السائق!',
                    html: `
                        <p style="font-size: 1rem; color: #555;">
                            السائق <b>${driver.name}</b> بانتظارك.
                        </p>
                        <p style="color: #666;">هل ترغب بمراسلته الآن؟</p>
                    `,
                    icon: 'success',
                    showCancelButton: true,
                    confirmButtonColor: '#FFD700',
                    cancelButtonColor: '#6c757d',
                    confirmButtonText: '📨 نعم، مراسلة السائق',
                    cancelButtonText: '❌ إغلاق',
                }).then((result) => {
                    if (result.isConfirmed) {
                        openChatWindow(driverId);
                    }
                });
            } else {
                Swal.fire({
                    title: 'تنبيه!',
                    html: `
                        <p style="font-size: 1rem; color: #555;">
                            السائق <b>${driver.name}</b> ${isPending ? 'قيد المراجعة' : 'غير مفعل حالياً'}.
                        </p>
                        <p style="color: #666;">لا يمكن التواصل مع السائق حتى يتم تفعيل حسابه.</p>
                    `,
                    icon: 'warning',
                    confirmButtonColor: '#6c757d',
                    confirmButtonText: 'حسناً'
                });
            }
        } else {
            showToast('لم يتم العثور على موقع السائق.', 'error');
        }
    });
}

            // تحسين دالة initMap لدعم تبديل الطبقات
            function initMap() {
                const defaultLocation = [33.3152, 44.3661]; // بغداد

                map = L.map('map', {
                    center: defaultLocation,
                    zoom: 8,
                    zoomControl: false


                });

                // تعريف طبقات الخريطة المختلفة
                const layers = {
                    // خريطة الشوارع الأساسية
                    street: L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                        attribution: '© OpenStreetMap contributors',
                        maxZoom: 19
                    }),

                    // خريطة القمر الصناعي من ESRI
                    satellite: L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}', {
                        attribution: '© Esri',
                        maxZoom: 19
                    }),

                    // خريطة التضاريس من ESRI
                    terrain: L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/World_Topo_Map/MapServer/tile/{z}/{y}/{x}', {
                        attribution: '© Esri',
                        maxZoom: 19
                    }),

                    // خريطة OpenTopoMap للتضاريس (بديل)
                    topoMap: L.tileLayer('https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png', {
                        attribution: '© OpenTopoMap',
                        maxZoom: 17
                    }),

                    // خريطة ليلية من CartoDB
                    dark: L.tileLayer('https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png', {
                        attribution: '© CartoDB',
                        maxZoom: 19
                    }),

                    // خريطة Thunderforest Outdoors (تتطلب API key)
                    outdoors: L.tileLayer('https://{s}.tile.thunderforest.com/outdoors/{z}/{x}/{y}.png?apikey=YOUR_API_KEY', {
                        attribution: '© Thunderforest',
                        maxZoom: 19
                    })
                };

                // إضافة الطبقة الافتراضية
                layers.street.addTo(map);

                // إضافة زر التحكم بالطبقات مع خيارات متعددة
                L.control.layers({
                    "خريطة الشوارع": layers.street,
                    "قمر صناعي": layers.satellite,
                    "تضاريس": layers.terrain,
                    "خريطة طبوغرافية": layers.topoMap,
                    "خريطة ليلية": layers.dark
                }, null, {
                    position: 'topleft',
                    collapsed: true,
                    sortLayers: false
                }).addTo(map);

                // إضافة زر موقع المستخدم مع تصميم محسن
                const locationButton = L.control({ position: 'bottomright' });
                locationButton.onAdd = function () {
                    const btn = L.DomUtil.create('button', 'user-location-btn');
                    btn.innerHTML = '<i class="fas fa-location-arrow"></i>';
                    btn.title = 'تحديد موقعك الحالي';
                    btn.onclick = function () {
                        getCurrentLocation();
                    };
                    return btn;
                };
                locationButton.addTo(map);

                // إضافة زر التكبير/التصغير
                L.control.zoom({
                    position: 'bottomright',
                    zoomInTitle: 'تكبير',
                    zoomOutTitle: 'تصغير'
                }).addTo(map);

                // إضافة مقياس الخريطة
                L.control.scale({
                    position: 'bottomleft',
                    metric: true,
                    imperial: false,
                    maxWidth: 200
                }).addTo(map);

                // إضافة طبقات الخريطة
                markerLayer = L.layerGroup().addTo(map);
                routeLayer = L.layerGroup().addTo(map);

                // إضافة مستمع لتغيير الطبقة
                map.on('baselayerchange', function (e) {
                    console.log('تم تغيير نوع الخريطة إلى:', e.name);
                    // يمكنك إضافة أي منطق إضافي هنا عند تغيير نوع الخريطة
                });
            }

            // دالة تحديد موقع المستخدم محسنة
            async function getCurrentLocation() {
                if (!navigator.geolocation) {
                    showToast('خدمة تحديد الموقع غير متوفرة في متصفحك', 'error');
                    return;
                }

                try {
                    showLoading();
                    const position = await new Promise((resolve, reject) => {
                        navigator.geolocation.getCurrentPosition(resolve, reject, {
                            enableHighAccuracy: true,
                            timeout: 10000,
                            maximumAge: 0
                        });
                    });

                    const { latitude: userLat, longitude: userLng } = position.coords;

                    // الحصول على العنوان التقريبي باستخدام Nominatim
                    const addressResponse = await fetch(
                        `https://nominatim.openstreetmap.org/reverse?lat=${userLat}&lon=${userLng}&format=json&accept-language=ar`
                    );
                    const addressData = await addressResponse.json();

                    // إنشاء أيقونة محسنة للموقع
                    const userIcon = L.divIcon({
                        html: `
                <div class="user-marker-container">
                    <i class="fas fa-user-circle"></i>
                    <div class="pulse"></div>
                </div>
            `,
                        className: 'user-marker',
                        iconSize: [40, 40]
                    });

                    // إنشاء محتوى النافذة المنبثقة المحسن
                    const popupContent = `
            <div class="location-popup">
                <div class="location-header">
                    <i class="fas fa-map-marker-alt"></i>
                    <h6>موقعك الحالي</h6>
                </div>
                <div class="location-details">
                    <div class="location-address">
                        <i class="fas fa-map"></i>
                        <span>${addressData.display_name || 'العنوان غير متوفر'}</span>
                    </div>
                    <div class="location-accuracy">
                        <i class="fas fa-crosshairs"></i>
                        <span>دقة تحديد الموقع: ${Math.round(position.coords.accuracy)} متر</span>
                    </div>
                </div>
            </div>
        `;

                    // تحديث أو إنشاء علامة الموقع
                    if (userMarker) {
                        userMarker.setLatLng([userLat, userLng]);
                        userMarker.setPopupContent(popupContent);
                    } else {
                        userMarker = L.marker([userLat, userLng], {
                            icon: userIcon,
                            zIndexOffset: 1000
                        })
                            .bindPopup(popupContent)
                            .addTo(map);
                    }

                    // تحريك الخريطة بتأثير حركي
                    map.flyTo([userLat, userLng], 16, {
                        duration: 1.5,
                        easeLinearity: 0.25
                    });

                    hideLoading();
                    showToast('تم تحديد موقعك بنجاح', 'success');

                    // تحديث الإحداثيات في النموذج إذا كان موجوداً
                    const latInput = document.getElementById('driverLatitude');
                    const lngInput = document.getElementById('driverLongitude');
                    if (latInput && lngInput) {
                        latInput.value = userLat;
                        lngInput.value = userLng;
                    }

                    return { lat: userLat, lng: userLng };
                } catch (error) {
                    hideLoading();
                    handleLocationError(error);
                    return null;
                }
            }

            // دالة رسم المسار محدثة لاستخدام OSRM
            async function drawRoute(fromLocation, toLocation) {
                try {
                    routeLayer.clearLayers();

                    const start = `${fromLocation.lng},${fromLocation.lat}`;
                    const end = `${toLocation.lng},${toLocation.lat}`;

                    const response = await fetch(
                        `https://router.project-osrm.org/route/v1/driving/${start};${end}?overview=full&geometries=geojson`
                    );

                    const data = await response.json();

                    if (data.code === 'Ok' && data.routes && data.routes[0]) {
                        const route = data.routes[0];
                        const coordinates = route.geometry.coordinates.map(coord => [coord[1], coord[0]]);

                        // رسم المسار مع تأثيرات حركية
                        const routeLine = L.polyline(coordinates, {
                            color: '#FFD700',
                            weight: 5,
                            opacity: 0.8,
                            lineCap: 'round',
                            lineJoin: 'round',
                            className: 'animated-route'
                        }).addTo(routeLayer);

                        // إضافة علامات البداية والنهاية مع تصميم محسن
                        const markers = {
                            start: {
                                latlng: [fromLocation.lat, fromLocation.lng],
                                icon: createMarkerIcon('start'),
                                popup: createPopupContent('نقطة الانطلاق', route.duration, 0)
                            },
                            end: {
                                latlng: [toLocation.lat, toLocation.lng],
                                icon: createMarkerIcon('end'),
                                popup: createPopupContent('نقطة الوصول', route.duration, route.distance)
                            }
                        };

                        // إضافة العلامات للخريطة
                        Object.values(markers).forEach(marker => {
                            L.marker(marker.latlng, { icon: marker.icon })
                                .bindPopup(marker.popup)
                                .addTo(routeLayer);
                        });

                        // تحريك الخريطة لإظهار المسار كاملاً
                        map.fitBounds(routeLine.getBounds(), {
                            padding: [50, 50],
                            animate: true,
                            duration: 1
                        });

                        // إضافة معلومات الرحلة
                        addRouteInfo({
                            distance: route.distance,
                            duration: route.duration,
                            startLocation: fromLocation,
                            endLocation: toLocation
                        });

                        return {
                            distance: route.distance,
                            duration: route.duration,
                            coordinates: coordinates
                        };
                    }

                    throw new Error('لم يتم العثور على مسار');
                } catch (error) {
                    console.error('Error drawing route:', error);
                    showToast('حدث خطأ في رسم المسار', 'error');
                    return null;
                }
            }

            // دالة إنشاء أيقونة العلامة
            function createMarkerIcon(type) {
                const colors = {
                    start: '#28a745',
                    end: '#dc3545'
                };

                const icons = {
                    start: 'map-marker-alt',
                    end: 'flag-checkered'
                };

                return L.divIcon({
                    html: `
            <div class="marker-icon ${type}-marker">
                <i class="fas fa-${icons[type]}" style="color: ${colors[type]}"></i>
            </div>
        `,
                    className: '',
                    iconSize: [40, 40],
                    iconAnchor: [20, 40]
                });
            }

            // دالة إنشاء محتوى النافذة المنبثقة
            function createPopupContent(title, duration, distance) {
                return `
        <div class="route-popup">
            <h6>${title}</h6>
            <p><i class="fas fa-clock"></i> ${formatDuration(duration)}</p>
            ${distance ? `<p><i class="fas fa-road"></i> ${formatDistance(distance)}</p>` : ''}
        </div>
    `;
            }

            // دالة إضافة معلومات المسار
            function addRouteInfo(info) {
                const container = document.createElement('div');
                container.className = 'route-info-container';
                container.innerHTML = `
        <div class="route-info">
            <h6>معلومات الرحلة</h6>
            <div class="info-item">
                <i class="fas fa-road"></i>
                <span>المسافة: ${formatDistance(info.distance)}</span>
            </div>
            <div class="info-item">
                <i class="fas fa-clock"></i>
                <span>الوقت المتوقع: ${formatDuration(info.duration)}</span>
            </div>
            <div class="info-item">
                <i class="fas fa-money-bill-wave"></i>
                <span>التكلفة التقريبية: ${calculateFare(info.distance)} د.ع</span>
            </div>
        </div>
    `;

                // إضافة المعلومات للخريطة
                const control = L.control({ position: 'bottomleft' });
                control.onAdd = () => container;
                control.addTo(map);




            }

            // دوال مساعدة لتنسيق المسافة والوقت
            function formatDistance(meters) {
                return meters >= 1000
                    ? `${(meters / 1000).toFixed(1)} كم`
                    : `${Math.round(meters)} متر`;
            }

            function formatDuration(seconds) {
                const hours = Math.floor(seconds / 3600);
                const minutes = Math.floor((seconds % 3600) / 60);

                if (hours > 0) {
                    return `${hours} ساعة ${minutes} دقيقة`;
                }
                return `${minutes} دقيقة`;
            }

            // دالة حساب التكلفة التقريبية
            function calculateFare(distance) {
                const baseRate = 5000; // السعر الأساسي
                const ratePerKm = 1000; // السعر لكل كيلومتر
                const distanceInKm = distance / 1000;

                return Math.round(baseRate + (distanceInKm * ratePerKm)).toLocaleString();
            }

            // دالة معالجة أخطاء تحديد الموقع
            function handleLocationError(error) {
                let message = 'حدث خطأ في تحديد الموقع';

                switch (error.code) {
                    case error.PERMISSION_DENIED:
                        message = 'تم رفض الوصول إلى خدمة تحديد الموقع';
                        break;
                    case error.POSITION_UNAVAILABLE:
                        message = 'معلومات الموقع غير متوفرة';
                        break;
                    case error.TIMEOUT:
                        message = 'انتهت مهلة طلب تحديد الموقع';
                        break;
                }

                showToast(message, 'error');
            }
            function updateUserLocation(position) {
                const newLocation = {
                    lat: position.coords.latitude,
                    lng: position.coords.longitude,
                };

                // تحقق إذا تغير الموقع بما يكفي لتحديث الخريطة
                if (!userLocation || Math.abs(newLocation.lat - userLocation.lat) > 0.0001 || Math.abs(newLocation.lng - userLocation.lng) > 0.0001) {
                    userLocation = newLocation;

                    // تحديث علامة المستخدم فقط إذا تغير الموقع
                    const userIcon = L.divIcon({
                        html: '<i class="fas fa-user-circle fa-5x" style="color: #007bff;"></i>',
                        className: 'user-marker',
                        iconSize: [30, 30],
                    });

                    if (!userMarker) {
                        userMarker = L.marker([userLocation.lat, userLocation.lng], { icon: userIcon })
                            .bindPopup('موقعك الحالي')
                            .addTo(map);
                    } else {
                        userMarker.setLatLng([userLocation.lat, userLocation.lng]);
                    }

                    // تحديث الخريطة مرة واحدة فقط
                    map.setView([userLocation.lat, userLocation.lng], 13);

                    // تحميل السائقين إذا كان الموقع جديدًا
                    loadDrivers();
                }
            }

            async function updateUserLocation(position) {
                try {
                    const newLocation = {
                        lat: position.coords.latitude,
                        lng: position.coords.longitude,
                        accuracy: position.coords.accuracy
                    };

                    // تحقق من التغير الكبير في الموقع
                    const hasSignificantChange = !userLocation ||
                        Math.abs(newLocation.lat - userLocation.lat) > 0.0001 ||
                        Math.abs(newLocation.lng - userLocation.lng) > 0.0001;

                    if (hasSignificantChange) {
                        userLocation = newLocation;

                        // تحديث أيقونة المستخدم مع تأثيرات حركية
                        const userIcon = L.divIcon({
                            html: `
                        <div class="user-location-marker">
                            <div class="user-avatar">
                                <i class="fas fa-user"></i>
                            </div>
                            <div class="accuracy-circle" style="width: ${newLocation.accuracy}px; height: ${newLocation.accuracy}px;"></div>
                            <div class="pulse-circle"></div>
                        </div>
                    `,
                            className: 'user-location-icon',
                            iconSize: [40, 40],
                            iconAnchor: [20, 20]
                        });

                        // محاولة الحصول على العنوان التقريبي
                        let addressInfo = 'جاري تحديد العنوان...';
                        try {
                            const response = await fetch(
                                `https://nominatim.openstreetmap.org/reverse?lat=${newLocation.lat}&lon=${newLocation.lng}&format=json&accept-language=ar`
                            );
                            const data = await response.json();
                            addressInfo = data.display_name || 'العنوان غير متوفر';
                        } catch (error) {
                            console.error('Error fetching address:', error);
                            addressInfo = 'تعذر تحديد العنوان';
                        }

                        // إنشاء محتوى النافذة المنبثقة
                        const popupContent = `
                    <div class="user-location-popup">
                        <div class="location-header">
                            <i class="fas fa-location-arrow"></i>
                            <h6>موقعك الحالي</h6>
                        </div>
                        <div class="location-info">
                            <div class="info-item">
                                <i class="fas fa-map-marker-alt"></i>
                                <span>${addressInfo}</span>
                            </div>
                            <div class="info-item">
                                <i class="fas fa-compass"></i>
                                <span>دقة التحديد: ${Math.round(newLocation.accuracy)} متر</span>
                            </div>
                            <div class="info-item">
                                <i class="fas fa-clock"></i>
                                <span>آخر تحديث: ${new Date().toLocaleTimeString('ar-IQ')}</span>
                            </div>
                        </div>
                    </div>
                `;

                        // تحديث أو إنشاء علامة الموقع
                        if (!userMarker) {
                            userMarker = L.marker([userLocation.lat, userLocation.lng], {
                                icon: userIcon,
                                zIndexOffset: 1000
                            })
                                .bindPopup(popupContent)
                                .addTo(map);
                        } else {
                            userMarker.setIcon(userIcon);
                            userMarker.setLatLng([userLocation.lat, userLocation.lng]);
                            userMarker.getPopup().setContent(popupContent);
                        }

                        // تحريك الخريطة بتأثير سلس
                        map.flyTo([userLocation.lat, userLocation.lng], 16, {
                            duration: 1.5,
                            easeLinearity: 0.25
                        });

                        // تحديث قائمة السائقين
                        await loadDrivers();

                        // عرض إشعار نجاح التحديث
                        showToast('تم تحديث موقعك بنجاح', 'success');
                    }
                } catch (error) {
                    console.error('Error updating location:', error);
                    showToast('حدث خطأ في تحديث الموقع', 'error');
                }
            }
            function calculateDistance(userLocation, driverLocation) {
                // التحقق من وجود الإحداثيات
                if (!userLocation || !driverLocation || !userLocation.lat || !userLocation.lng || !driverLocation.lat || !driverLocation.lng) {
                    return null;
                }

                const R = 6371; // نصف قطر الأرض بالكيلومترات
                const dLat = toRad(driverLocation.lat - userLocation.lat);
                const dLon = toRad(driverLocation.lng - userLocation.lng);
                const lat1 = toRad(userLocation.lat);
                const lat2 = toRad(driverLocation.lat);

                const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
                    Math.sin(dLon / 2) * Math.sin(dLon / 2) * Math.cos(lat1) * Math.cos(lat2);
                const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
                const distance = R * c;

                return Math.round(distance * 10) / 10; // تقريب إلى أقرب 0.1 كم
            }

            function toRad(degrees) {
                return degrees * Math.PI / 180;
            }

            // قاموس يحتوي على إحداثيات المحافظات والمناطق العراقية
            const locationCoordinates = {
                "بغداد": { lat: 33.3152, lng: 44.3661 },
                "الكرخ": { lat: 33.3024, lng: 44.3937 },
                "الرصافة": { lat: 33.3319, lng: 44.4445 },
                "البصرة": { lat: 30.5085, lng: 47.7804 },
                "نينوى": { lat: 36.3359, lng: 43.1194 },
                "الموصل": { lat: 36.3359, lng: 43.1194 },
                "النجف": { lat: 31.9892, lng: 44.3405 },
                "الكوفة": { lat: 32.0343, lng: 44.4019 },
                "كربلاء": { lat: 32.6101, lng: 44.0241 },
                "الحسينية": { lat: 32.6239, lng: 44.0179 },
                "أربيل": { lat: 36.1901, lng: 44.0091 },
                "كركوك": { lat: 35.4681, lng: 44.3923 },
                "الأنبار": { lat: 33.3784, lng: 43.1441 },
                "الرمادي": { lat: 33.4250, lng: 43.3001 },
                "الفلوجة": { lat: 33.3538, lng: 43.7789 },
                "بابل": { lat: 32.4680, lng: 44.4491 },
                "الحلة": { lat: 32.4689, lng: 44.4217 },
                "المسيب": { lat: 32.8471, lng: 44.2907 },
                "الهاشمية": { lat: 32.2482, lng: 44.6027 },
                "القاسم": { lat: 32.2973, lng: 44.5907 },
                "ديالى": { lat: 33.7752, lng: 44.6451 },
                "بعقوبة": { lat: 33.7474, lng: 44.6537 },
                "ذي قار": { lat: 31.0529, lng: 46.2590 },
                "الناصرية": { lat: 31.0529, lng: 46.2590 },
                "السليمانية": { lat: 35.5556, lng: 45.4350 },
                "صلاح الدين": { lat: 34.6108, lng: 43.6782 },
                "تكريت": { lat: 34.6707, lng: 43.6789 },
                "واسط": { lat: 32.5141, lng: 45.8206 },
                "الكوت": { lat: 32.5141, lng: 45.8206 },
                "ميسان": { lat: 31.8389, lng: 47.1451 },
                "العمارة": { lat: 31.8389, lng: 47.1451 },
                "المثنى": { lat: 31.3289, lng: 45.2792 },
                "السماوة": { lat: 31.3199, lng: 45.2847 },
                "دهوك": { lat: 36.8695, lng: 42.9505 },
                "القادسية": { lat: 31.9889, lng: 44.9252 },
                "الديوانية": { lat: 31.9889, lng: 44.9252 }
            };

            function getCoordinatesForLocation(location) {
                // تحقق من وجود الموقع في القاموس
                if (locationCoordinates[location]) {
                    return locationCoordinates[location];
                }

                // إذا لم يتم العثور على الموقع، نرجع إحداثيات بغداد كقيمة افتراضية
                console.warn(`لم يتم العثور على إحداثيات لـ ${location}، سيتم استخدام إحداثيات بغداد`);
                return locationCoordinates["بغداد"];
            }

            async function handleAddDriver(event) {
    event.preventDefault();
    showLoading();

    try {
        const imageFile = document.getElementById('driverImage').files[0];
        if (!imageFile) {
            throw new Error('الرجاء اختيار صورة للسائق');
        }

        // الحصول على الإحداثيات
        const latitude = parseFloat(document.getElementById('driverLatitude').value);
        const longitude = parseFloat(document.getElementById('driverLongitude').value);

        if (!latitude || !longitude) {
            throw new Error('يرجى تحديد موقع السائق أولاً');
        }

        // رفع الصورة إلى Firebase Storage
        const imageRef = storage.ref(`drivers/${Date.now()}_${imageFile.name}`);
        const uploadTask = await imageRef.put(imageFile);
        const imageUrl = await uploadTask.ref.getDownloadURL();

        // تجهيز بيانات السائق
        const driverData = {
            name: document.getElementById('driverName').value,
            phone: document.getElementById('driverPhone').value,
            carType: document.getElementById('carType').value,
            carModel: document.getElementById('carModel').value,
            location: document.getElementById('driverLocation').value,
            coordinates: {
                lat: latitude,
                lng: longitude
            },
            bio: document.getElementById('driverBio').value,
            imageUrl: imageUrl,
            rating: 5,
            trips: 0,
            approved: false,         // إضافة حقل الموافقة
            approvalStatus: 'pending', // حالة الموافقة
            active: false,           // حالة النشاط
            registrationDate: firebase.database.ServerValue.TIMESTAMP,
            lastUpdate: firebase.database.ServerValue.TIMESTAMP
        };

        // إضافة السائق إلى قاعدة البيانات
        const newDriverRef = await database.ref('drivers').push(driverData);

        // إغلاق النافذة المنبثقة
        const modal = bootstrap.Modal.getInstance(document.getElementById('addDriverModal'));
        modal.hide();

        // إعادة تعيين النموذج
        document.getElementById('addDriverForm').reset();
        
        // عرض رسالة نجاح
        Swal.fire({
            title: 'تم تقديم الطلب بنجاح!',
            html: `
                <div class="success-message">
                    <p>تم إرسال طلبك للمراجعة</p>
                    <p>رقم الطلب: ${newDriverRef.key}</p>
                    <small>سيتم مراجعة طلبك وتفعيل حسابك قريباً</small>
                </div>
            `,
            icon: 'success',
            confirmButtonText: 'حسناً',
            confirmButtonColor: '#FFD700'
        });

        // تحديث قائمة السائقين
        loadDrivers();

    } catch (error) {
        console.error('Error adding driver:', error);
        showToast(error.message, 'error');
    } finally {
        hideLoading();
    }
}
            function handleLocationError(error) {
                // التعامل مع خطأ في الموقع الجغرافي
                console.error('خطأ في تحديد الموقع:', error);
                showToast('تعذر الوصول إلى موقعك الحالي. الرجاء التحقق من إعدادات الموقع.', 'error');
            }

            


            // تحديث دالة createDriverCard لتشمل حالة الموافقة
function createDriverMarkerPopup(driver, driverId) {
    // التحقق من حالة الموافقة
    const isApproved = driver.approved === true;
    const isPending = driver.approvalStatus === 'pending';
    const statusText = isApproved ? 'مفعل' : (isPending ? 'قيد المراجعة' : 'غير مفعل');
    const statusColor = isApproved ? '#2ECC40' : (isPending ? '#FFD700' : '#FF4136');

    return `
        <div class="driver-popup ${isApproved ? 'approved' : (isPending ? 'pending' : 'not-approved')}">
            <div class="driver-popup-header">
                <div class="popup-status" style="background-color: ${statusColor}; color: ${isApproved ? '#fff' : '#000'}">
                    ${statusText}
                </div>
                <img src="${driver.imageUrl || 'default-driver.png'}" 
                     alt="${driver.name}"
                     style="filter: ${!isApproved ? 'grayscale(100%)' : 'none'}; 
                            opacity: ${!isApproved ? '0.7' : '1'}">
                <h4>${driver.name}</h4>
                <div class="driver-rating">
                    <i class="fas fa-star"></i> ${driver.rating ? driver.rating.toFixed(1) : '5.0'}
                </div>
            </div>
            
            <div class="driver-popup-info">
                <p><i class="fas fa-car"></i> ${driver.carType} ${driver.carModel}</p>
                <p><i class="fas fa-map-marker-alt"></i> ${driver.location}</p>
                <p><i class="fas fa-phone"></i> ${driver.phone}</p>
            </div>

            <div class="driver-popup-actions">
                <button onclick="openChatWindow('${driverId}')" 
                        class="chat-btn ripple"
                        ${!isApproved ? 'disabled' : ''}>
                    <i class="fas fa-comment"></i>
                    مراسلة
                </button>
                <button onclick="bookDriver('${driverId}')"
                        class="book-btn ripple"
                        ${!isApproved ? 'disabled' : ''}>
                    <i class="fas fa-taxi"></i>
                    حجز
                </button>
            </div>

            ${!isApproved ? `
                <div class="approval-notice">
                    ${isPending ? 
                        'هذا السائق قيد المراجعة. سيتم تفعيل الحساب قريباً.' : 
                        'هذا الحساب غير مفعل. يرجى انتظار الموافقة.'}
                </div>
            ` : ''}
        </div>
    `;
}


           // دالة تحديث عرض بطاقة السائق
function createDriverCard(driver, key) {
    // التحقق من حالة الموافقة
    const isApproved = driver.approved === true;
    const isPending = driver.approvalStatus === 'pending';
    
    // تحديد الحالة وتصميم البطاقة
    const cardStatus = isApproved ? 'approved' : (isPending ? 'pending' : 'not-approved');
    const statusText = isApproved ? 'مفعل' : (isPending ? 'قيد المراجعة' : 'غير مفعل');
    const cardOpacity = isApproved ? '1' : '0.7';

    return `
        <div class="driver-card ${cardStatus}" data-driver-id="${key}" style="opacity: ${cardOpacity}">
            <!-- شريط الحالة -->
            <div class="status-banner ${cardStatus}">
                ${statusText}
            </div>

            <!-- صورة السائق -->
            <div class="driver-image-container">
                <img src="${driver.imageUrl || 'default-avatar.png'}" alt="${driver.name}" class="driver-image">
            </div>

            <!-- معلومات السائق -->
            <div class="driver-info">
                <h5 class="driver-name">${driver.name}</h5>
                <div class="driver-stats">
                    <div class="stat-item">
                        <div class="stat-value">
                            <i class="fas fa-star"></i> ${driver.rating ? driver.rating.toFixed(1) : '5.0'}
                        </div>
                        <div class="stat-label">التقييم</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-value">
                            <i class="fas fa-route"></i> ${driver.trips || 0}
                        </div>
                        <div class="stat-label">الرحلات</div>
                    </div>
                </div>
                <div class="driver-details">
                    <p><i class="fas fa-car"></i> ${driver.carType} - ${driver.carModel}</p>
                    <p><i class="fas fa-map-marker-alt"></i> ${driver.location}</p>
                </div>

                <!-- أزرار التفاعل -->
                <div class="driver-actions" ${!isApproved ? 'style="pointer-events: none; opacity: 0.7;"' : ''}>
                    <button class="action-btn primary" onclick="viewDriverLocation('${key}')" ${!isApproved ? 'disabled' : ''}>
                        <i class="fas fa-map-marker-alt"></i> الموقع
                    </button>
                    <button class="action-btn secondary" onclick="openChatWindow('${key}')" ${!isApproved ? 'disabled' : ''}>
                        <i class="fas fa-comment"></i> مراسلة
                    </button>
                </div>
            </div>
        </div>
    `;
}

            // دالة مساعدة لتحويل الدرجات إلى راديان
            function toRad(degrees) {
                return degrees * Math.PI / 180;
            }

            function bookDriver(driverId) {
                showLoading();
                database.ref(`drivers/${driverId}`).once('value', (snapshot) => {
                    const driver = snapshot.val();
                    if (driver && driver.active) {
                        setTimeout(() => {
                            hideLoading();
                            database.ref(`drivers/${driverId}`).update({
                                active: false // تعيين الحالة إلى "مشغول"
                            }).then(() => {
                                showToast(`تم إرسال طلب الحجز إلى ${driver.name}`);
                                window.location.href = `tel:${driver.phone}`;
                                loadDrivers(); // تحديث حالة السائقين في الواجهة
                            });
                        }, 1500);
                    } else {
                        hideLoading();
                        showToast('السائق غير متاح حالياً', 'error');
                    }
                });
            }









            function scrollToMap() {
                const mapElement = document.getElementById('map');
                if (mapElement) {
                    mapElement.scrollIntoView({ behavior: 'smooth', block: 'start' });
                }
            }




            function updateRequiredTrips(driverId, count) {
                const tripCount = parseInt(count, 10);
                if (isNaN(tripCount) || tripCount < 0) {
                    showToast('الرجاء إدخال عدد صحيح للمشاوير', 'error');
                    return;
                }

                database.ref(`drivers/${driverId}`).update({
                    requiredTrips: tripCount
                }).then(() => {
                    showToast('تم تحديث عدد المشاوير بنجاح');
                }).catch((error) => {
                    console.error('Error updating required trips:', error);
                    showToast('حدث خطأ أثناء تحديث عدد المشاوير', 'error');
                });
            }


            function setTripCount(driverId) {
                const modal = new bootstrap.Modal(document.getElementById('tripCountModal'));
                modal.show();

                document.getElementById('tripCountForm').onsubmit = async (event) => {
                    event.preventDefault();
                    const tripCount = document.getElementById('tripCount').value;

                    try {
                        await database.ref(`drivers/${driverId}`).update({
                            tripsRequired: parseInt(tripCount)
                        });
                        showToast('تم تحديث عدد المشاوير بنجاح');
                        modal.hide();
                    } catch (error) {
                        console.error('Error updating trip count:', error);
                        showToast('حدث خطأ أثناء تحديث عدد المشاوير', 'error');
                    }
                };
            }
            // تحسين دالة حساب المسافة
            function calculateDistance(point1, point2) {
                if (!point1 || !point2 || !point1.lat || !point1.lng || !point2.lat || !point2.lng) {
                    return null;
                }

                // تحويل الإحداثيات إلى راديان
                const lat1 = toRadians(point1.lat);
                const lon1 = toRadians(point1.lng);
                const lat2 = toRadians(point2.lat);
                const lon2 = toRadians(point2.lng);

                // صيغة هافرساين لحساب المسافة
                const R = 6371; // نصف قطر الأرض بالكيلومترات
                const dLat = lat2 - lat1;
                const dLon = lon2 - lon1;

                const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
                    Math.cos(lat1) * Math.cos(lat2) *
                    Math.sin(dLon / 2) * Math.sin(dLon / 2);

                const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
                const distance = R * c;

                return distance;
            }

            // تحويل الدرجات إلى راديان
            function toRadians(degrees) {
                return degrees * (Math.PI / 180);
            }

            // تنسيق عرض المسافة
            function formatDistance(distance) {
                if (distance === null) return 'غير متوفر';
                if (distance < 1) {
                    return `${Math.round(distance * 1000)} متر`;
                }
                return `${distance.toFixed(1)} كم`;
            }

            // تحديث دالة إنشاء بطاقة السائق مع المسافة المحسنة
            function createDriverCard(driver, key) {
                let distanceDisplay = 'غير متوفر';
                let distanceValue = null;

                if (userLocation && driver.coordinates) {
                    distanceValue = calculateDistance(userLocation, driver.coordinates);
                    distanceDisplay = formatDistance(distanceValue);
                }

                // ترتيب السائقين حسب المسافة
                const distanceClass = distanceValue !== null ?
                    (distanceValue < 1 ? 'distance-near' :
                        distanceValue < 5 ? 'distance-medium' : 'distance-far') : '';

                return `
        <div class="driver-card ${distanceClass}" data-driver-id="${key}" data-distance="${distanceValue || 999999}">
            <div class="driver-image-container">
                <img src="${driver.imageUrl || 'https://firebasestorage.googleapis.com/v0/b/messageemeapp.appspot.com/o/driver-images%2F7605a607-6cf8-4b32-aee1-fa7558c98452.png?alt=media&token=5cf9e67c-ba6e-4431-a6a0-79dede15b527'}" alt="${driver.name}" class="driver-image">
                <div class="driver-status ${driver.active ? 'status-active' : 'status-inactive'}">
                    ${driver.active ? 'متاح' : 'مشغول'}
                </div>
                <div class="distance-badge ${distanceClass}">
                    <i class="fas fa-map-marker-alt"></i>
                    ${distanceDisplay}
                </div>
            </div>
            <div class="driver-info">
                <h5 class="driver-name">${driver.name}</h5>
                <div class="driver-stats">
                    <div class="stat-item">
                        <div class="stat-value">
                            <i class="fas fa-star"></i>
                            ${driver.rating ? driver.rating.toFixed(1) : '5.0'}
                        </div>
                        <div class="stat-label">التقييم</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-value">
                            <i class="fas fa-route"></i>
                            ${driver.trips || 0}
                        </div>
                        <div class="stat-label">الرحلات</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-value">
                            ${distanceDisplay}
                        </div>
                        <div class="stat-label">المسافة</div>
                    </div>
                </div>
                <div class="text-muted">
                    <p class="mb-2">
                        <i class="fas fa-car me-2"></i>
                        ${driver.carType} ${driver.carModel}
                    </p>
                    <p class="mb-0">
                        <i class="fas fa-map-marker-alt me-2"></i>
                        ${driver.location}
                    </p>
                </div>
            </div>
            <div class="driver-actions">
                <button class="action-btn primary" onclick="viewDriverLocation('${key}')">
                    <i class="fas fa-map-marker-alt"></i>
                    عرض الموقع
                </button>
                <button class="action-btn secondary" onclick="openChatWindow('${key}')">
                    <i class="fas fa-comment"></i>
                    مراسلة
                </button>
            </div>
        </div>
    `;
            }

           
// تحديث دالة تحميل السائقين
function loadDrivers(location = 'all') {
    if (isLoadingDrivers) return;
    isLoadingDrivers = true;
    showLoading();

    database.ref('drivers').once('value')
        .then((snapshot) => {
            const driversGrid = document.getElementById('driversGrid');
            driversGrid.innerHTML = '';
            markerLayer.clearLayers();

            snapshot.forEach((childSnapshot) => {
                const driver = childSnapshot.val();
                const driverId = childSnapshot.key;

                if (location === 'all' || driver.location === location) {
                    // إضافة بطاقة السائق
                    const driverCard = createDriverCard(driver, driverId);
                    driversGrid.appendChild(driverCard);

                    // إضافة علامة السائق على الخريطة
                    if (driver.coordinates) {
                        const { lat, lng } = driver.coordinates;
                        const marker = createDriverMarker(driver, driverId, [lat, lng]);
                        marker.bindPopup(createDriverMarkerPopup(driver, driverId));
                        marker.addTo(markerLayer);
                    }
                }
            });
        })
        .catch((error) => {
            console.error('Error loading drivers:', error);
            showToast('حدث خطأ في تحميل بيانات السائقين', 'error');
        })
        .finally(() => {
            hideLoading();
            isLoadingDrivers = false;
        });
}



// تحديث CSS للعناصر المقيدة
const style = document.createElement('style');
style.textContent = `
    .driver-card.not-approved {
        opacity: 0.7;
        filter: grayscale(100%);
    }

    .driver-card.pending {
        opacity: 0.85;
        filter: grayscale(30%);
    }

    .driver-card.not-approved .driver-actions button,
    .driver-card.pending .driver-actions button {
        pointer-events: none;
        opacity: 0.5;
        cursor: not-allowed;
    }

    .approval-notice {
        background: rgba(255, 0, 0, 0.1);
        color: #FF4136;
        padding: 10px;
        margin-top: 10px;
        border-radius: 5px;
        text-align: center;
        font-size: 0.9rem;
    }

    .driver-popup.not-approved img,
    .driver-popup.pending img {
        filter: grayscale(100%);
        opacity: 0.7;
    }

    .driver-popup.not-approved button,
    .driver-popup.pending button {
        opacity: 0.5;
        cursor: not-allowed;
    }
`;
document.head.appendChild(style);
            function toRad(degrees) {
                return degrees * Math.PI / 180;
            }

            function loadDrivers(location = 'all') {
                if (isLoadingDrivers) return;
                isLoadingDrivers = true;

                showLoading();
                const driversRef = database.ref('drivers');

                driversRef.once('value')
                    .then((snapshot) => {
                        const driversGrid = document.getElementById('driversGrid');
                        driversGrid.innerHTML = '';
                        markerLayer.clearLayers();

                        snapshot.forEach((childSnapshot) => {
                            const driver = childSnapshot.val();
                            if (location === 'all' || driver.location === location) {
                                driversGrid.innerHTML += createDriverCard(driver, childSnapshot.key);

                                if (driver.coordinates) {
                                    const { lat, lng } = driver.coordinates;

                                    // إنشاء العلامة بمعلومات السائق
                                    const driverMarker = L.marker([lat, lng], {
                                        icon: L.divIcon({
                                            html: `<img src="${driver.imageUrl}" 
                                              alt="صورة السائق" 
                                              style="width: 35px; height: 35px; border-radius: 50%; border: 2px solid #FFD700;">`,
                                            className: 'driver-marker',
                                            iconSize: [40, 40],
                                        }),
                                    }).addTo(markerLayer);

                                    // تحديث النافذة المنبثقة
                                    driverMarker.bindPopup(`
                            <div style="text-align: center;">
                                <div style="margin-bottom: 10px;">
                                    <img src="${driver.imageUrl || 'https://firebasestorage.googleapis.com/v0/b/messageemeapp.appspot.com/o/driver-images%2F7605a607-6cf8-4b32-aee1-fa7558c98452.png?alt=media&token=5cf9e67c-ba6e-4431-a6a0-79dede15b527'}" 
                                         alt="صورة السائق" 
                                         style="width: 70px; height: 70px; border-radius: 50%; border: 3px solid #FFD700; margin-bottom: 10px;">
                                    <h6 style="margin: 5px 0; font-weight: bold;">${driver.name}</h6>
                                </div>
                                
                                <div style="display: grid; grid-template-columns: repeat(2, 1fr); gap: 10px; margin-bottom: 10px;">
                                    <div>
                                        <i class="fas fa-star" style="color: #FFD700;"></i>
                                        ${driver.rating ? driver.rating.toFixed(1) : '5.0'}
                                    </div>
                                    <div>
                                        <i class="fas fa-route"></i>
                                        ${driver.trips || 0}
                                    </div>
                                </div>

                                <div style="margin-bottom: 10px;">
                                    <p style="margin: 5px 0;">🚗 ${driver.carType} - ${driver.carModel}</p>
                                    <p style="margin: 5px 0;">📍 ${driver.location}</p>
                                </div>

                                <button onclick="openChatWindow('${childSnapshot.key}')" 
                                        style="background: #FFD700; color: #333; border: none; 
                                               padding: 8px 15px; border-radius: 20px; width: 100%;
                                               cursor: pointer; display: flex; align-items: center; 
                                               justify-content: center; gap: 5px; font-weight: bold;"
                                        ${!driver.approved ? 'disabled' : ''}>
                                    <i class="fas fa-comment"></i>
                                    مراسلة السائق
                                </button>
                            </div>
                        `, {
                                        maxWidth: 250
                                    });
                                }
                            }
                        });

                        hideLoading();
                    })
                    .catch((error) => {
                        console.error('Error loading drivers:', error);
                        showToast('حدث خطأ في تحميل بيانات السائقين', 'error');
                    })
                    .finally(() => {
                        isLoadingDrivers = false;
                    });
            }

            function createDriverCard(driver, key) {
    // التحقق من حالة الموافقة والنشاط
    const isApproved = driver.approved === true;
    const isPending = driver.approvalStatus === 'pending';
    const isActive = driver.active && isApproved;

    // تحديد نص وألوان الحالة
    const statusText = !isApproved ? (isPending ? 'قيد المراجعة' : 'غير مفعل') : 
                      (isActive ? 'متاح' : 'مشغول');
    const statusColor = !isApproved ? '#FFD700' : 
                       (isActive ? '#2ECC40' : '#FF4136');

    // تحديد حالة التعتيم للبطاقة
    const cardOpacity = isApproved ? '1' : '0.7';

    return `
        <div class="driver-card animate__animated animate__fadeIn" 
             style="background-color: #000000; color: #FFFFFF; border-radius: 20px; 
                    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.5); overflow: hidden; 
                    opacity: ${cardOpacity}; position: relative;">
            
            ${!isApproved ? `
                <div style="position: absolute; top: 20px; right: -35px; transform: rotate(45deg);
                           background: ${isPending ? '#FFD700' : '#dc3545'}; color: ${isPending ? '#000' : '#fff'};
                           padding: 5px 40px; z-index: 10; font-weight: bold;">
                    ${statusText}
                </div>
            ` : ''}

            <div class="driver-image-container" style="position: relative;">
                <img src="${driver.imageUrl}" alt="${driver.name}" 
                     class="driver-image" style="width: 100%; height: 200px; object-fit: cover; 
                     border-bottom: 3px solid #FFD700; ${!isApproved ? 'filter: grayscale(50%);' : ''}">
                
                ${isApproved ? `
                    <div class="driver-status ${isActive ? 'status-active' : 'status-inactive'}" 
                         onclick="toggleDriverStatus('${key}', ${isActive})"
                         style="position: absolute; top: 10px; right: 10px; padding: 5px 10px; 
                                border-radius: 20px; background: rgba(255, 255, 255, 0.8); 
                                font-weight: bold; color: ${statusColor};">
                        ${isActive ? 'متاح' : 'مشغول'}
                    </div>
                ` : ''}
            </div>

            <div class="driver-info" style="padding: 15px;">
                <h5 class="driver-name" style="font-size: 1.2rem; font-weight: bold; 
                                             margin-bottom: 10px; color: #FFD700;">
                    ${driver.name}
                </h5>
                
                <div class="driver-stats" style="display: flex; justify-content: space-between; 
                                               margin-bottom: 15px;">
                    <div class="stat-item" style="text-align: center;">
                        <div class="stat-value" style="font-weight: bold; color: #FFD700;">
                            <i class="fas fa-star"></i> ${driver.rating ? driver.rating.toFixed(1) : '5.0'}
                        </div>
                        <div class="stat-label" style="font-size: 0.8rem; color: #FFFFFF;">التقييم</div>
                    </div>
                    <div class="stat-item" style="text-align: center;">
                        <div class="stat-value" style="font-weight: bold; color: #FFFFFF;">
                            <i class="fas fa-route"></i> ${driver.trips || 0}
                        </div>
                        <div class="stat-label" style="font-size: 0.8rem; color: #FFFFFF;">الرحلات</div>
                    </div>
                    <div class="stat-item" style="text-align: center;">
                        <div class="stat-value" style="font-weight: bold; color: #FFFFFF;">
                            ${driver.distance ? `${driver.distance.toFixed(1)} كم` : '--'}
                        </div>
                        <div class="stat-label" style="font-size: 0.8rem; color: #FFFFFF;">المسافة</div>
                    </div>
                </div>

                <div class="text-muted" style="color: #FFFFFF; margin-bottom: 15px;">
                    <p class="mb-2">
                        <i class="fas fa-car me-2" style="color: #FFD700;"></i>
                        ${driver.carType} ${driver.carModel}
                    </p>
                    <p class="mb-0">
                        <i class="fas fa-map-marker-alt me-2" style="color: #FFD700;"></i>
                        ${driver.location}
                    </p>
                </div>
            </div>

            <div class="driver-actions" style="display: flex; justify-content: space-between; 
                                             padding: 10px; ${!isApproved ? 'pointer-events: none; opacity: 0.7;' : ''}">
  <div class="driver-actions">
                <button class="action-btn primary" onclick="viewDriverLocation('${key}')">
                    <i class="fas fa-map-marker-alt"></i>
                    عرض الموقع
                </button>
                <button class="action-btn secondary" 
                        onclick="openChatWindow('${key}')" 
                        style="background: #333; color: #FFD700; padding: 10px 20px; 
                               border-radius: 20px; border: 1px solid #FFD700; 
                               cursor: pointer; font-weight: bold; transition: all 0.3s;"
                        ${!isApproved ? 'disabled' : ''}>
                    <i class="fas fa-comment"></i> مراسلة
                </button>
            </div>
        </div>
    `;
}

            function startDriverLocationTracking(driverId) {
                // ... الكود السابق ...

                // تحديث حالة التتبع في البطاقة
                const driverCard = document.querySelector(`[data-driver-id="${driverId}"]`);
                if (driverCard) {
                    driverCard.setAttribute('data-tracking', 'true');
                    const indicator = driverCard.querySelector('.tracking-indicator');
                    if (indicator) {
                        indicator.classList.add('active');
                    }
                }

                showToast('تم تفعيل تتبع الموقع بنجاح', 'success');
            }

            function stopDriverLocationTracking() {
                // ... الكود السابق ...

                // إزالة حالة التتبع من جميع البطاقات
                document.querySelectorAll('.driver-card').forEach(card => {
                    card.setAttribute('data-tracking', 'false');
                    const indicator = card.querySelector('.tracking-indicator');
                    if (indicator) {
                        indicator.classList.remove('active');
                    }
                });
            }



            // دالة تأكيد الحذف مع نافذة تأكيد محسنة
            function confirmDeleteDriver(driverId) {
                // استخدام نافذة تأكيد محسنة
                Swal.fire({
                    title: 'تأكيد الحذف',
                    text: 'هل أنت متأكد من حذف هذا السائق؟',
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#d33',
                    cancelButtonColor: '#3085d6',
                    confirmButtonText: 'نعم، احذف',
                    cancelButtonText: 'إلغاء'
                }).then((result) => {
                    if (result.isConfirmed) {
                        deleteDriver(driverId); // استدعاء دالة الحذف إذا وافق المستخدم
                    }
                });
            }

            // دالة حذف السائق
            async function deleteDriver(driverId) {
                try {
                    // عرض مؤشر التحميل
                    showLoading();

                    // الوصول إلى مرجع بيانات السائق
                    const driverRef = database.ref(`drivers/${driverId}`);
                    const snapshot = await driverRef.once('value');
                    const driverData = snapshot.val();

                    if (!driverData) {
                        // إذا لم يتم العثور على بيانات السائق
                        showToast('لم يتم العثور على السائق', 'error');
                        return;
                    }

                    // حذف الصورة من التخزين إذا كانت موجودة
                    if (driverData.imageUrl) {
                        try {
                            const imageRef = storage.refFromURL(driverData.imageUrl);
                            await imageRef.delete();
                        } catch (error) {
                            console.error('Error deleting image:', error);
                            showToast('حدث خطأ أثناء حذف صورة السائق', 'error');
                        }
                    }

                    // حذف بيانات السائق من قاعدة البيانات
                    await driverRef.remove();

                    // إزالة بطاقة السائق من الواجهة
                    const card = document.querySelector(`[data-driver-id="${driverId}"]`);
                    if (card) {
                        // إضافة تأثير حذف قبل الإزالة
                        card.classList.add('animate__fadeOut');
                        setTimeout(() => card.remove(), 300);
                    }

                    // عرض رسالة نجاح
                    showToast('تم حذف السائق بنجاح', 'success');
                } catch (error) {
                    console.error('Error deleting driver:', error);
                    showToast('حدث خطأ أثناء حذف السائق', 'error');
                } finally {
                    // إخفاء مؤشر التحميل
                    hideLoading();
                }
            }


            // دالة إظهار نافذة التعديل
            function showEditDriverModal(driverId) {
                database.ref(`drivers/${driverId}`).once('value')
                    .then(snapshot => {
                        const driver = snapshot.val();
                        if (driver) {
                            document.getElementById('editDriverId').value = driverId;
                            document.getElementById('editDriverName').value = driver.name;
                            document.getElementById('editDriverPhone').value = driver.phone;
                            document.getElementById('editCarType').value = driver.carType;
                            document.getElementById('editCarModel').value = driver.carModel;
                            document.getElementById('editDriverLocation').value = driver.location;

                            if (driver.imageUrl) {
                                document.getElementById('editImagePreview').src = driver.imageUrl;
                                document.getElementById('editImagePreview').style.display = 'block';
                            }

                            const editModal = new bootstrap.Modal(document.getElementById('editDriverModal'));
                            editModal.show();
                        }
                    })
                    .catch(error => {
                        console.error('Error fetching driver data:', error);
                        showToast('حدث خطأ في تحميل بيانات السائق', 'error');
                    });
            }

            // دالة معالجة تعديل البيانات
            async function handleEditDriver(event) {
                event.preventDefault();
                showLoading();

                try {
                    const driverId = document.getElementById('editDriverId').value;
                    const imageFile = document.getElementById('editDriverImage').files[0];
                    let updates = {
                        name: document.getElementById('editDriverName').value,
                        phone: document.getElementById('editDriverPhone').value,
                        carType: document.getElementById('editCarType').value,
                        carModel: document.getElementById('editCarModel').value,
                        location: document.getElementById('editDriverLocation').value
                    };

                    if (imageFile) {
                        const imageRef = storage.ref(`drivers/${Date.now()}_${imageFile.name}`);
                        const uploadTask = await imageRef.put(imageFile);
                        updates.imageUrl = await uploadTask.ref.getDownloadURL();
                    }

                    await database.ref(`drivers/${driverId}`).update(updates);

                    const modal = bootstrap.Modal.getInstance(document.getElementById('editDriverModal'));
                    modal.hide();

                    showToast('تم تحديث بيانات السائق بنجاح');
                    loadDrivers();
                } catch (error) {
                    console.error('Error updating driver:', error);
                    showToast('حدث خطأ أثناء تحديث البيانات', 'error');
                } finally {
                    hideLoading();
                }
            }

            // دوال إضافية للحذف والتعديل
            function confirmDeleteDriver(driverId) {
                Swal.fire({
                    title: 'تأكيد الحذف',
                    text: 'هل أنت متأكد من حذف هذا السائق؟',
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#d33',
                    cancelButtonColor: '#3085d6',
                    confirmButtonText: 'نعم، احذف',
                    cancelButtonText: 'إلغاء'
                }).then((result) => {
                    if (result.isConfirmed) {
                        deleteDriver(driverId);
                    }
                });
            }

            async function deleteDriver(driverId) {
                try {
                    showLoading();

                    // حذف بيانات السائق من قاعدة البيانات
                    const driverRef = database.ref(`drivers/${driverId}`);
                    const driverSnapshot = await driverRef.once('value');
                    const driverData = driverSnapshot.val();

                    if (driverData && driverData.imageUrl) {
                        // حذف الصورة من التخزين
                        const imageRef = storage.refFromURL(driverData.imageUrl);
                        await imageRef.delete();
                    }

                    // حذف البيانات
                    await driverRef.remove();

                    // حذف البطاقة من الواجهة مع تأثير حركي
                    const driverCard = document.querySelector(`[data-driver-id="${driverId}"]`);
                    if (driverCard) {
                        driverCard.classList.add('animate__fadeOut');
                        setTimeout(() => driverCard.remove(), 300);
                    }

                    showToast('تم حذف السائق بنجاح');
                } catch (error) {
                    console.error('Error deleting driver:', error);
                    showToast('حدث خطأ أثناء حذف السائق', 'error');
                } finally {
                    hideLoading();
                }
            }


            function showEditDriverModal(driverId) {
                database.ref(`drivers/${driverId}`).once('value')
                    .then(snapshot => {
                        const driver = snapshot.val();
                        if (driver) {
                            // ملء النموذج ببيانات السائق الحالية
                            document.getElementById('editDriverId').value = driverId;
                            document.getElementById('editDriverName').value = driver.name;
                            document.getElementById('editDriverPhone').value = driver.phone;
                            document.getElementById('editCarType').value = driver.carType;
                            document.getElementById('editCarModel').value = driver.carModel;
                            document.getElementById('editDriverLocation').value = driver.location;
                            document.getElementById('editDriverBio').value = driver.bio || '';

                            if (driver.imageUrl) {
                                document.getElementById('editImagePreview').src = driver.imageUrl;
                                document.getElementById('editImagePreview').style.display = 'block';
                                document.querySelector('#editDriverModal .upload-placeholder').style.display = 'none';
                            }

                            // عرض النافذة المنبثقة
                            const editModal = new bootstrap.Modal(document.getElementById('editDriverModal'));
                            editModal.show();
                        }
                    })
                    .catch(error => {
                        console.error('Error fetching driver data:', error);
                        showToast('حدث خطأ في تحميل بيانات السائق', 'error');
                    });
            }

            async function handleEditDriver(event) {
                event.preventDefault();
                showLoading();

                const driverId = document.getElementById('editDriverId').value;
                const imageFile = document.getElementById('editDriverImage').files[0];

                try {
                    let imageUrl;
                    if (imageFile) {
                        const imageRef = storage.ref(`drivers/${Date.now()}_${imageFile.name}`);
                        const uploadTask = await imageRef.put(imageFile);
                        imageUrl = await uploadTask.ref.getDownloadURL();
                    }

                    const updates = {
                        name: document.getElementById('editDriverName').value,
                        phone: document.getElementById('editDriverPhone').value,
                        carType: document.getElementById('editCarType').value,
                        carModel: document.getElementById('editCarModel').value,
                        location: document.getElementById('editDriverLocation').value,
                        bio: document.getElementById('editDriverBio').value
                    };

                    if (imageUrl) {
                        updates.imageUrl = imageUrl;
                    }

                    await database.ref(`drivers/${driverId}`).update(updates);

                    // إغلاق النافذة المنبثقة
                    const modal = bootstrap.Modal.getInstance(document.getElementById('editDriverModal'));
                    modal.hide();

                    showToast('تم تحديث بيانات السائق بنجاح');
                    loadDrivers(); // تحديث عرض السائقين
                } catch (error) {
                    console.error('Error updating driver:', error);
                    showToast('حدث خطأ أثناء تحديث البيانات', 'error');
                } finally {
                    hideLoading();
                }
            }

            function handleEditImagePreview(event) {
                const file = event.target.files[0];
                if (file) {
                    const reader = new FileReader();
                    reader.onload = function (e) {
                        const preview = document.getElementById('editImagePreview');
                        const placeholder = document.querySelector('#editDriverModal .upload-placeholder');
                        preview.src = e.target.result;
                        preview.style.display = 'block';
                        placeholder.style.display = 'none';
                    }
                    reader.readAsDataURL(file);
                }
            }


            function handleImagePreview(event) {
                const file = event.target.files[0];
                if (file) {
                    const reader = new FileReader();
                    reader.onload = function (e) {
                        const preview = document.getElementById('imagePreview');
                        const placeholder = document.querySelector('.upload-placeholder');
                        preview.src = e.target.result;
                        preview.style.display = 'block';
                        placeholder.style.display = 'none';
                    }
                    reader.readAsDataURL(file);
                }
            }
            async function handleAddDriver(event) {
                event.preventDefault();
                showLoading();

                try {
                    const imageFile = document.getElementById('driverImage').files[0];
                    if (!imageFile) {
                        throw new Error('الرجاء اختيار صورة للسائق');
                    }

                    // الحصول على الإحداثيات مباشرة من حقول الإدخال
                    const latitude = parseFloat(document.getElementById('driverLatitude').value);
                    const longitude = parseFloat(document.getElementById('driverLongitude').value);

                    // التحقق من وجود الإحداثيات
                    if (!latitude || !longitude) {
                        throw new Error('يرجى تحديد موقع السائق أولاً');
                    }

                    const imageRef = storage.ref(`drivers/${Date.now()}_${imageFile.name}`);
                    const uploadTask = await imageRef.put(imageFile);
                    const imageUrl = await uploadTask.ref.getDownloadURL();

                    const driverData = {
                        name: document.getElementById('driverName').value,
                        phone: document.getElementById('driverPhone').value,
                        carType: document.getElementById('carType').value,
                        carModel: document.getElementById('carModel').value,
                        location: document.getElementById('driverLocation').value, // المحافظة فقط
                        coordinates: {
                            lat: latitude,
                            lng: longitude
                        },
                        bio: document.getElementById('driverBio').value,
                        imageUrl: imageUrl,
                        rating: 5,
                        trips: 0,
                        active: true,
                        createdAt: firebase.database.ServerValue.TIMESTAMP
                    };

                    await database.ref('drivers').push(driverData);

                    // إغلاق النافذة المنبثقة بعد النجاح
                    const modal = bootstrap.Modal.getInstance(document.getElementById('addDriverModal'));
                    modal.hide();

                    document.getElementById('addDriverForm').reset();
                    showToast('تم إضافة السائق بنجاح');
                    loadDrivers();
                } catch (error) {
                    console.error('Error adding driver:', error);
                    showToast(error.message, 'error');
                } finally {
                    hideLoading();
                }
            }

            function bookDriver(driverId) {
                showLoading();
                database.ref(`drivers/${driverId}`).once('value', (snapshot) => {
                    const driver = snapshot.val();
                    if (driver && driver.active) {
                        setTimeout(() => {
                            hideLoading();
                            database.ref(`drivers/${driverId}`).update({
                                active: false // تعيين الحالة إلى "مشغول"
                            }).then(() => {
                                showToast(`تم إرسال طلب الحجز إلى ${driver.name}`);
                                window.location.href = `tel:${driver.phone}`;
                                loadDrivers(); // تحديث حالة السائقين في الواجهة
                            });
                        }, 1500);
                    } else {
                        hideLoading();
                        showToast('السائق غير متاح حالياً', 'error');
                    }
                });
            }


            function messageDriver(driverId) {
                database.ref(`drivers/${driverId}`).once('value', (snapshot) => {
                    const driver = snapshot.val();
                    if (driver) {
                        const phoneNumber = driver.phone.replace(/[^0-9]/g, '');
                        window.open(`https://wa.me/${phoneNumber}`, '_blank');
                    }
                });
            }

            function showToast(message, type = 'success') {
                const toast = document.createElement('div');
                toast.className = `custom-toast animate__animated animate__fadeInRight`;
                toast.innerHTML = `
                <i class="fas ${type === 'success' ? 'fa-check-circle text-success' : 'fa-exclamation-circle text-danger'} me-2"></i>
                <div>${message}</div>
            `;

                document.getElementById('toastContainer').appendChild(toast);

                setTimeout(() => {
                    toast.classList.replace('animate__fadeInRight', 'animate__fadeOutRight');
                    setTimeout(() => toast.remove(), 300);
                }, 3000);
            }
            function messageDriver(driverId) {
                database.ref(`drivers/${driverId}`).once('value', (snapshot) => {
                    const driver = snapshot.val();

                    if (driver) {
                        // تحديد السائق الحالي للدردشة
                        currentChatDriverId = driverId;

                        // فتح نافذة الدردشة
                        const chatModal = new bootstrap.Modal(document.getElementById('chatModal'));
                        document.getElementById('chatMessages').innerHTML = ''; // تفريغ الرسائل السابقة
                        loadMessages(); // تحميل الرسائل السابقة بين المستخدم والسائق
                        chatModal.show();
                    } else {
                        showToast('عذراً، لا يمكن العثور على معلومات السائق.', 'error');
                    }
                });
            }

            // دالة مساعدة للتحقق من صلاحيات الموقع
            function checkLocationPermission() {
                if (navigator.permissions) {
                    navigator.permissions.query({ name: 'geolocation' })
                        .then(permission => {
                            if (permission.state === 'denied') {
                                showToast('يرجى تفعيل خدمة الموقع للحصول على أفضل تجربة.', 'error');
                            }
                        });
                }
            }

            // تحديث دالة updateUserLocation لتخزين الموقع الأخير
            function updateUserLocation(position) {
                userLocation = {
                    lat: position.coords.latitude,
                    lng: position.coords.longitude
                };

                if (!userMarker) {
                    const userIcon = L.divIcon({
                        html: '<i class="fas fa-user-circle fa-2x" style="color: #007bff;"></i>',
                        className: 'user-marker',
                        iconSize: [30, 30]
                    });

                    userMarker = L.marker([userLocation.lat, userLocation.lng], { icon: userIcon })
                        .bindPopup('موقعك الحالي')
                        .addTo(map);
                } else {
                    userMarker.setLatLng([userLocation.lat, userLocation.lng]);
                }

                // تحديث مركز الخريطة
                map.setView([userLocation.lat, userLocation.lng], map.getZoom());
            }

            function showLoading() {
                document.getElementById('loadingSpinner').style.display = 'flex';
            }

            function hideLoading() {
                document.getElementById('loadingSpinner').style.display = 'none';
            }
// دالة لعرض نافذة إضافة السائق
function showAddDriverModal() {
    // إغلاق نافذة اختيار العملية أولاً
    const profileModal = bootstrap.Modal.getInstance(document.getElementById('profileModal'));
    if (profileModal) {
        profileModal.hide();
    }

    // انتظار قليلاً قبل فتح النافذة الجديدة
    setTimeout(() => {
        // إظهار نافذة إضافة السائق
        const addDriverModal = new bootstrap.Modal(document.getElementById('addDriverModal'));
        addDriverModal.show();
    }, 150); // تأخير بسيط للحصول على انتقال سلس
}

// دالة لعرض نافذة تسجيل الدخول
function openLoginModal() {
    const profileModal = bootstrap.Modal.getInstance(document.getElementById('profileModal'));
    if (profileModal) {
        profileModal.hide();
    }

    setTimeout(() => {
        const loginModal = new bootstrap.Modal(document.getElementById('loginModal'));
        loginModal.show();
    }, 150);
}

// دالة لفتح نافذة تسجيل المستخدم
function openUserRegistration() {
    const profileModal = bootstrap.Modal.getInstance(document.getElementById('profileModal'));
    if (profileModal) {
        profileModal.hide();
    }

    setTimeout(() => {
        const userModal = new bootstrap.Modal(document.getElementById('userRegistrationModal'));
        userModal.show();
    }, 150);
}
async function handleAddDriver(event) {
    event.preventDefault();
    showLoading();

    try {
        const imageFile = document.getElementById('driverImage').files[0];
        if (!imageFile) {
            throw new Error('الرجاء اختيار صورة للسائق');
        }

        // الحصول على الإحداثيات
        const latitude = parseFloat(document.getElementById('driverLatitude').value);
        const longitude = parseFloat(document.getElementById('driverLongitude').value);

        if (!latitude || !longitude) {
            throw new Error('يرجى تحديد موقع السائق أولاً');
        }

        // رفع الصورة إلى Firebase Storage
        const imageRef = storage.ref(`drivers/${Date.now()}_${imageFile.name}`);
        const uploadTask = await imageRef.put(imageFile);
        const imageUrl = await uploadTask.ref.getDownloadURL();

        // تجهيز بيانات السائق
        const driverData = {
            name: document.getElementById('driverName').value,
            phone: document.getElementById('driverPhone').value,
            carType: document.getElementById('carType').value,
            carModel: document.getElementById('carModel').value,
            location: document.getElementById('driverLocation').value,
            coordinates: {
                lat: latitude,
                lng: longitude
            },
            bio: document.getElementById('driverBio').value,
            imageUrl: imageUrl,
            rating: 5,
            trips: 0,
            approved: false,         // إضافة حقل الموافقة
            approvalStatus: 'pending', // حالة الموافقة
            active: false,           // حالة النشاط
            registrationDate: firebase.database.ServerValue.TIMESTAMP,
            lastUpdate: firebase.database.ServerValue.TIMESTAMP
        };

        // إضافة السائق إلى قاعدة البيانات
        const newDriverRef = await database.ref('drivers').push(driverData);

        // إغلاق النافذة المنبثقة
        const modal = bootstrap.Modal.getInstance(document.getElementById('addDriverModal'));
        modal.hide();

        // إعادة تعيين النموذج
        document.getElementById('addDriverForm').reset();
        
        // عرض رسالة نجاح
        Swal.fire({
            title: 'تم تقديم الطلب بنجاح!',
            html: `
                <div class="success-message">
                    <p>تم إرسال طلبك للمراجعة</p>
                    <p>رقم الطلب: ${newDriverRef.key}</p>
                    <small>سيتم مراجعة طلبك وتفعيل حسابك قريباً</small>
                </div>
            `,
            icon: 'success',
            confirmButtonText: 'حسناً',
            confirmButtonColor: '#FFD700'
        });

        // تحديث قائمة السائقين
        loadDrivers();

    } catch (error) {
        console.error('Error adding driver:', error);
        showToast(error.message, 'error');
    } finally {
        hideLoading();
    }
}

            // دالة البحث الرئيسية
            function searchDrivers(searchTerm, searchType = 'all') {
                const resultsContainer = document.getElementById('searchResults');
                resultsContainer.innerHTML = '<div class="text-center"><div class="spinner-border text-primary" role="status"></div></div>';

                if (!searchTerm.trim()) {
                    resultsContainer.innerHTML = '';
                    return;
                }

                const driversRef = database.ref('drivers');
                driversRef.once('value')
                    .then((snapshot) => {
                        const results = [];
                        snapshot.forEach((childSnapshot) => {
                            const driver = childSnapshot.val();
                            const driverId = childSnapshot.key;

                            const searchLower = searchTerm.toLowerCase();
                            let match = false;

                            switch (searchType) {
                                case 'name':
                                    match = driver.name.toLowerCase().includes(searchLower);
                                    break;
                                case 'location':
                                    match = driver.location.toLowerCase().includes(searchLower);
                                    break;
                                case 'car':
                                    match = driver.carType.toLowerCase().includes(searchLower) ||
                                        driver.carModel.toString().includes(searchLower);
                                    break;
                                default:
                                    match = driver.name.toLowerCase().includes(searchLower) ||
                                        driver.location.toLowerCase().includes(searchLower) ||
                                        driver.carType.toLowerCase().includes(searchLower) ||
                                        driver.carModel.toString().includes(searchLower);
                            }

                            if (match) {
                                results.push({ ...driver, id: driverId });
                            }
                        });

                        displaySearchResults(results, searchTerm);
                    })
                    .catch((error) => {
                        console.error("Error searching:", error);
                        resultsContainer.innerHTML = '<div class="no-results">حدث خطأ في البحث</div>';
                    });
            }

            // دالة عرض نتائج البحث
            function displaySearchResults(results, searchTerm) {
                const resultsContainer = document.getElementById('searchResults');

                if (results.length === 0) {
                    resultsContainer.innerHTML = '<div class="no-results">لا توجد نتائج للبحث</div>';
                    return;
                }

                resultsContainer.innerHTML = results.map(driver => `
        <div class="search-result-item" onclick="handleDriverSelect('${driver.id}')">
            <div class="driver-info">
                <img src="${driver.imageUrl}" alt="${driver.name}" class="driver-image">
                <div class="driver-details">
                    <div class="driver-name">${highlightText(driver.name, searchTerm)}</div>
                    <div class="driver-meta">
                        <i class="fas fa-map-marker-alt"></i> 
                        ${highlightText(driver.location, searchTerm)}
                    </div>
                    <div class="driver-meta">
                        <i class="fas fa-car"></i> 
                        ${highlightText(driver.carType, searchTerm)} ${highlightText(driver.carModel.toString(), searchTerm)}
                    </div>
                </div>
                <div class="driver-status ${driver.active ? 'text-success' : 'text-danger'}">
                    <i class="fas fa-circle"></i>
                </div>
            </div>
        </div>
    `).join('');
            }

            // دالة تمييز نص البحث
            function highlightText(text, searchTerm) {
                if (!searchTerm) return text;
                const regex = new RegExp(`(${searchTerm})`, 'gi');
                return text.replace(regex, '<span class="highlight">$1</span>');
            }

            // دالة معالجة اختيار السائق
            function handleDriverSelect(driverId) {
                viewDriverLocation(driverId);
                const modal = bootstrap.Modal.getInstance(document.getElementById('searchModal'));
                modal.hide();
            }

            // إعداد مستمعي الأحداث
            document.addEventListener('DOMContentLoaded', () => {
                const searchInput = document.getElementById('navbarSearchInput');
                const searchTypeInputs = document.querySelectorAll('input[name="searchType"]');
                let searchTimeout;

                // مستمع حدث البحث
                searchInput.addEventListener('input', (e) => {
                    clearTimeout(searchTimeout);
                    searchTimeout = setTimeout(() => {
                        const searchType = document.querySelector('input[name="searchType"]:checked').id.replace('search', '').toLowerCase();
                        searchDrivers(e.target.value, searchType);
                    }, 300);
                });

                // مستمع حدث تغيير نوع البحث
                searchTypeInputs.forEach(input => {
                    input.addEventListener('change', () => {
                        if (searchInput.value) {
                            const searchType = input.id.replace('search', '').toLowerCase();
                            searchDrivers(searchInput.value, searchType);
                        }
                    });
                });

                // تنظيف البحث عند إغلاق النافذة المنبثقة
                document.getElementById('searchModal').addEventListener('hidden.bs.modal', () => {
                    searchInput.value = '';
                    document.getElementById('searchResults').innerHTML = '';
                    document.getElementById('searchAll').checked = true;
                });
            });



            function filterDrivers(searchTerm) {
                const driverCards = document.querySelectorAll('.driver-card');
                searchTerm = searchTerm.toLowerCase();

                driverCards.forEach(card => {
                    const driverName = card.querySelector('.driver-name').textContent.toLowerCase();
                    const driverLocation = card.querySelector('.text-muted').textContent.toLowerCase();

                    if (driverName.includes(searchTerm) || driverLocation.includes(searchTerm)) {
                        card.style.display = 'block';
                    } else {
                        card.style.display = 'none';
                    }
                });
            }

            document.addEventListener('DOMContentLoaded', () => {
                // Initialize map if not already initialized
                if (!window.mapInitialized) {
                    window.mapInitialized = true;
                    initMap();
                }

                // Add click handlers for location chips
                const locationChips = document.querySelectorAll('.location-chip');
                locationChips.forEach((chip) => {
                    chip.addEventListener('click', () => {
                        locationChips.forEach((c) => c.classList.remove('active'));
                        chip.classList.add('active');
                        const location = chip.dataset.location;
                        loadDrivers(location);
                    });
                });

                // Set initial active state for 'all' chip
                const allChip = document.querySelector('.location-chip[data-location="all"]');
                if (allChip) {
                    allChip.classList.add('active');
                }

                // Load all drivers immediately
                loadDrivers('all');

                // Also load drivers when Firebase is ready
                firebase.database().ref().once('value')
                    .then(() => {
                        loadDrivers('all');
                    })
                    .catch(error => {
                        console.error('Error initializing Firebase:', error);
                    });
            });

            const locationChips = document.querySelectorAll('.location-chip');
            locationChips.forEach((chip) => {
                chip.addEventListener('click', () => {
                    locationChips.forEach((c) => c.classList.remove('active'));
                    chip.classList.add('active');
                    const location = chip.dataset.location;
                    loadDrivers(location);
                });
            });

            loadDrivers(); // استدعاء التحميل الأولي للسائقين.


            // قائمة المحافظات والمناطق
            const iraqProvinces = {
                "بغداد": ["الكرخ", "الرصافة", "الأعظمية", "الكاظمية", "المنصور"],
                "البصرة": ["البصرة الجديدة", "الزبير", "أبو الخصيب", "القرنة"],
                "نينوى": ["الموصل", "تلعفر", "الحمدانية", "سنجار"],
                "أربيل": ["عنكاوا", "شقلاوة", "خبات", "سوران"],
                "النجف": ["الكوفة", "المناذرة", "المشخاب"],
                "كربلاء": ["الحسينية", "الهندية", "عين التمر"],
                "كركوك": ["دبس", "الحويجة", "داقوق"],
                "الأنبار": ["الرمادي", "الفلوجة", "هيت", "حديثة"],
                // يمكن إضافة المزيد من المحافظات والمناطق
            };

            // دالة تهيئة النماذج
            function initializeForms() {
                // ملء قائمة المحافظات
                const provinceSelect = document.querySelector('select[name="province"]');
                if (provinceSelect) {
                    Object.keys(iraqProvinces).forEach(province => {
                        const option = document.createElement('option');
                        option.value = province;
                        option.textContent = province;
                        provinceSelect.appendChild(option);
                    });
                }

                // إضافة مستمعي الأحداث للنماذج
                const driverRegistrationForm = document.getElementById('driverRegistrationForm');
                if (driverRegistrationForm) {
                    driverRegistrationForm.addEventListener('submit', handleDriverRegistration);
                }
            }

            // دالة تحميل المناطق بناءً على المحافظة المختارة
            function loadAreas(province) {
                const areaSelect = document.querySelector('select[name="area"]');
                areaSelect.innerHTML = '<option value="">اختر المنطقة</option>';

                if (iraqProvinces[province]) {
                    iraqProvinces[province].forEach(area => {
                        const option = document.createElement('option');
                        option.value = area;
                        option.textContent = area;
                        areaSelect.appendChild(option);
                    });
                }
            }

            // دالة معاينة الصورة الشخصية
            function previewDriverPhoto(input) {
                const preview = document.getElementById('driverPhotoPreview');
                const placeholder = input.parentElement.querySelector('.upload-placeholder');

                if (input.files && input.files[0]) {
                    const reader = new FileReader();
                    reader.onload = function (e) {
                        preview.src = e.target.result;
                        preview.style.display = 'block';
                        placeholder.style.display = 'none';
                    };
                    reader.readAsDataURL(input.files[0]);
                }
            }

            // دالة معاينة المستندات
            function previewDocument(input, previewId) {
                const preview = document.getElementById(previewId);
                const placeholder = input.parentElement.querySelector('.upload-placeholder');

                if (input.files && input.files[0]) {
                    const reader = new FileReader();
                    reader.onload = function (e) {
                        preview.src = e.target.result;
                        preview.style.display = 'block';
                        placeholder.style.display = 'none';
                    };
                    reader.readAsDataURL(input.files[0]);
                }
            }

            // تحديث دالة معالجة تسجيل السائق
            async function handleDriverRegistration(event) {
                event.preventDefault();
                showLoading();

                try {
                    const formData = new FormData(event.target);
                    const success = await authManager.handleRegistration(formData, 'سائق');

                    if (success) {
                        event.target.reset();
                        showToast('تم التسجيل بنجاح!');
                    }
                } catch (error) {
                    console.error('Registration error:', error);
                    showToast(error.message, 'error');
                } finally {
                    hideLoading();
                }
            }
            

            // تحديث دالة معالجة تسجيل المستخدم
            async function handleUserRegistration(event) {
                event.preventDefault();
                showLoading();

                try {
                    const formData = new FormData(event.target);
                    const success = await authManager.handleRegistration(formData, 'مستخدم');

                    if (success) {
                        event.target.reset();
                        showToast('تم التسجيل بنجاح!');
                    }
                } catch (error) {
                    console.error('Registration error:', error);
                    showToast(error.message, 'error');
                } finally {
                    hideLoading();
                }
            }

            // دالة التحقق من صحة المستندات
            function validateDocuments() {
                const requiredDocuments = ['idFront', 'idBack', 'licenseFront', 'licenseBack'];
                const missingDocs = [];

                for (const docId of requiredDocuments) {
                    const input = document.getElementById(docId);
                    if (!input || !input.files || !input.files[0]) {
                        missingDocs.push(docId);
                    }
                }

                if (missingDocs.length > 0) {
                    throw new Error(`يرجى رفع المستندات التالية: ${missingDocs.join(', ')}`);
                }

                return true;
            }


            // دوال معالجة النماذج
            async function handleRegistrationForm(event, type) {
                event.preventDefault();
                const loadingOverlay = document.querySelector('.loading-spinner');

                try {
                    if (loadingOverlay) loadingOverlay.style.display = 'flex';

                    const formData = new FormData(event.target);
                    const success = await authManager.handleRegistration(formData, type);

                    if (success) {
                        event.target.reset();
                        showToast(`تم التسجيل بنجاح ك${type}!`);
                    }
                } catch (error) {
                    console.error('Registration error:', error);
                    showToast(error.message || 'حدث خطأ أثناء التسجيل', 'error');
                } finally {
                    if (loadingOverlay) loadingOverlay.style.display = 'none';
                }
            }

            // ربط النماذج بدوال المعالجة
            document.addEventListener('DOMContentLoaded', function () {
                const driverForm = document.getElementById('driverRegistrationForm');
                if (driverForm) {
                    driverForm.addEventListener('submit', (e) => handleRegistrationForm(e, 'سائق'));
                }

                const userForm = document.getElementById('userRegistrationForm');
                if (userForm) {
                    userForm.addEventListener('submit', (e) => handleRegistrationForm(e, 'مستخدم'));
                }

                // معالجة إغلاق النوافذ المنبثقة
                document.querySelectorAll('.modal').forEach(modal => {
                    modal.addEventListener('hidden.bs.modal', function () {
                        const backdrop = document.querySelector('.modal-backdrop');
                        if (backdrop) backdrop.remove();
                        document.body.classList.remove('modal-open');
                        document.body.style.overflow = '';
                        document.body.style.paddingRight = '';
                    });
                });
            });

            // دالة معالجة تسجيل السائق
            // دالة معالجة تسجيل السائق المحسنة
            async function handleDriverRegistration(event) {
                event.preventDefault();
                showLoading();

                try {
                    const formData = new FormData(event.target);
                    const fullName = formData.get('fullName')?.trim();

                    // التحقق من الاسم
                    if (!fullName) {
                        throw new Error('يرجى إدخال الاسم الكامل');
                    }

                    // التحقق من طول الاسم
                    if (fullName.length < 2 || fullName.length > 50) {
                        throw new Error('يجب أن يكون الاسم بين 2 و 50 حرف');
                    }

                    // التحقق من رقم الهاتف
                    const phone = formData.get('phone')?.trim();
                    if (!phone || phone.length < 10) {
                        throw new Error('يرجى إدخال رقم هاتف صحيح');
                    }

                    // التحقق من العمر
                    const age = parseInt(formData.get('age'));
                    if (!age || age < 18 || age > 70) {
                        throw new Error('يجب أن يكون العمر بين 18 و 70 سنة');
                    }

                    // إنشاء معرف فريد للسائق
                    const driverId = `DR${Date.now()}`;

                    // إعداد بيانات السائق
                    const driverData = {
                        id: driverId,
                        fullName: fullName,
                        age: age,
                        phone: phone,
                        vehicleType: formData.get('vehicleType')?.trim(),
                        vehicleModel: formData.get('vehicleModel')?.trim(),
                        vehicleNumber: formData.get('vehicleNumber')?.trim(),
                        vehicleColor: formData.get('vehicleColor')?.trim(),
                        province: formData.get('province')?.trim(),
                        area: formData.get('area')?.trim(),
                        address: formData.get('address')?.trim(),
                        status: 'pending',
                        createdAt: firebase.database.ServerValue.TIMESTAMP,
                        lastUpdated: firebase.database.ServerValue.TIMESTAMP
                    };

                    // التحقق من الصورة الشخصية
                    const photoFile = document.getElementById('driverPhoto').files[0];
                    if (!photoFile) {
                        throw new Error('يرجى اختيار صورة شخصية');
                    }

                    // التحقق من نوع الملف
                    const validImageTypes = ['image/jpeg', 'image/png', 'image/jpg'];
                    if (!validImageTypes.includes(photoFile.type)) {
                        throw new Error('يرجى اختيار صورة بصيغة JPG أو PNG');
                    }

                    // رفع الصورة الشخصية مع إظهار نسبة التقدم
                    try {
                        driverData.photoUrl = await uploadFile(photoFile, 'driver-photos');
                    } catch (uploadError) {
                        throw new Error('فشل في رفع الصورة الشخصية: ' + uploadError.message);
                    }

                    // رفع المستندات
                    const documents = {};
                    const requiredDocuments = {
                        idFront: 'هوية-امامي',
                        idBack: 'هوية-خلفي',
                        licenseFront: 'اجازة-امامي',
                        licenseBack: 'اجازة-خلفي'
                    };

                    for (const [inputId, docName] of Object.entries(requiredDocuments)) {
                        const file = document.getElementById(inputId).files[0];
                        if (!file) {
                            throw new Error(`يرجى رفع ${docName}`);
                        }
                        if (!validImageTypes.includes(file.type)) {
                            throw new Error(`يرجى رفع ${docName} بصيغة JPG أو PNG`);
                        }
                        try {
                            documents[docName] = await uploadFile(file, 'driver-documents');
                        } catch (uploadError) {
                            throw new Error(`فشل في رفع ${docName}: ${uploadError.message}`);
                        }
                    }
                    driverData.documents = documents;

                    // إنشاء الباركود باستخدام رقم الطلب فقط
                    let qrCodeUrl;
                    try {
                        qrCodeUrl = generateDriverQR({ id: driverId });
                        await validateQRCode(qrCodeUrl);
                        driverData.qrCode = qrCodeUrl;
                    } catch (qrError) {
                        console.error('QR Code error:', qrError);
                        // نستمر في العملية حتى لو فشل إنشاء الباركود
                        driverData.qrCode = null;
                    }

                    // حفظ البيانات في Firebase
                    try {
                        await database.ref('Drivers').child(driverId).set(driverData);
                    } catch (dbError) {
                        console.error('Firebase error:', dbError);
                        throw new Error('حدث خطأ أثناء حفظ البيانات، يرجى المحاولة مرة أخرى');
                    }

                    // عرض رسالة النجاح
                    await showSuccessModal(driverData, qrCodeUrl);

                    // إغلاق النافذة وإعادة تعيين النموذج
                    const modal = bootstrap.Modal.getInstance(document.getElementById('driverRegistrationModal'));
                    if (modal) {
                        modal.hide();
                        event.target.reset();
                        resetPreviews();
                    }

                } catch (error) {
                    console.error('Registration error:', error);
                    Swal.fire({
                        title: 'خطأ!',
                        text: error.message || 'حدث خطأ أثناء التسجيل، يرجى المحاولة مرة أخرى',
                        icon: 'error',
                        confirmButtonText: 'حسناً',
                        confirmButtonColor: '#d33'
                    });
                } finally {
                    hideLoading();
                }
            }

            // دالة مساعدة لإظهار نسبة التقدم أثناء رفع الملفات
            function showUploadProgress(progress) {
                const progressBar = document.querySelector('.upload-progress');
                if (progressBar) {
                    progressBar.style.width = `${progress}%`;
                    progressBar.textContent = `${Math.round(progress)}%`;
                }
            }
            async function uploadFile(file, folder) {
                if (!file) {
                    throw new Error('لم يتم اختيار ملف');
                }

                // التحقق من حجم الملف (الحد الأقصى 5 ميجابايت)
                const maxSize = 5 * 1024 * 1024; // 5MB
                if (file.size > maxSize) {
                    throw new Error('حجم الملف كبير جداً، يجب أن لا يتجاوز 5 ميجابايت');
                }

                try {
                    // إنشاء اسم ملف آمن
                    const safeFileName = Date.now() + '_' + file.name.replace(/[^a-zA-Z0-9._-]/g, '_');
                    const fileRef = storage.ref(`${folder}/${safeFileName}`);

                    // رفع الملف مع إظهار نسبة التقدم
                    const uploadTask = fileRef.put(file);

                    return new Promise((resolve, reject) => {
                        uploadTask.on('state_changed',
                            (snapshot) => {
                                const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;
                                console.log('Upload progress:', progress);
                            },
                            (error) => {
                                console.error('Upload error:', error);
                                reject(new Error('فشل في رفع الملف، يرجى المحاولة مرة أخرى'));
                            },
                            async () => {
                                try {
                                    const downloadURL = await uploadTask.snapshot.ref.getDownloadURL();
                                    resolve(downloadURL);
                                } catch (error) {
                                    reject(new Error('فشل في الحصول على رابط الملف'));
                                }
                            }
                        );
                    });
                } catch (error) {
                    console.error('Error in uploadFile:', error);
                    throw new Error('فشل في رفع الملف، يرجى المحاولة مرة أخرى');
                }
            }

            // دالة إعادة تعيين معاينات الصور
            function resetPreviews() {
                const previews = document.querySelectorAll('img[id$="Preview"]');
                const placeholders = document.querySelectorAll('.upload-placeholder');

                previews.forEach(preview => {
                    preview.src = '#';
                    preview.style.display = 'none';
                });

                placeholders.forEach(placeholder => {
                    placeholder.style.display = 'flex';
                });
            }

            // دوال فتح نوافذ التسجيل
            function openDriverRegistration() {
                const profileModal = bootstrap.Modal.getInstance(document.getElementById('profileModal'));
                profileModal.hide();

                const driverModal = new bootstrap.Modal(document.getElementById('driverRegistrationModal'));
                driverModal.show();
            }

            function openUserRegistration() {
                // يمكن إضافة نافذة تسجيل المستخدم هنا
                showToast('سيتم إضافة تسجيل المستخدمين قريباً');
            }

            // تهيئة عند تحميل الصفحة
            document.addEventListener('DOMContentLoaded', initializeForms);

            function generateDriverQR(driverData) {
                try {
                    // استخدام رقم الطلب فقط لإنشاء الباركود
                    const requestId = driverData.id; // مثال: DR1734725935436

                    const qrContainer = document.createElement('div');
                    new QRCode(qrContainer, {
                        text: requestId, // استخدام رقم الطلب فقط
                        width: 128,
                        height: 128,
                        colorDark: "#000000",
                        colorLight: "#ffffff",
                        correctLevel: QRCode.CorrectLevel.L, // مستوى تصحيح منخفض لأن البيانات بسيطة
                        quietZone: 10,
                        quietZoneColor: "#ffffff"
                    });

                    const qrImage = qrContainer.querySelector('img');
                    if (!qrImage || !qrImage.src) {
                        throw new Error('فشل في إنشاء صورة QR');
                    }

                    return qrImage.src;
                } catch (error) {
                    console.error('خطأ في إنشاء QR code:', error);
                    throw new Error('فشل في إنشاء رمز QR');
                }
            }

            // تحديث دالة عرض نافذة النجاح
            function showSuccessModal(driverData, qrCodeUrl) {
                Swal.fire({
                    title: '<strong>تم تقديم طلبك بنجاح!</strong>',
                    html: `
            <div class="success-registration-modal">
                <div class="success-icon">
                    <i class="fas fa-check-circle"></i>
                </div>
                <div class="registration-details">
                    <p class="lead">شكراً لك، ${driverData.fullName}</p>
                    <p>تم استلام طلبك وسيتم مراجعته من قبل فريقنا.</p>
                    <p>رقم الطلب: <strong>${driverData.id}</strong></p>
                </div>
                <div class="qr-code-section">
                    <p>الباركود الخاص بطلبك:</p>
                    <img src="${qrCodeUrl}" alt="رمز QR" class="qr-code-image">
                    <button class="download-qr-btn" onclick="downloadQRCode('${qrCodeUrl}', '${driverData.id}')">
                        <i class="fas fa-download"></i>
                        تحميل الباركود
                    </button>
                </div>
                <div class="note-section">
                    <p>* يرجى الاحتفاظ برقم الطلب والباركود للمراجعة</p>
                    <p>* يمكنك استخدام هذا الباركود لتتبع حالة طلبك</p>
                </div>
            </div>
        `,
                    icon: 'success',
                    confirmButtonText: 'تم',
                    confirmButtonColor: '#FFD700',
                    allowOutsideClick: false,
                    customClass: {
                        popup: 'success-registration-popup'
                    }
                });
            }

            // دالة للتحقق من صحة الباركود
            function validateQRCode(qrCodeUrl) {
                return new Promise((resolve, reject) => {
                    const img = new Image();
                    img.onload = () => resolve(true);
                    img.onerror = () => reject(new Error('فشل في إنشاء الباركود'));
                    img.src = qrCodeUrl;
                });
            }


            // دالة تحميل الباركود كصورة
            function downloadQRCode(dataUrl, driverId) {
                const link = document.createElement('a');
                link.download = `driver-qr-${driverId}.png`;
                link.href = dataUrl;
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
            }

            // دالة عرض نافذة النجاح
            function showSuccessModal(driverData, qrCodeUrl) {
                Swal.fire({
                    title: '<strong>تم تقديم طلبك بنجاح!</strong>',
                    html: `
            <div class="success-registration-modal">
                <div class="success-icon">
                    <i class="fas fa-check-circle"></i>
                </div>
                <div class="registration-details">
                    <p class="lead">شكراً لك، ${driverData.fullName}</p>
                    <p>تم استلام طلبك وسيتم مراجعته من قبل فريقنا.</p>
                    <p>رقم الطلب: <strong>${driverData.id}</strong></p>
                </div>
                <div class="qr-code-section">
                    <p>الباركود الخاص بك:</p>
                    <img src="${qrCodeUrl}" alt="رمز QR" class="qr-code-image">
                    <button class="download-qr-btn" onclick="downloadQRCode('${qrCodeUrl}', '${driverData.id}')">
                        <i class="fas fa-download"></i>
                        تحميل الباركود
                    </button>
                </div>
                <div class="note-section">
                    <p>* يرجى الاحتفاظ برقم الطلب والباركود للمراجعة</p>
                </div>
            </div>
        `,
                    icon: 'success',
                    confirmButtonText: 'تم',
                    confirmButtonColor: '#FFD700',
                    allowOutsideClick: false,
                    customClass: {
                        popup: 'success-registration-popup'
                    }
                });
            }

            function generateDriverQR(driverData) {
                // استخدام مكتبة QRCode.js بشكل صحيح
                const qrContainer = document.createElement('div');
                new QRCode(qrContainer, {
                    text: JSON.stringify({
                        id: driverData.id,
                        name: driverData.fullName,
                        phone: driverData.phone
                    }),
                    width: 256,
                    height: 256
                });
                return qrContainer.firstChild.toDataURL();
            }
            function submitDriverRegistration() {
                const form = document.getElementById('driverRegistrationForm');

                // التحقق من صحة البيانات أولاً
                if (!validateForm(form)) {
                    return;
                }

                // معالجة التسجيل
                processRegistration(new FormData(form));
            }

            async function processRegistration(formData) {
                try {
                    // معالجة البيانات على مراحل
                    const basicInfo = await saveBasicInfo(formData);
                    const documents = await saveDocuments(formData);

                    await finalizeRegistration(basicInfo, documents);

                    showSuccessMessage();
                } catch (error) {
                    showErrorMessage(error);
                }
            }
            function optimizeImage(file) {
                return new Promise((resolve) => {
                    const reader = new FileReader();
                    reader.onload = (e) => {
                        const img = new Image();
                        img.onload = () => {
                            const canvas = document.createElement('canvas');
                            // تقليل حجم الصورة
                            const MAX_WIDTH = 800;
                            const MAX_HEIGHT = 600;
                            let width = img.width;
                            let height = img.height;

                            if (width > height) {
                                if (width > MAX_WIDTH) {
                                    height *= MAX_WIDTH / width;
                                    width = MAX_WIDTH;
                                }
                            } else {
                                if (height > MAX_HEIGHT) {
                                    width *= MAX_HEIGHT / height;
                                    height = MAX_HEIGHT;
                                }
                            }

                            canvas.width = width;
                            canvas.height = height;
                            const ctx = canvas.getContext('2d');
                            ctx.drawImage(img, 0, 0, width, height);

                            canvas.toBlob((blob) => {
                                resolve(blob);
                            }, 'image/jpeg', 0.7);
                        };
                        img.src = e.target.result;
                    };
                    reader.readAsDataURL(file);
                });
            }



            function displayAllDrivers() {
                const drivers = getAllDrivers(); // قم باستدعاء البيانات
                const grid = document.getElementById('driversGrid');
                grid.innerHTML = ''; // تنظيف الشبكة
                drivers.forEach(driver => {
                    const card = createDriverCard(driver); // قم بإنشاء البطاقة
                    grid.appendChild(card);
                });
            }
            document.addEventListener('DOMContentLoaded', function () {
                // التأكد من تحميل Firebase
                if (typeof firebase !== 'undefined') {
                    // تهيئة Firebase
                    firebase.initializeApp(firebaseConfig);

                    // بدء تحميل البيانات
                    loadDrivers();

                    // تهيئة الخريطة
                    if (!window.mapInitialized) {
                        window.mapInitialized = true;
                        initMap();
                    }
                } else {
                    console.error('Firebase not loaded');
                }
            });




            document.addEventListener('DOMContentLoaded', function () {
                displayAllDrivers(); // استدعاء الدالة التي تعرض جميع السائقين
                document.querySelector('.location-chip[data-location="all"]').classList.add('active'); // تفعيل فلتر "الكل"
            });
            function displayAllDrivers() {
                const drivers = getAllDrivers(); // استدعاء البيانات
                const grid = document.getElementById('driversGrid');
                grid.innerHTML = ''; // تنظيف المحتوى
                drivers.forEach(driver => {
                    const card = createDriverCard(driver); // إنشاء بطاقة لكل سائق
                    grid.appendChild(card);
                });
            }
            document.querySelectorAll('.location-chip').forEach(chip => {
                chip.addEventListener('click', function () {
                    document.querySelectorAll('.location-chip').forEach(c => c.classList.remove('active'));
                    this.classList.add('active');
                    const location = this.getAttribute('data-location');
                    if (location === 'all') {
                        displayAllDrivers(); // عرض كل السائقين
                    } else {
                        filterDrivers(location); // تصفية السائقين بناءً على الموقع
                    }
                });
            });

            function toggleSideNav() {
                const sideNav = document.getElementById('sideNav');
                const navBackdrop = document.getElementById('navBackdrop');
                const body = document.body;

                // Toggle الشريط الجانبي
                sideNav.classList.toggle('open');
                navBackdrop.classList.toggle('show');
                body.classList.toggle('side-nav-open'); // إضافة/إزالة تعطيل التمرير
            }
            function openUserRegistration() {
                const profileModal = bootstrap.Modal.getInstance(document.getElementById('profileModal'));
                profileModal.hide();

                const userModal = new bootstrap.Modal(document.getElementById('userRegistrationModal'));
                userModal.show();
            }

            // دالة معاينة الصورة الشخصية
            function previewUserPhoto(input) {
                const preview = document.getElementById('userPhotoPreview');
                const placeholder = input.parentElement.querySelector('.upload-placeholder');

                if (input.files && input.files[0]) {
                    const reader = new FileReader();
                    reader.onload = function (e) {
                        preview.src = e.target.result;
                        preview.style.display = 'block';
                        placeholder.style.display = 'none';
                    }
                    reader.readAsDataURL(input.files[0]);
                }
            }

            // دالة معالجة تسجيل المستخدم
            async function handleUserRegistration(event) {
                event.preventDefault();
                showLoading();

                try {
                    const formData = new FormData(event.target);

                    // التحقق من تطابق كلمات المرور
                    if (formData.get('password') !== formData.get('confirmPassword')) {
                        throw new Error('كلمات المرور غير متطابقة');
                    }

                    // التحقق من الموافقة على الشروط والأحكام
                    if (!formData.get('terms')) {
                        throw new Error('يجب الموافقة على الشروط والأحكام');
                    }

                    // إنشاء معرف فريد للمستخدم
                    const userId = `USER${Date.now()}`;

                    // رفع الصورة الشخصية
                    let photoUrl = null;
                    const photoFile = document.getElementById('userPhoto').files[0];
                    if (photoFile) {
                        const imageRef = storage.ref(`users/${userId}/${Date.now()}_${photoFile.name}`);
                        const uploadTask = await imageRef.put(photoFile);
                        photoUrl = await uploadTask.ref.getDownloadURL();
                    }

                    // إعداد بيانات المستخدم
                    const userData = {
                        id: userId,
                        fullName: formData.get('fullName'),
                        email: formData.get('email'),
                        phone: formData.get('phone'),
                        province: formData.get('province'),
                        area: formData.get('area'),
                        address: formData.get('address'),
                        
                        photoUrl: photoUrl,
                        userType: userType,
                        createdAt: firebase.database.ServerValue.TIMESTAMP


                    };

                    // حفظ البيانات في Firebase
                    await database.ref('users').child(userId).set(userData);

                    // إغلاق النافذة وإظهار رسالة النجاح
                    const modal = bootstrap.Modal.getInstance(document.getElementById('userRegistrationModal'));
                    modal.hide();

                    Swal.fire({
                        title: 'تم التسجيل بنجاح!',
                        text: 'مرحباً بك في تطبيق تاكسي العراق',
                        icon: 'success',
                        confirmButtonColor: '#FFD700',
                        confirmButtonText: 'تم'
                    });

                } catch (error) {
                    console.error('Registration error:', error);
                    Swal.fire({
                        title: 'خطأ!',
                        text: error.message || 'حدث خطأ أثناء التسجيل',
                        icon: 'error',
                        confirmButtonColor: '#d33',
                        confirmButtonText: 'حسناً'
                    });
                } finally {
                    hideLoading();
                }
            }

            // إضافة مستمع الحدث لنموذج التسجيل
            document.addEventListener('DOMContentLoaded', function () {
                const userRegistrationForm = document.getElementById('userRegistrationForm');
                if (userRegistrationForm) {
                    userRegistrationForm.addEventListener('submit', handleUserRegistration);
                }
            });
            //اعدادات التنبيه بن السائق في الجوار

            class LocationNotificationSystem {
                constructor() {
                    this.database = firebase.database();
                    this.NOTIFICATION_DISTANCE = 500; // المسافة بالأمتار التي عندها يتم إرسال الإشعار
                    this.notificationSent = new Set(); // لتجنب تكرار الإشعارات
                    this.activeWatches = new Map(); // لتتبع مراقبة المواقع النشطة
                }

                // حساب المسافة بين نقطتين
                calculateDistance(lat1, lon1, lat2, lon2) {
                    const R = 6371e3; // نصف قطر الأرض بالأمتار
                    const φ1 = lat1 * Math.PI / 180;
                    const φ2 = lat2 * Math.PI / 180;
                    const Δφ = (lat2 - lat1) * Math.PI / 180;
                    const Δλ = (lon2 - lon1) * Math.PI / 180;

                    const a = Math.sin(Δφ / 2) * Math.sin(Δφ / 2) +
                        Math.cos(φ1) * Math.cos(φ2) *
                        Math.sin(Δλ / 2) * Math.sin(Δλ / 2);
                    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));

                    return R * c;
                }

                // تحديث موقع السائق
                async updateDriverLocation(driverId, latitude, longitude) {
                    try {
                        const locationUpdate = {
                            latitude,
                            longitude,
                            timestamp: firebase.database.ServerValue.TIMESTAMP
                        };

                        // تحديث موقع السائق في قاعدة البيانات
                        await this.database.ref(`drivers/${driverId}/location`).set(locationUpdate);

                        // تحديث موقع السائق على الخريطة إذا كان موجوداً
                        if (window.map && window.markerLayer) {
                            const driverMarker = window.markerLayer.getLayers().find(
                                layer => layer.options.driverId === driverId
                            );

                            if (driverMarker) {
                                driverMarker.setLatLng([latitude, longitude]);
                            }
                        }

                        // التحقق من الرحلات النشطة
                        this.checkActiveTrips(driverId, { latitude, longitude });
                    } catch (error) {
                        console.error('Error updating driver location:', error);
                        showToast('حدث خطأ في تحديث الموقع', 'error');
                    }
                }

                // التحقق من الرحلات النشطة
                async checkActiveTrips(driverId, driverLocation) {
                    try {
                        const tripsRef = this.database.ref('trips');
                        const activeTrips = await tripsRef
                            .orderByChild('driverId')
                            .equalTo(driverId)
                            .once('value');

                        activeTrips.forEach(snapshot => {
                            const trip = snapshot.val();
                            if (trip.status === 'active' && trip.pickupLocation) {
                                const distance = this.calculateDistance(
                                    driverLocation.latitude,
                                    driverLocation.longitude,
                                    trip.pickupLocation.latitude,
                                    trip.pickupLocation.longitude
                                );

                                if (distance <= this.NOTIFICATION_DISTANCE && !this.notificationSent.has(trip.id)) {
                                    this.sendArrivalNotification(trip.userId, trip.id, driverId);
                                    this.notificationSent.add(trip.id);
                                }
                            }
                        });
                    } catch (error) {
                        console.error('Error checking active trips:', error);
                    }
                }

                // إرسال إشعار الوصول
                async sendArrivalNotification(userId, tripId, driverId) {
                    try {
                        // الحصول على معلومات السائق
                        const driverSnapshot = await this.database.ref(`drivers/${driverId}`).once('value');
                        const driver = driverSnapshot.val();

                        // الحصول على token المستخدم
                        const userTokenSnapshot = await this.database.ref(`users/${userId}/notificationToken`).once('value');
                        const userToken = userTokenSnapshot.val();

                        if (userToken) {
                            const notification = {
                                title: "السائق في انتظارك!",
                                body: `${driver.name} وصل إلى موقعك وهو في انتظارك الآن.`,
                                icon: driver.imageUrl || '/default-driver-icon.png'
                            };

                            // تحديث حالة الرحلة
                            await this.database.ref(`trips/${tripId}`).update({
                                driverArrived: true,
                                arrivalTime: firebase.database.ServerValue.TIMESTAMP
                            });

                            // إظهار الإشعار في واجهة المستخدم
                            this.showInAppNotification(notification);

                            // إرسال إشعار عبر FCM إذا كان متاحاً
                            if (firebase.messaging && userToken) {
                                try {
                                    const message = {
                                        token: userToken,
                                        notification: notification,
                                        data: {
                                            tripId: tripId,
                                            driverId: driverId,
                                            type: 'driver_arrival'
                                        }
                                    };

                                    await firebase.messaging().send(message);
                                } catch (fcmError) {
                                    console.error('Error sending FCM notification:', fcmError);
                                }
                            }

                            // محاولة إرسال إشعار محلي
                            if ('Notification' in window && Notification.permission === 'granted') {
                                new Notification(notification.title, {
                                    body: notification.body,
                                    icon: notification.icon
                                });
                            }
                        }
                    } catch (error) {
                        console.error('Error sending arrival notification:', error);
                    }
                }

                // إظهار إشعار في واجهة المستخدم
                showInAppNotification(notification) {
                    const toast = document.createElement('div');
                    toast.className = 'notification-toast animate__animated animate__fadeInRight';
                    toast.innerHTML = `
        <div class="notification-content">
            <div class="notification-title">${notification.title}</div>
            <div class="notification-body">${notification.body}</div>
        </div>
        <button class="notification-close" onclick="this.parentElement.remove()">×</button>
    `;

                    document.body.appendChild(toast);

                    // تشغيل صوت الإشعار
                    const audio = new Audio('/https://github.com/AlQasimMall/taxialpasha/blob/main/%D8%A7%D9%84%D9%87%D8%A7%D8%AA%D9%81-%D8%A7%D9%84%D8%AB%D8%A7%D8%A8%D8%AA.mp3');
                    audio.play().catch(error => console.log('Could not play notification sound:', error));

                    // إزالة الإشعار بعد 5 ثواني
                    setTimeout(() => {
                        toast.classList.replace('animate__fadeInRight', 'animate__fadeOutRight');
                        setTimeout(() => toast.remove(), 300);
                    }, 5000);
                }

                // بدء تتبع موقع السائق
                startDriverLocationUpdates(driverId) {
                    if (!navigator.geolocation) {
                        showToast('خدمة تحديد الموقع غير متوفرة في متصفحك', 'error');
                        return null;
                    }

                    const watchId = navigator.geolocation.watchPosition(
                        (position) => {
                            this.updateDriverLocation(
                                driverId,
                                position.coords.latitude,
                                position.coords.longitude
                            );
                        },
                        (error) => {
                            console.error('Geolocation error:', error);
                            showToast('حدث خطأ في تحديد موقعك', 'error');
                        },
                        {
                            enableHighAccuracy: true,
                            timeout: 10000,
                            maximumAge: 0
                        }
                    );

                    this.activeWatches.set(driverId, watchId);
                    return watchId;
                }

                // إيقاف تتبع موقع السائق
                stopDriverLocationUpdates(driverId) {
                    const watchId = this.activeWatches.get(driverId);
                    if (watchId) {
                        navigator.geolocation.clearWatch(watchId);
                        this.activeWatches.delete(driverId);
                    }
                }
            }

            // إنشاء نسخة عامة من نظام الإشعارات
            const locationNotificationSystem = new LocationNotificationSystem();

            // نظام الإشعارات المحسن
            // نظام الإشعارات المحسن
            class NotificationSystem {
                constructor() {
                    this.container = this.createContainer();
                    this.notifications = new Set();
                    this.initialize();
                }

                // تهيئة نظام الإشعارات
                initialize() {
                    this.checkNotificationSupport()
                        .then(() => this.requestPermission())
                        .catch(error => {
                            console.error('Notification initialization error:', error);
                        });
                }

                // إنشاء حاوية الإشعارات
                createContainer() {
                    const container = document.createElement('div');
                    container.className = 'notification-container';
                    document.body.appendChild(container);
                    return container;
                }

                // التحقق من دعم الإشعارات
                async checkNotificationSupport() {
                    if (!('Notification' in window)) {
                        throw new Error('المتصفح لا يدعم الإشعارات');
                    }
                }

                // طلب إذن الإشعارات
                async requestPermission() {
                    if (Notification.permission === 'default') {
                        this.showPermissionDialog();
                    } else if (Notification.permission === 'granted') {
                        this.show('مرحباً بك!', 'تم تفعيل الإشعارات بنجاح', 'success');
                    }
                }

                // عرض نافذة طلب الإذن
                showPermissionDialog() {
                    const dialog = document.createElement('div');
                    dialog.className = 'permission-dialog';
                    dialog.innerHTML = `
            <div class="permission-dialog-icon">
                <i class="fas fa-bell"></i>
            </div>
            <h3 class="permission-dialog-title">تفعيل الإشعارات</h3>
            <p class="permission-dialog-message">
                نود إرسال إشعارات لإبقائك على اطلاع بآخر التحديثات والعروض.
                هل تود تفعيل الإشعارات؟
            </p>
            <div class="permission-dialog-buttons">
                <button class="permission-button allow">نعم، تفعيل الإشعارات</button>
                <button class="permission-button deny">لا، شكراً</button>
            </div>
        `;

                    document.body.appendChild(dialog);

                    dialog.querySelector('.allow').addEventListener('click', async () => {
                        const permission = await Notification.requestPermission();
                        if (permission === 'granted') {
                            this.show('تم!', 'تم تفعيل الإشعارات بنجاح', 'success');
                        }
                        dialog.remove();
                    });

                    dialog.querySelector('.deny').addEventListener('click', () => {
                        dialog.remove();
                        this.show('تم الإلغاء', 'يمكنك تفعيل الإشعارات لاحقاً من الإعدادات', 'info');
                    });
                }

                // عرض إشعار
                show(title, message, type = 'info', duration = 3000) {
                    const notification = document.createElement('div');
                    notification.className = `notification ${type}`;
                    notification.innerHTML = `
            <div class="notification-icon">
                ${this.getIconForType(type)}
            </div>
            <div class="notification-content">
                <div class="notification-title">${title}</div>
                <div class="notification-message">${message}</div>
            </div>
            <button class="notification-close">&times;</button>
            <div class="notification-progress"></div>
        `;

                    const closeBtn = notification.querySelector('.notification-close');
                    closeBtn.addEventListener('click', () => this.close(notification));

                    this.container.appendChild(notification);
                    this.notifications.add(notification);

                    setTimeout(() => this.close(notification), duration);

                    return notification;
                }

                // إغلاق إشعار
                close(notification) {
                    if (!this.notifications.has(notification)) return;

                    notification.style.animation = 'slideOut 0.5s ease forwards';

                    setTimeout(() => {
                        notification.remove();
                        this.notifications.delete(notification);
                    }, 500);
                }

                // الحصول على أيقونة الإشعار حسب النوع
                getIconForType(type) {
                    const icons = {
                        success: '<i class="fas fa-check-circle"></i>',
                        error: '<i class="fas fa-times-circle"></i>',
                        warning: '<i class="fas fa-exclamation-circle"></i>',
                        info: '<i class="fas fa-info-circle"></i>'
                    };
                    return icons[type] || icons.info;
                }
            }

            // إنشاء نسخة عامة من نظام الإشعارات
            const notificationSystem = new NotificationSystem();

            // دالة مختصرة لعرض الإشعارات
            function showNotification(title, message, type = 'info') {
                notificationSystem.show(title, message, type);
            }

            // مثال على الاستخدام عند تحميل الصفحة
            document.addEventListener('DOMContentLoaded', () => {
                // إشعار ترحيبي
                setTimeout(() => {
                    showNotification(
                        'مرحباً بك في تاكسي العراق!',
                        'نحن سعداء بانضمامك إلينا',
                        'info'
                    );
                }, 1000);

                // التحقق من حالة الاتصال
                if (navigator.onLine) {
                    showNotification(
                        'متصل بالإنترنت',
                        'يمكنك الآن استخدام جميع خدمات التطبيق',
                        'success'
                    );
                } else {
                    showNotification(
                        'غير متصل',
                        'يرجى التحقق من اتصال الإنترنت',
                        'error'
                    );
                }
            });

            // مراقبة حالة الاتصال
            window.addEventListener('online', () => {
                showNotification(
                    'تم استعادة الاتصال',
                    'يمكنك الآن استخدام جميع خدمات التطبيق',
                    'success'
                );
            });

            window.addEventListener('offline', () => {
                showNotification(
                    'انقطع الاتصال',
                    'يرجى التحقق من اتصال الإنترنت',
                    'error'
                );
            });
            // إضافة هذا الكود في ملف app.js
            class NotificationTester {
                constructor() {
                    this.messaging = firebase.messaging();
                    this.initialized = false;
                }

                async testNotifications() {
                    try {
                        // التحقق من دعم الإشعارات
                        if (!('Notification' in window)) {
                            throw new Error('المتصفح لا يدعم الإشعارات');
                        }

                        // طلب الإذن
                        const permission = await Notification.requestPermission();
                        console.log('حالة إذن الإشعارات:', permission);

                        if (permission !== 'granted') {
                            throw new Error('لم يتم منح إذن الإشعارات');
                        }

                        // الحصول على التوكن
                        const token = await this.messaging.getToken({
                            vapidKey: 'BI9cpoewcZa1ftyZ_bGjO0GYa4_cT0HNja4YFd6FwLwHg5c0gQ5iSj_MJZRhMxKdgJ0-d-_rEXcpSQ_cx7GqCSc'
                        });

                        console.log('تم الحصول على التوكن:', token);

                        // حفظ التوكن في قاعدة البيانات
                        await this.saveTokenToDatabase(token);

                        // إرسال إشعار تجريبي
                        this.showTestNotification();

                        return {
                            success: true,
                            token: token,
                            message: 'تم إعداد الإشعارات بنجاح'
                        };

                    } catch (error) {
                        console.error('خطأ في اختبار الإشعارات:', error);
                        return {
                            success: false,
                            error: error.message
                        };
                    }
                }

                async saveTokenToDatabase(token) {
                    try {
                        const userId = localStorage.getItem('userId') || 'anonymous';
                        await firebase.database().ref(`fcm_tokens/${userId}`).set({
                            token: token,
                            lastUpdated: firebase.database.ServerValue.TIMESTAMP,
                            device: {
                                userAgent: navigator.userAgent,
                                platform: navigator.platform
                            }
                        });
                        console.log('تم حفظ التوكن في قاعدة البيانات');
                    } catch (error) {
                        console.error('خطأ في حفظ التوكن:', error);
                    }
                }

                showTestNotification() {
                    const notification = new Notification('اختبار الإشعارات', {
                        body: 'هذا إشعار تجريبي للتأكد من عمل النظام',
                        icon: '/pngwing.com.png',
                        badge: '/pngwing.com.png'
                    });

                    notification.onclick = () => {
                        console.log('تم النقر على الإشعار التجريبي');
                        window.focus();
                        notification.close();
                    };
                }
            }



            // إضافة في نهاية الملف
            function showNearbyDriversMap() {
                // إغلاق القائمة الجانبية
                toggleSideNav();

                // عرض نافذة منبثقة تحتوي على الخريطة
                Swal.fire({
                    title: 'السائقين في الجوار',
                    html: '<div id="nearbyDriversMap"></div>',
                    width: '90%',
                    padding: '0',
                    background: '#1a1a1a',
                    showConfirmButton: false,
                    showCloseButton: true,
                    customClass: {
                        popup: 'dark-popup',
                        title: 'text-white',
                        htmlContainer: 'p-0'
                    },
                    didOpen: () => {
                        // تهيئة الخريطة
                        const mapContainer = document.getElementById('nearbyDriversMap');
                        const root = ReactDOM.createRoot(mapContainer);
                        root.render(React.createElement(NearbyDriversMap));
                    }
                });
            }

            // تحديث دالة إنشاء مؤشر السائق
            function createDriverMarker(driver) {
                // حساب حالة السائق ولون المؤشر
                const isActive = driver.active;
                const statusColor = isActive ? '#2ECC40' : '#FF4136';

                // إنشاء أيقونة مخصصة مع تأثيرات متحركة
                const icon = L.divIcon({
                    className: 'custom-div-icon',
                    html: `
            <div class="driver-marker ${isActive ? 'active' : 'inactive'}">
                <div class="marker-pulse" style="border-color: ${statusColor}"></div>
                <div class="marker-container">
                    <img src="${driver.imageUrl || 'https://firebasestorage.googleapis.com/v0/b/messageemeapp.appspot.com/o/driver-images%2F7605a607-6cf8-4b32-aee1-fa7558c98452.png?alt=media&token=5cf9e67c-ba6e-4431-a6a0-79dede15b527'}" 
                         alt="${driver.name}"
                         onerror="this.classList.add('error')">
                    <div class="marker-status" style="background-color: ${statusColor}">
                        <i class="fas fa-taxi"></i>
                    </div>
                </div>
            </div>
        `,
                    iconSize: [60, 60],
                    iconAnchor: [30, 30]
                });

                // إنشاء المؤشر مع معلومات إضافية
                const marker = L.marker([driver.coordinates.lat, driver.coordinates.lng], {
                    icon: icon,
                    title: driver.name,
                    riseOnHover: true,
                    zIndexOffset: isActive ? 1000 : 0
                });

                // إضافة النافذة المنبثقة المحسنة
                marker.bindPopup(`
        <div class="driver-popup">
            <div class="driver-popup-header">
                <div class="popup-status ${isActive ? 'active' : 'inactive'}">
                    ${isActive ? 'متاح الآن' : 'مشغول'}
                </div>
                <img src="${driver.imageUrl || 'https://firebasestorage.googleapis.com/v0/b/messageemeapp.appspot.com/o/driver-images%2F7605a607-6cf8-4b32-aee1-fa7558c98452.png?alt=media&token=5cf9e67c-ba6e-4431-a6a0-79dede15b527'}" 
                     alt="${driver.name}"
                     onerror="this.src='https://firebasestorage.googleapis.com/v0/b/messageemeapp.appspot.com/o/driver-images%2F7605a607-6cf8-4b32-aee1-fa7558c98452.png?alt=media&token=5cf9e67c-ba6e-4431-a6a0-79dede15b527'">
                <h4>${driver.name}</h4>
                <div class="driver-rating">
                    ${generateRatingStars(driver.rating || 5.0)}
                </div>
            </div>
            <div class="driver-popup-info">
                <div class="info-row">
                    <i class="fas fa-car"></i>
                    <span>${driver.carType} - ${driver.carModel}</span>
                </div>
                <div class="info-row">
                    <i class="fas fa-route"></i>
                    <span>${driver.distance?.toFixed(1) || '0.0'} كم</span>
                </div>
                <div class="info-row">
                    <i class="fas fa-clock"></i>
                    <span>${calculateArrivalTime(driver.distance)} دقيقة للوصول</span>
                </div>
            </div>
            <div class="driver-popup-actions">
                <button onclick="openChatWindow('${driver.id}')" class="chat-btn ripple">
                    <i class="fas fa-comment"></i>
                    <span>مراسلة</span>
                </button>
                <button onclick="bookDriver('${driver.id}')" class="book-btn ripple" 
                        ${!isActive ? 'disabled' : ''}>
                    <i class="fas fa-taxi"></i>
                    <span>حجز</span>
                </button>
            </div>
            ${!isActive ? '<div class="booking-notice">السائق مشغول حالياً</div>' : ''}
        </div>
    `, {
                    className: `custom-popup ${isActive ? 'active' : 'inactive'}`,
                    minWidth: 280,
                    maxWidth: 320,
                    autoClose: false,
                    closeButton: true
                });

                // إضافة مستمعي الأحداث للتفاعل
                marker.on('mouseover', function () {
                    this.getElement().classList.add('marker-hover');
                });

                marker.on('mouseout', function () {
                    this.getElement().classList.remove('marker-hover');
                });

                return marker;
            }

            // دالة مساعدة لإنشاء نجوم التقييم
            function generateRatingStars(rating) {
                const fullStars = Math.floor(rating);
                const hasHalfStar = rating % 1 >= 0.5;
                let starsHtml = '';

                for (let i = 0; i < 5; i++) {
                    if (i < fullStars) {
                        starsHtml += '<i class="fas fa-star"></i>';
                    } else if (i === fullStars && hasHalfStar) {
                        starsHtml += '<i class="fas fa-star-half-alt"></i>';
                    } else {
                        starsHtml += '<i class="far fa-star"></i>';
                    }
                }

                return `<div class="stars-container">${starsHtml}</div>`;
            }

            // دالة لحساب وقت الوصول التقريبي
            function calculateArrivalTime(distance) {
                // افتراض متوسط سرعة 40 كم/ساعة
                if (!distance) return '--';
                const timeInMinutes = Math.ceil((distance * 60) / 40);
                return timeInMinutes;
            }

            // تحسين معالج أخطاء الصور
            document.addEventListener('error', function (e) {
                if (e.target.tagName.toLowerCase() === 'img') {
                    const defaultImage = 'https://firebasestorage.googleapis.com/v0/b/messageemeapp.appspot.com/o/driver-images%2F7605a607-6cf8-4b32-aee1-fa7558c98452.png?alt=media&token=5cf9e67c-ba6e-4431-a6a0-79dede15b527';
                    if (e.target.src !== defaultImage) {
                        e.target.src = defaultImage;
                        e.target.classList.add('error');
                        console.warn(`Failed to load image for driver, using default avatar`);
                    }
                }
            }, true);

            // إضافة تأثير Ripple للأزرار
            document.addEventListener('click', function (e) {
                const rippleButton = e.target.closest('.ripple');
                if (rippleButton && !rippleButton.disabled) {
                    const rect = rippleButton.getBoundingClientRect();
                    const ripple = document.createElement('div');
                    ripple.className = 'ripple-effect';
                    ripple.style.left = `${e.clientX - rect.left}px`;
                    ripple.style.top = `${e.clientY - rect.top}px`;
                    rippleButton.appendChild(ripple);
                    setTimeout(() => ripple.remove(), 1000);
                }
            });
            function captureCurrentLocation() {
                // إنشاء وعد لمعالجة تحديد الموقع
                return new Promise((resolve, reject) => {
                    if (!navigator.geolocation) {
                        Swal.fire({
                            icon: 'error',
                            title: 'خطأ!',
                            text: 'متصفحك لا يدعم تحديد الموقع'
                        });
                        reject('Geolocation not supported');
                        return;
                    }

                    // عرض مؤشر التحميل
                    const loadingAlert = Swal.fire({
                        title: 'جاري تحديد موقعك...',
                        text: 'يرجى الانتظار',
                        allowOutsideClick: false,
                        allowEscapeKey: false,
                        showConfirmButton: false,
                        didOpen: () => {
                            Swal.showLoading();
                        }
                    });

                    navigator.geolocation.getCurrentPosition(
                        (position) => {
                            // إغلاق مؤشر التحميل فوراً
                            loadingAlert.close();

                            // تحديث حقول الإحداثيات
                            document.getElementById('driverLatitude').value = position.coords.latitude;
                            document.getElementById('driverLongitude').value = position.coords.longitude;

                            // عرض رسالة النجاح لفترة قصيرة
                            Swal.fire({
                                icon: 'success',
                                title: 'تم!',
                                text: 'تم تحديد موقعك بنجاح',
                                timer: 1500,
                                showConfirmButton: false
                            });

                            resolve(position);
                        },
                        (error) => {
                            // إغلاق مؤشر التحميل
                            loadingAlert.close();

                            let errorMessage = 'حدث خطأ في تحديد الموقع';
                            switch (error.code) {
                                case error.PERMISSION_DENIED:
                                    errorMessage = 'تم رفض الوصول إلى الموقع. يرجى السماح للتطبيق باستخدام خدمة الموقع';
                                    break;
                                case error.POSITION_UNAVAILABLE:
                                    errorMessage = 'معلومات الموقع غير متوفرة';
                                    break;
                                case error.TIMEOUT:
                                    errorMessage = 'انتهت مهلة طلب الموقع';
                                    break;
                            }

                            Swal.fire({
                                icon: 'error',
                                title: 'خطأ!',
                                text: errorMessage
                            });

                            reject(error);
                        },
                        {
                            enableHighAccuracy: true,
                            timeout: 10000,
                            maximumAge: 0
                        }
                    );
                });
            }


            // تشغيل الاختبار عند تحميل الصفحة
            document.addEventListener('DOMContentLoaded', addTestButton);
            // إضافة متغير عالمي لتخزين معرف المراقبة
            let locationWatchId = null;

            // دالة بدء تتبع موقع السائق
            function startDriverLocationTracking(driverId) {
                if (!navigator.geolocation) {
                    showToast('متصفحك لا يدعم خدمة تحديد الموقع', 'error');
                    return;
                }

                // إيقاف أي تتبع سابق إذا كان موجوداً
                if (locationWatchId) {
                    stopDriverLocationTracking();
                }

                // بدء مراقبة الموقع
                locationWatchId = navigator.geolocation.watchPosition(
                    (position) => {
                        updateDriverLocation(driverId, position);
                    },
                    (error) => {
                        handleLocationError(error);
                    },
                    {
                        enableHighAccuracy: true,
                        timeout: 10000,
                        maximumAge: 0
                    }
                );

                // تخزين معرف السائق في localStorage
                localStorage.setItem('activeDriverId', driverId);

                showToast('تم تفعيل تتبع الموقع بنجاح', 'success');
            }

            // دالة إيقاف تتبع موقع السائق
            function stopDriverLocationTracking() {
                if (locationWatchId) {
                    navigator.geolocation.clearWatch(locationWatchId);
                    locationWatchId = null;
                    localStorage.removeItem('activeDriverId');
                    showToast('تم إيقاف تتبع الموقع', 'info');
                }
            }

            // دالة تحديث موقع السائق
            async function updateDriverLocation(driverId, position) {
                try {
                    const locationUpdate = {
                        coordinates: {
                            lat: position.coords.latitude,
                            lng: position.coords.longitude
                        },
                        lastUpdated: firebase.database.ServerValue.TIMESTAMP
                    };

                    // تحديث الموقع في قاعدة البيانات
                    await database.ref(`drivers/${driverId}`).update(locationUpdate);

                    // تحديث موقع السائق على الخريطة
                    updateDriverMarkerOnMap(driverId, locationUpdate.coordinates);
                } catch (error) {
                    console.error('Error updating driver location:', error);
                    showToast('حدث خطأ في تحديث الموقع', 'error');
                }
            }

            // دالة تحديث موقع السائق على الخريطة
            function updateDriverMarkerOnMap(driverId, coordinates) {
                if (!map || !markerLayer) return;

                // البحث عن علامة السائق الحالية
                let driverMarker = markerLayer.getLayers().find(
                    layer => layer.options.driverId === driverId
                );

                if (driverMarker) {
                    // تحديث موقع العلامة الحالية
                    driverMarker.setLatLng([coordinates.lat, coordinates.lng]);
                } else {
                    // إنشاء علامة جديدة للسائق
                    database.ref(`drivers/${driverId}`).once('value')
                        .then(snapshot => {
                            const driver = snapshot.val();
                            if (driver) {
                                driverMarker = L.marker([coordinates.lat, coordinates.lng], {
                                    icon: L.divIcon({
                                        html: `
                                <div style="position: relative; text-align: center;">
                                    <img src="${driver.imageUrl || 'https://firebasestorage.googleapis.com/v0/b/messageemeapp.appspot.com/o/driver-images%2F7605a607-6cf8-4b32-aee1-fa7558c98452.png?alt=media&token=5cf9e67c-ba6e-4431-a6a0-79dede15b527'}" 
                                         alt="صورة السائق" 
                                         style="width: 35px; height: 35px; border-radius: 50%; border: 2px solid #FFD700;">
                                    <i class="fas fa-taxi" 
                                       style="position: absolute; bottom: -5px; right: 50%; transform: translateX(50%); 
                                       color: #FFD700; font-size: 1.2rem;"></i>
                                </div>
                            `,
                                        className: 'driver-marker',
                                        iconSize: [40, 40]
                                    }),
                                    driverId: driverId
                                }).addTo(markerLayer);

                                // إضافة النافذة المنبثقة
                                driverMarker.bindPopup(`
                        <div style="text-align: center;">
                            <h6>${driver.name}</h6>
                            <p>${driver.carType} - ${driver.carModel}</p>
                            <button class="btn btn-sm btn-primary" onclick="openChatWindow('${driverId}')">
                                <i class="fas fa-comment"></i> مراسلة
                            </button>
                        </div>
                    `);
                            }
                        });
                }
            }

            async function handleAddDriver(event) {
    event.preventDefault();
    showLoading();

    try {
        const imageFile = document.getElementById('driverImage').files[0];
        if (!imageFile) {
            throw new Error('الرجاء اختيار صورة للسائق');
        }

        // الحصول على الإحداثيات
        const latitude = parseFloat(document.getElementById('driverLatitude').value);
        const longitude = parseFloat(document.getElementById('driverLongitude').value);

        if (!latitude || !longitude) {
            throw new Error('يرجى تحديد موقع السائق أولاً');
        }

        // رفع الصورة إلى Firebase Storage
        const imageRef = storage.ref(`drivers/${Date.now()}_${imageFile.name}`);
        const uploadTask = await imageRef.put(imageFile);
        const imageUrl = await uploadTask.ref.getDownloadURL();

        // تجهيز بيانات السائق
        const driverData = {
            name: document.getElementById('driverName').value,
            phone: document.getElementById('driverPhone').value,
            carType: document.getElementById('carType').value,
            carModel: document.getElementById('carModel').value,
            location: document.getElementById('driverLocation').value,
            coordinates: {
                lat: latitude,
                lng: longitude
            },
            bio: document.getElementById('driverBio').value,
            imageUrl: imageUrl,
            rating: 5,
            trips: 0,
            approved: false,         // إضافة حقل الموافقة
            approvalStatus: 'pending', // حالة الموافقة
            active: false,           // حالة النشاط
            registrationDate: firebase.database.ServerValue.TIMESTAMP,
            lastUpdate: firebase.database.ServerValue.TIMESTAMP
        };

        // إضافة السائق إلى قاعدة البيانات
        const newDriverRef = await database.ref('drivers').push(driverData);

        // إغلاق النافذة المنبثقة
        const modal = bootstrap.Modal.getInstance(document.getElementById('addDriverModal'));
        modal.hide();

        // إعادة تعيين النموذج
        document.getElementById('addDriverForm').reset();
        
        // عرض رسالة نجاح
        Swal.fire({
            title: 'تم تقديم الطلب بنجاح!',
            html: `
                <div class="success-message">
                    <p>تم إرسال طلبك للمراجعة</p>
                    <p>رقم الطلب: ${newDriverRef.key}</p>
                    <small>سيتم مراجعة طلبك وتفعيل حسابك قريباً</small>
                </div>
            `,
            icon: 'success',
            confirmButtonText: 'حسناً',
            confirmButtonColor: '#FFD700'
        });

        // تحديث قائمة السائقين
        loadDrivers();

    } catch (error) {
        console.error('Error adding driver:', error);
        showToast(error.message, 'error');
    } finally {
        hideLoading();
    }
}

            // إضافة استعادة حالة التتبع عند تحميل الصفحة
            document.addEventListener('DOMContentLoaded', () => {
                const activeDriverId = localStorage.getItem('activeDriverId');
                if (activeDriverId) {
                    startDriverLocationTracking(activeDriverId);
                }
            });

            // نظام إدارة الإشعارات
            class NotificationsManager {
                constructor() {
                    this.database = firebase.database();
                    this.messageCounter = 0;
                    this.notificationCounter = 0;
                    this.notificationSound = new Audio('notification-sound.mp3');
                    this.messageSound = new Audio('message-sound.mp3');
                    this.initialize();
                }

                initialize() {
                    // تهيئة العناصر عند تحميل الصفحة
                    document.addEventListener('DOMContentLoaded', () => {
                        this.setupNotificationButtons();
                        this.setupNotificationListeners();
                    });
                }

                setupNotificationButtons() {
                    // إعداد زر الإشعارات
                    const notificationsBtn = document.querySelector('[data-bs-target="#notificationsModal"]');
                    if (notificationsBtn) {
                        notificationsBtn.innerHTML = `
                <i class="fas fa-bell"></i>
                <span class="notification-badge position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger" style="display: none;">0</span>
            `;
                    }

                    // إعداد زر الرسائل
                    const messagesBtn = document.querySelector('[data-bs-target="#messagesModal"]');
                    if (messagesBtn) {
                        messagesBtn.innerHTML = `
                <i class="fas fa-envelope"></i>
                <span class="message-badge position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger" style="display: none;">0</span>
            `;
                    }
                }

                setupNotificationListeners() {
                    // الحصول على معرف السائق من التخزين المحلي
                    const driverId = localStorage.getItem('currentDriverId');
                    if (!driverId) return;

                    // مراقبة الرسائل الجديدة
                    this.database.ref(`chats/${driverId}/messages`).on('child_added', (snapshot) => {
                        const message = snapshot.val();
                        if (message && !message.read) {
                            this.messageCounter++;
                            this.updateMessageBadge();
                            this.showMessageNotification(message);
                            this.messageSound.play().catch(e => console.log('Audio play failed:', e));
                        }
                    });

                    // مراقبة الإشعارات الجديدة
                    this.database.ref(`drivers/${driverId}/notifications`).on('child_added', (snapshot) => {
                        const notification = snapshot.val();
                        if (notification && !notification.read) {
                            this.notificationCounter++;
                            this.updateNotificationBadge();
                            this.showNotification(notification);
                            this.notificationSound.play().catch(e => console.log('Audio play failed:', e));
                        }
                    });
                }

                updateMessageBadge() {
                    const badge = document.querySelector('.message-badge');
                    if (badge) {
                        badge.textContent = this.messageCounter;
                        badge.style.display = this.messageCounter > 0 ? 'block' : 'none';
                    }
                }

                updateNotificationBadge() {
                    const badge = document.querySelector('.notification-badge');
                    if (badge) {
                        badge.textContent = this.notificationCounter;
                        badge.style.display = this.notificationCounter > 0 ? 'block' : 'none';
                    }
                }

                showMessageNotification(message) {
                    const toast = document.createElement('div');
                    toast.className = 'notification-toast animate__animated animate__fadeInRight';
                    toast.innerHTML = `
            <div class="notification-content">
                <div class="notification-title">رسالة جديدة</div>
                <div class="notification-body">
                    <strong>${message.senderName}</strong>: ${message.text}
                </div>
            </div>
            <button class="notification-close" onclick="this.parentElement.remove()">&times;</button>
        `;

                    document.body.appendChild(toast);
                    setTimeout(() => {
                        toast.classList.replace('animate__fadeInRight', 'animate__fadeOutRight');
                        setTimeout(() => toast.remove(), 300);
                    }, 5000);
                }

                showNotification(notification) {
                    const toast = document.createElement('div');
                    toast.className = 'notification-toast animate__animated animate__fadeInRight';
                    toast.innerHTML = `
            <div class="notification-content">
                <div class="notification-title">${notification.title}</div>
                <div class="notification-body">${notification.body}</div>
            </div>
            <button class="notification-close" onclick="this.parentElement.remove()">&times;</button>
        `;

                    document.body.appendChild(toast);
                    setTimeout(() => {
                        toast.classList.replace('animate__fadeInRight', 'animate__fadeOutRight');
                        setTimeout(() => toast.remove(), 300);
                    }, 5000);
                }

                async markMessagesAsRead(driverId) {
                    try {
                        const messagesRef = this.database.ref(`chats/${driverId}/messages`);
                        const snapshot = await messagesRef.once('value');
                        const updates = {};

                        snapshot.forEach(child => {
                            if (!child.val().read) {
                                updates[`${child.key}/read`] = true;
                            }
                        });

                        await messagesRef.update(updates);
                        this.messageCounter = 0;
                        this.updateMessageBadge();
                    } catch (error) {
                        console.error('Error marking messages as read:', error);
                    }
                }

                async markNotificationsAsRead(driverId) {
                    try {
                        const notificationsRef = this.database.ref(`drivers/${driverId}/notifications`);
                        const snapshot = await notificationsRef.once('value');
                        const updates = {};

                        snapshot.forEach(child => {
                            if (!child.val().read) {
                                updates[`${child.key}/read`] = true;
                            }
                        });

                        await notificationsRef.update(updates);
                        this.notificationCounter = 0;
                        this.updateNotificationBadge();
                    } catch (error) {
                        console.error('Error marking notifications as read:', error);
                    }
                }

                // إضافة رسالة جديدة
                async addMessage(driverId, message) {
                    try {
                        const newMessageRef = this.database.ref(`chats/${driverId}/messages`).push();
                        await newMessageRef.set({
                            ...message,
                            timestamp: firebase.database.ServerValue.TIMESTAMP,
                            read: false
                        });
                    } catch (error) {
                        console.error('Error adding message:', error);
                        throw error;
                    }
                }

                // إضافة إشعار جديد
                async addNotification(driverId, notification) {
                    try {
                        const newNotificationRef = this.database.ref(`drivers/${driverId}/notifications`).push();
                        await newNotificationRef.set({
                            ...notification,
                            timestamp: firebase.database.ServerValue.TIMESTAMP,
                            read: false
                        });
                    } catch (error) {
                        console.error('Error adding notification:', error);
                        throw error;
                    }
                }
            }
            // إضافة الدالة لمعالجة تسجيل الخروج
            function handleLogout() {
                // عرض تأكيد قبل تسجيل الخروج
                Swal.fire({
                    title: 'تسجيل الخروج',
                    text: 'هل أنت متأكد أنك تريد تسجيل الخروج؟',
                    icon: 'question',
                    showCancelButton: true,
                    confirmButtonColor: '#FFD700',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'نعم، تسجيل الخروج',
                    cancelButtonText: 'إلغاء',
                    background: '#1a1a1a',
                    color: '#FFFFFF'
                }).then((result) => {
                    if (result.isConfirmed) {
                        // حذف بيانات المستخدم من التخزين المحلي
                        localStorage.removeItem('currentUser');

                        // إعادة تعيين واجهة المستخدم
                        resetUserInterface();

                        // عرض رسالة نجاح
                        showToast('تم تسجيل الخروج بنجاح');

                        // تأخير قصير قبل إعادة تحميل الصفحة
                        setTimeout(() => {
                            window.location.reload();
                        }, 1000);
                    }
                });
            }

            // دالة إعادة تعيين واجهة المستخدم
            function resetUserInterface() {
                // إعادة تعيين زر الملف الشخصي
                const profileBtn = document.querySelector('.user-profile-btn');
                if (profileBtn) {
                    profileBtn.innerHTML = `
            <i class="fas fa-user"></i>
            <span class="ms-1 d-none d-md-inline">تسجيل</span>
        `;
                    profileBtn.setAttribute('data-bs-toggle', 'modal');
                    profileBtn.setAttribute('data-bs-target', '#profileModal');
                }

                // إعادة تعيين معلومات المستخدم في الشريط الجانبي
                const sideNavUserInfo = document.querySelector('.side-nav-user-info');
                if (sideNavUserInfo) {
                    sideNavUserInfo.innerHTML = '';
                }
            }

            // إنشاء نسخة من مدير الإشعارات
            const notificationsManager = new NotificationsManager();


            document.addEventListener('DOMContentLoaded', function () {
                // إضافة قسم معلومات المستخدم في الشريط الجانبي
                const sideNav = document.getElementById('sideNav');
                if (sideNav && !sideNav.querySelector('.side-nav-user-info')) {
                    const userInfoSection = document.createElement('div');
                    userInfoSection.className = 'side-nav-user-info';
                    sideNav.insertBefore(userInfoSection, sideNav.firstChild);
                }

                // ربط نماذج التسجيل
                const driverRegistrationForm = document.getElementById('driverRegistrationForm');
                if (driverRegistrationForm) {
                    driverRegistrationForm.addEventListener('submit', handleDriverRegistration);
                }

                const userRegistrationForm = document.getElementById('userRegistrationForm');
                if (userRegistrationForm) {
                    userRegistrationForm.addEventListener('submit', handleUserRegistration);
                }
            });

            // دالة فتح نافذة تسجيل الدخول
function openLoginModal() {
    // إغلاق نافذة اختيار نوع الحساب
    const profileModal = bootstrap.Modal.getInstance(document.getElementById('profileModal'));
    profileModal.hide();

    // فتح نافذة تسجيل الدخول
    const loginModal = new bootstrap.Modal(document.getElementById('loginModal'));
    loginModal.show();
}

// دالة معالجة تسجيل الدخول
async function handleLogin(event) {
    event.preventDefault();
    showLoading();

    try {
        const formData = new FormData(event.target);
        const email = formData.get('email');
        const password = formData.get('password');

        // البحث عن المستخدم في قاعدة البيانات
        const usersRef = firebase.database().ref('users');
        const snapshot = await usersRef.orderByChild('email').equalTo(email).once('value');
        const users = snapshot.val();

        if (!users) {
            throw new Error('البريد الإلكتروني أو كلمة المرور غير صحيحة');
        }

        const userId = Object.keys(users)[0];
        const user = users[userId];

        // التحقق من كلمة المرور (في الواقع يجب استخدام Firebase Auth)
        if (password !== user.password) {
            throw new Error('البريد الإلكتروني أو كلمة المرور غير صحيحة');
        }

        // حفظ بيانات المستخدم
        localStorage.setItem('currentUser', JSON.stringify(user));

        // تحديث واجهة المستخدم
        updateUIAfterLogin(user);

        // إغلاق نافذة تسجيل الدخول
        const loginModal = bootstrap.Modal.getInstance(document.getElementById('loginModal'));
        loginModal.hide();

        // إظهار رسالة نجاح
        showToast('تم تسجيل الدخول بنجاح');

    } catch (error) {
        console.error('Login error:', error);
        showToast(error.message, 'error');
    } finally {
        hideLoading();
    }
}

// دالة تحديث واجهة المستخدم بعد تسجيل الدخول
function updateUIAfterLogin(user) {
    // إخفاء زر تسجيل من الشريط العلوي
    const registrationBtn = document.querySelector('[data-bs-target="#profileModal"]');
    if (registrationBtn) {
        registrationBtn.style.display = 'none';
    }

    // تحديث زر الملف الشخصي
    const profileBtn = document.querySelector('.user-profile-btn');
    if (profileBtn) {
        profileBtn.innerHTML = `
            <img src="${user.photo || 'default-avatar.png'}" 
                 alt="${user.name}" 
                 class="rounded-circle me-2" 
                 style="width: 35px; height: 35px; object-fit: cover;">
            <span class="d-none d-md-inline">${user.name}</span>
        `;
        
        // تحديث القائمة المنسدلة
        const dropdownMenu = document.createElement('div');
        dropdownMenu.className = 'dropdown-menu dropdown-menu-end';
        dropdownMenu.innerHTML = `
            <a class="dropdown-item" href="#"><i class="fas fa-user me-2"></i>الملف الشخصي</a>
            <div class="dropdown-divider"></div>
            <a class="dropdown-item text-danger" href="#" onclick="handleLogout()">
                <i class="fas fa-sign-out-alt me-2"></i>تسجيل الخروج
            </a>
        `;
        profileBtn.parentElement.appendChild(dropdownMenu);
    }

    // تحديث معلومات المستخدم في الشريط الجانبي
    const sideNavUserInfo = document.querySelector('.side-nav-user-info');
    if (sideNavUserInfo) {
        sideNavUserInfo.innerHTML = `
            <div class="text-center p-4">
                <img src="${user.photo || 'default-avatar.png'}" 
                     alt="${user.name}" 
                     class="rounded-circle mb-3"
                     style="width: 80px; height: 80px; object-fit: cover;">
                <h6 class="text-white mb-1">${user.name}</h6>
                <span class="badge bg-primary mb-3">${user.userType}</span>
                <button onclick="handleLogout()" 
                        class="btn btn-danger btn-sm w-100">
                    <i class="fas fa-sign-out-alt me-2"></i>تسجيل الخروج
                </button>
            </div>
        `;
    }
}
async function approveDriver(driverId) {
    try {
        await database.ref(`drivers/${driverId}`).update({
            approved: true,
            status: 'approved',
            active: true
        });
        
        showToast('تم تفعيل السائق بنجاح', 'success');
        loadDrivers(); // تحديث العرض
    } catch (error) {
        console.error('Error approving driver:', error);
        showToast('حدث خطأ أثناء تفعيل السائق', 'error');
    }
}

// دالة فحص حالة الموافقة على السائق
function checkDriverApprovalStatus(driverId) {
    return new Promise((resolve, reject) => {
        database.ref(`drivers/${driverId}`).once('value')
            .then(snapshot => {
                const driver = snapshot.val();
                if (!driver) {
                    reject(new Error('لم يتم العثور على السائق'));
                    return;
                }
                resolve({
                    isApproved: driver.approved === true,
                    isPending: driver.approvalStatus === 'pending',
                    status: driver.approvalStatus || 'not_approved'
                });
            })
            .catch(error => reject(error));
    });
}

        </script>
        </main>
        <!-- ربط ملف الجافا سكريبت -->
        <!-- قبل إغلاق body -->
        <script src="nearby-drivers.js"></script>
        <script src="auth.js"></script>


    </body>

</html>

1234567890-